//This file is automatically generated. DO NOT EDIT!
using System;
using RobotRaconteurWeb;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
#pragma warning disable 0108

namespace com.robotraconteur.testing.TestService3
{
public class com__robotraconteur__testing__TestService3Factory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.testing.TestService3\n\nstdver 0.9.2\n#option version 0.9.0\n\nimport com.robotraconteur.testing.TestService1\nusing  com.robotraconteur.testing.TestService1.testroot\nusing  com.robotraconteur.testing.TestService1.teststruct1\nusing  com.robotraconteur.testing.TestService1.teststruct2\nusing  com.robotraconteur.testing.TestService1.testexception1\nusing  com.robotraconteur.testing.TestService1.sub2\nusing  com.robotraconteur.testing.TestService1.sub3\n\nenum testenum1\nvalue1 = 0,	value2,	value3,	anothervalue = -1,\nanothervalue2 = -2,\nanothervalue3 = -3,\nhexval1 = 0x10,\nhexval2,\nneghexval1 = -0x7ffffffb,\nneghexval2,\nmore_values\nend\n\nconstant string strconst \"This is a\\n \\\"string constant\\\" \\\\\\/\\b\\f \\r\\u00FF tabme\\ttabme\\n smile! \\ud83d\\udE01\"\nconstant int32 int32const 3856384\nconstant int32[] int32const_array {182476, 56483, -2947}\nconstant int32 int32hexconst 0x082bc7\nconstant int32 int32hexconst2 -0x7264c17\nconstant int32[] int32hexconst_array { 0x8274ec, -0x0001, +0xABCDEF, 0xabcdef, 0x012345, 0x6789 }\nconstant double[] doubleconst_array {1.5847, 3.14, -548e3, 3452.67e2, 485e-21}\nconstant struct structconst {field1: strconst, field2: int32const_array}\nconstant struct structconst2 {field3: structconst, field4: int32const}\n\nexception test_exception4\n\nnamedarray vector3\nfield double x\nfield double y\nfield double z\nend\n\nnamedarray quaternion\nfield double q0\nfield double q1\nfield double q2\nfield double q3\nend\n\nnamedarray transform\nfield quaternion rotation\nfield vector3 translation\nend\n\nnamedarray pixel\nfield uint8 r\nfield uint8 b\nfield uint8 g\nend\n\nnamedarray pixel2\nfield uint8 c\nfield pixel d\nfield pixel e\nfield pixel[7] f\nfield pixel g\nend\n\npod testpod1\nfield double d1\nfield double[6] d2\nfield double[6-] d3\nfield double[3,3] d4\nfield testpod2 s1\nfield testpod2[8] s2\nfield testpod2[9-] s3\nfield testpod2[2,4] s4\nfield transform t1\nfield transform[4] t2\nfield transform[15-] t3\nfield transform[2,4] t4\nend\n\npod testpod2\nfield int8 i1\nfield int8[15] i2\nfield int8[17-] i3\nend\n\nstruct teststruct3\nfield testpod1 s1\nfield testpod1[] s2\nfield testpod1[11] s3\nfield testpod1[16-] s4\nfield testpod1[3,3] s5\nfield testpod1[*] s6\nfield testpod1{list} s7\nfield testpod1[]{list} s8\nfield testpod1[*]{list} s9\nfield varvalue s10\nfield varvalue s11\nfield varvalue s12\nfield varvalue s13\nfield varvalue s14\nfield varvalue s15\nfield transform t1\nfield transform[4] t2\nfield transform[2,4] t3\nfield varvalue t4\nfield varvalue t5\nfield transform{list} t6\nfield transform[4]{list} t7\nfield transform[2,4]{list} t8\nfield varvalue t9\nfield varvalue t10\nfield varvalue t11\n\nend\n\nobject testroot3\n\nconstant string unknown_modifier_hello \"hello world!\"\n\nproperty int32 readme [readonly]\nproperty int32 writeme [writeonly]\n\npipe int32 unreliable1 [unreliable,readonly]\n\nwire int32 peekwire [readonly]\nwire int32 \\\npokewire [writeonly]\nproperty int32 unknown_modifier [unknown, unknown_3(23, 45.8e-5, unknown_modifier_hello)]\n\nmemory double[] readmem [readonly]\n\nobjref obj4 o4\n\nproperty testenum1 testenum1_prop\n\nproperty testpod1 testpod1_prop\nfunction void testpod1_func1(testpod1 s)\nfunction testpod1 testpod1_func2()\n\nproperty teststruct3 teststruct3_prop\n\nmemory testpod2[] pod_m1\nmemory testpod2[*] pod_m2\n\nfunction double{generator} gen_func1()\nfunction uint8[]{generator} gen_func2(string name)\nfunction void gen_func3(string name, uint8[]{generator} in)\nfunction uint8[]{generator} gen_func4(uint8[]{generator} in)\nfunction teststruct2{generator} gen_func5(teststruct2{generator} in)\n\n#extra tests for fixed length arrays\nproperty double[6]{list} d1\nproperty double[6-]{list} d2\nproperty double[6]{int32} d3\nproperty double[6-]{int32} d4\nproperty double[3,3]{list} d5\nproperty double[3,3]{int32} d6\n\n#Test pipe and wire verification\npipe int32[3] p1\npipe int32[3-] p2\npipe int32[2,2] p3\nwire int32[6] w1\nwire int32[6-] w2\nwire int32[3,2] w3\n\n#namedarray test\nproperty vector3 testnamedarray1\nproperty transform testnamedarray2\nproperty transform[10-] testnamedarray3\nproperty transform[*] testnamedarray4\nproperty transform[3,2] testnamedarray5\n\nmemory transform[] namedarray_m1\nmemory transform[*] namedarray_m2\n\n#new primitive types test\nproperty cdouble c1\nproperty cdouble[] c2\nproperty cdouble[*] c3\nproperty cdouble{list} c4\nproperty cdouble[]{list} c5\nproperty cdouble[*]{list} c6\nproperty csingle c7\nproperty csingle[] c8\nproperty csingle[*] c9\nproperty csingle{list} c10\nproperty csingle[]{list} c11\nproperty csingle[*]{list} c12\n\nproperty bool b1\nproperty bool[] b2\nproperty bool[*] b3\nproperty bool{list} b4\nproperty bool[]{list} b5\nproperty bool[*]{list} b6\n\nmemory cdouble[] c_m1\nmemory cdouble[*] c_m2\nmemory cdouble[] c_m3\nmemory cdouble[*] c_m4\nmemory bool[] c_m5\nmemory bool[*] c_m6\n\nobjref obj5 nolock_test\n\nfunction void test_exception_params1()\nfunction void test_exception_params2()\n\nend\n\nobject obj1\nproperty double[] d1\nend\n\nobject obj2\nimplements obj1\nproperty double[] d1\nend\n\nobject obj3\nimplements obj1\nimplements obj2\nproperty double[] d1\nend\n\nobject obj4\nimplements sub2\nproperty string s_ind\nproperty int32 i_ind\n\nproperty string data\nobjref sub3{string} o3_1\nend\n\nobject obj5\n\nproperty double p1\nproperty double p2 [nolock]\nproperty double p3 [nolockread]\n\nfunction int32 f1()\nfunction int32 f2() [nolock]\n\npipe int32 q1 [readonly]\npipe int32 q2 [readonly,nolock]\n\nwire int32 w1 [readonly]\nwire int32 w2 [readonly,nolock]\n\nmemory int32[] m1\nmemory int32[] m2 [nolock]\nmemory int32[] m3 [nolockread]\n\nend\n\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.testing.TestService3";}
    public teststruct3_stub teststruct3_stubentry;
    public testpod1_stub testpod1_stubentry;
    public testpod2_stub testpod2_stubentry;
    public vector3_stub vector3_stubentry;
    public quaternion_stub quaternion_stubentry;
    public transform_stub transform_stubentry;
    public pixel_stub pixel_stubentry;
    public pixel2_stub pixel2_stubentry;
    public com__robotraconteur__testing__TestService3Factory() : this(null,null) {}
    public com__robotraconteur__testing__TestService3Factory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    teststruct3_stubentry=new teststruct3_stub(this,this.node,this.context);
    testpod1_stubentry=new testpod1_stub(this,this.node,this.context);
    testpod2_stubentry=new testpod2_stub(this,this.node,this.context);
    vector3_stubentry=new vector3_stub();
    quaternion_stubentry=new quaternion_stub();
    transform_stubentry=new transform_stub();
    pixel_stubentry=new pixel_stub();
    pixel2_stubentry=new pixel2_stub();
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="teststruct3")
    return teststruct3_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    if (objecttype=="testpod1")
    return testpod1_stubentry;
    if (objecttype=="testpod2")
    return testpod2_stubentry;
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    if (objecttype=="vector3")
    return vector3_stubentry;
    if (objecttype=="quaternion")
    return quaternion_stubentry;
    if (objecttype=="transform")
    return transform_stubentry;
    if (objecttype=="pixel")
    return pixel_stubentry;
    if (objecttype=="pixel2")
    return pixel2_stubentry;
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "testroot3":
    return new testroot3_stub(path, context);
    case "obj1":
    return new obj1_stub(path, context);
    case "obj2":
    return new obj2_stub(path, context);
    case "obj3":
    return new obj3_stub(path, context);
    case "obj4":
    return new obj4_stub(path, context);
    case "obj5":
    return new obj5_stub(path, context);
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "testroot3":
    return new testroot3_skel(path,(testroot3)obj,context);
    case "obj1":
    return new obj1_skel(path,(obj1)obj,context);
    case "obj2":
    return new obj2_skel(path,(obj2)obj,context);
    case "obj3":
    return new obj3_skel(path,(obj3)obj,context);
    case "obj4":
    return new obj4_skel(path,(obj4)obj,context);
    case "obj5":
    return new obj5_skel(path,(obj5)obj,context);
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    if (rr_stype=="test_exception4") return new test_exception4(rr_exp.Message);
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class teststruct3_stub : IStructureStub {
    public teststruct3_stub(com__robotraconteur__testing__TestService3Factory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__testing__TestService3Factory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementNestedElementList PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    teststruct3 s = (teststruct3)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodToArray<testpod1>(rr_node, rr_context, "s1",ref s.s1));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodArray<testpod1>(rr_node, rr_context, "s2",s.s2));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodArray<testpod1>(rr_node, rr_context, "s3",DataTypeUtil.VerifyArrayLength(s.s3, 11, false)));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodArray<testpod1>(rr_node, rr_context, "s4",DataTypeUtil.VerifyArrayLength(s.s4, 16, true)));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodMultiDimArray<testpod1>(rr_node, rr_context, "s5",DataTypeUtil.VerifyArrayLength(s.s5,9,new uint[] {3, 3})));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodMultiDimArray<testpod1>(rr_node, rr_context, "s6",s.s6));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<testpod1>(rr_node, rr_context, "s7",s.s7));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<testpod1[]>(rr_node, rr_context, "s8",s.s8));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<PodMultiDimArray>(rr_node, rr_context, "s9",s.s9));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackVarType(rr_node, rr_context, "s10",s.s10));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackVarType(rr_node, rr_context, "s11",s.s11));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackVarType(rr_node, rr_context, "s12",s.s12));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackVarType(rr_node, rr_context, "s13",s.s13));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackVarType(rr_node, rr_context, "s14",s.s14));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackVarType(rr_node, rr_context, "s15",s.s15));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<transform>(rr_node, rr_context, "t1",ref s.t1));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArray<transform>(rr_node, rr_context, "t2",DataTypeUtil.VerifyArrayLength(s.t2, 4, false)));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedMultiDimArray<transform>(rr_node, rr_context, "t3",DataTypeUtil.VerifyArrayLength(s.t3,8,new uint[] {2, 4})));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackVarType(rr_node, rr_context, "t4",s.t4));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackVarType(rr_node, rr_context, "t5",s.t5));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<transform>(rr_node, rr_context, "t6",s.t6));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<transform[]>(rr_node, rr_context, "t7",DataTypeUtil.VerifyArrayLength(s.t7, 4, false)));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<NamedMultiDimArray>(rr_node, rr_context, "t8",DataTypeUtil.VerifyArrayLength(s.t8,8,new uint[] {2, 4})));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackVarType(rr_node, rr_context, "t9",s.t9));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackVarType(rr_node, rr_context, "t10",s.t10));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackVarType(rr_node, rr_context, "t11",s.t11));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.testing.TestService3.teststruct3",m);
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    teststruct3 s=new teststruct3();
    s.s1 =MessageElementUtil.UnpackPodFromArray<testpod1>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"s1"));
    s.s2 =MessageElementUtil.UnpackPodArray<testpod1>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"s2"));
    s.s3 =DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackPodArray<testpod1>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"s3")), 11, false);
    s.s4 =DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackPodArray<testpod1>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"s4")), 16, true);
    s.s5 =DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackPodMultiDimArray<testpod1>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"s5")),9,new uint[] {3, 3});
    s.s6 =MessageElementUtil.UnpackPodMultiDimArray<testpod1>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"s6"));
    s.s7 =MessageElementUtil.UnpackList<testpod1>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"s7"));
    s.s8 =MessageElementUtil.UnpackList<testpod1[]>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"s8"));
    s.s9 =MessageElementUtil.UnpackList<PodMultiDimArray>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"s9"));
    s.s10 =MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElement.FindElement(m.Elements,"s10"));
    s.s11 =MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElement.FindElement(m.Elements,"s11"));
    s.s12 =MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElement.FindElement(m.Elements,"s12"));
    s.s13 =MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElement.FindElement(m.Elements,"s13"));
    s.s14 =MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElement.FindElement(m.Elements,"s14"));
    s.s15 =MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElement.FindElement(m.Elements,"s15"));
    s.t1 =MessageElementUtil.UnpackNamedArrayFromArray<transform>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"t1"));
    s.t2 =DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackNamedArray<transform>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"t2")), 4, false);
    s.t3 =DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackNamedMultiDimArray<transform>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"t3")),8,new uint[] {2, 4});
    s.t4 =MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElement.FindElement(m.Elements,"t4"));
    s.t5 =MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElement.FindElement(m.Elements,"t5"));
    s.t6 =MessageElementUtil.UnpackList<transform>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"t6"));
    s.t7 =DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackList<transform[]>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"t7")), 4, false);
    s.t8 =DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackList<NamedMultiDimArray>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"t8")),8,new uint[] {2, 4});
    s.t9 =MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElement.FindElement(m.Elements,"t9"));
    s.t10 =MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElement.FindElement(m.Elements,"t10"));
    s.t11 =MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElement.FindElement(m.Elements,"t11"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class testpod1_stub : PodStub<testpod1> {
    public testpod1_stub(com__robotraconteur__testing__TestService3Factory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__testing__TestService3Factory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public override MessageElementNestedElementList PackPod(ref testpod1 s1) {
    List<MessageElement> m=new List<MessageElement>();
    testpod1 s = (testpod1)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("d1",s.d1));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("d2",DataTypeUtil.VerifyArrayLength(s.d2, 6, false)));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("d3",DataTypeUtil.VerifyArrayLength(s.d3, 6, true)));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("d4",DataTypeUtil.VerifyArrayLength(s.d4, 9, false)));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodToArray<testpod2>(rr_node, rr_context, "s1",ref s.s1));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodArray<testpod2>(rr_node, rr_context, "s2",DataTypeUtil.VerifyArrayLength(s.s2, 8, false)));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodArray<testpod2>(rr_node, rr_context, "s3",DataTypeUtil.VerifyArrayLength(s.s3, 9, true)));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodArray<testpod2>(rr_node, rr_context, "s4",DataTypeUtil.VerifyArrayLength(s.s4, 8, false)));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<transform>(rr_node, rr_context, "t1",ref s.t1));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArray<transform>(rr_node, rr_context, "t2",DataTypeUtil.VerifyArrayLength(s.t2, 4, false)));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArray<transform>(rr_node, rr_context, "t3",DataTypeUtil.VerifyArrayLength(s.t3, 15, true)));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArray<transform>(rr_node, rr_context, "t4",DataTypeUtil.VerifyArrayLength(s.t4, 8, false)));
    return new MessageElementNestedElementList(DataTypes.pod_t, "", m);
    }
    public override testpod1 UnpackPod(MessageElementNestedElementList m) {
    if (m == null ) throw new NullReferenceException("Pod must not be null");
    testpod1 s = new testpod1();
    s.d1 =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"d1")));
    s.d2 =DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"d2")), 6, false);
    s.d3 =DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"d3")), 6, true);
    s.d4 =DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"d4")), 9, false);
    s.s1 =MessageElementUtil.UnpackPodFromArray<testpod2>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"s1"));
    s.s2 =DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackPodArray<testpod2>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"s2")), 8, false);
    s.s3 =DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackPodArray<testpod2>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"s3")), 9, true);
    s.s4 =DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackPodArray<testpod2>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"s4")), 8, false);
    s.t1 =MessageElementUtil.UnpackNamedArrayFromArray<transform>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"t1"));
    s.t2 =DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackNamedArray<transform>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"t2")), 4, false);
    s.t3 =DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackNamedArray<transform>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"t3")), 15, true);
    s.t4 =DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackNamedArray<transform>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"t4")), 8, false);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.testing.TestService3.testpod1"; } }
}

public class testpod2_stub : PodStub<testpod2> {
    public testpod2_stub(com__robotraconteur__testing__TestService3Factory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__testing__TestService3Factory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public override MessageElementNestedElementList PackPod(ref testpod2 s1) {
    List<MessageElement> m=new List<MessageElement>();
    testpod2 s = (testpod2)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<sbyte>("i1",s.i1));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<sbyte>("i2",DataTypeUtil.VerifyArrayLength(s.i2, 15, false)));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<sbyte>("i3",DataTypeUtil.VerifyArrayLength(s.i3, 17, true)));
    return new MessageElementNestedElementList(DataTypes.pod_t, "", m);
    }
    public override testpod2 UnpackPod(MessageElementNestedElementList m) {
    if (m == null ) throw new NullReferenceException("Pod must not be null");
    testpod2 s = new testpod2();
    s.i1 =(MessageElementUtil.UnpackScalar<sbyte>(MessageElement.FindElement(m.Elements,"i1")));
    s.i2 =DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackArray<sbyte>(MessageElement.FindElement(m.Elements,"i2")), 15, false);
    s.i3 =DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackArray<sbyte>(MessageElement.FindElement(m.Elements,"i3")), 17, true);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.testing.TestService3.testpod2"; } }
}

public class vector3_stub : NamedArrayStub<vector3,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref vector3 s) {
    return s.GetNumericArray();
    }
    public override vector3 GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 3) throw new DataTypeException("Invalid namedarray array");
    var s = new vector3();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(vector3[] s) {
    return s.GetNumericArray();
    }
    public override vector3[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 3 != 0) throw new DataTypeException("Invalid namedarray array");
    vector3[] s = new vector3[m.Length / 3];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.testing.TestService3.vector3"; } }
}

public class quaternion_stub : NamedArrayStub<quaternion,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref quaternion s) {
    return s.GetNumericArray();
    }
    public override quaternion GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 4) throw new DataTypeException("Invalid namedarray array");
    var s = new quaternion();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(quaternion[] s) {
    return s.GetNumericArray();
    }
    public override quaternion[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 4 != 0) throw new DataTypeException("Invalid namedarray array");
    quaternion[] s = new quaternion[m.Length / 4];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.testing.TestService3.quaternion"; } }
}

public class transform_stub : NamedArrayStub<transform,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref transform s) {
    return s.GetNumericArray();
    }
    public override transform GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 7) throw new DataTypeException("Invalid namedarray array");
    var s = new transform();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(transform[] s) {
    return s.GetNumericArray();
    }
    public override transform[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 7 != 0) throw new DataTypeException("Invalid namedarray array");
    transform[] s = new transform[m.Length / 7];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.testing.TestService3.transform"; } }
}

public class pixel_stub : NamedArrayStub<pixel,byte> {
    public override byte[] GetNumericArrayFromNamedArrayStruct(ref pixel s) {
    return s.GetNumericArray();
    }
    public override pixel GetNamedArrayStructFromNumericArray(byte[] m) {
    if (m.Length != 3) throw new DataTypeException("Invalid namedarray array");
    var s = new pixel();
    var a = new ArraySegment<byte>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override byte[] GetNumericArrayFromNamedArray(pixel[] s) {
    return s.GetNumericArray();
    }
    public override pixel[] GetNamedArrayFromNumericArray(byte[] m) {
    if (m.Length % 3 != 0) throw new DataTypeException("Invalid namedarray array");
    pixel[] s = new pixel[m.Length / 3];
    var a = new ArraySegment<byte>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.testing.TestService3.pixel"; } }
}

public class pixel2_stub : NamedArrayStub<pixel2,byte> {
    public override byte[] GetNumericArrayFromNamedArrayStruct(ref pixel2 s) {
    return s.GetNumericArray();
    }
    public override pixel2 GetNamedArrayStructFromNumericArray(byte[] m) {
    if (m.Length != 31) throw new DataTypeException("Invalid namedarray array");
    var s = new pixel2();
    var a = new ArraySegment<byte>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override byte[] GetNumericArrayFromNamedArray(pixel2[] s) {
    return s.GetNumericArray();
    }
    public override pixel2[] GetNamedArrayFromNumericArray(byte[] m) {
    if (m.Length % 31 != 0) throw new DataTypeException("Invalid namedarray array");
    pixel2[] s = new pixel2[m.Length / 31];
    var a = new ArraySegment<byte>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.testing.TestService3.pixel2"; } }
}

public class testroot3_stub : ServiceStub , testroot3 {
    private Pipe<int> rr_unreliable1;
    private Pipe<int[]> rr_p1;
    private Pipe<int[]> rr_p2;
    private Pipe<MultiDimArray> rr_p3;
    private Wire<int> rr_peekwire;
    private Wire<int> rr_pokewire;
    private Wire<int[]> rr_w1;
    private Wire<int[]> rr_w2;
    private Wire<MultiDimArray> rr_w3;
    private ArrayMemory<double> rr_readmem;
    private PodArrayMemory<testpod2> rr_pod_m1;
    private PodMultiDimArrayMemory<testpod2> rr_pod_m2;
    private NamedArrayMemory<transform> rr_namedarray_m1;
    private NamedMultiDimArrayMemory<transform> rr_namedarray_m2;
    private ArrayMemory<CDouble> rr_c_m1;
    private MultiDimArrayMemory<CDouble> rr_c_m2;
    private ArrayMemory<CDouble> rr_c_m3;
    private MultiDimArrayMemory<CDouble> rr_c_m4;
    private ArrayMemory<bool> rr_c_m5;
    private MultiDimArrayMemory<bool> rr_c_m6;
    public testroot3_stub(string path, ClientContext c) : base(path, c) {
    rr_unreliable1=new PipeClient<int>("unreliable1", this);
    rr_p1=new PipeClient<int[]>("p1", this);
    rr_p2=new PipeClient<int[]>("p2", this);
    rr_p3=new PipeClient<MultiDimArray>("p3", this);
    rr_peekwire=new WireClient<int>("peekwire", this);
    rr_pokewire=new WireClient<int>("pokewire", this);
    rr_w1=new WireClient<int[]>("w1", this);
    rr_w2=new WireClient<int[]>("w2", this);
    rr_w3=new WireClient<MultiDimArray>("w3", this);
    rr_readmem=new ArrayMemoryClient<double>("readmem",this, MemberDefinition_Direction.readonly_);
    rr_pod_m1=new PodArrayMemoryClient<testpod2>("pod_m1",this,111,MemberDefinition_Direction.both);
    rr_pod_m2=new PodMultiDimArrayMemoryClient<testpod2>("pod_m2",this,111,MemberDefinition_Direction.both);
    rr_namedarray_m1=new NamedArrayMemoryClient<transform>("namedarray_m1",this,7,MemberDefinition_Direction.both);
    rr_namedarray_m2=new NamedMultiDimArrayMemoryClient<transform>("namedarray_m2",this,7,MemberDefinition_Direction.both);
    rr_c_m1=new ArrayMemoryClient<CDouble>("c_m1",this, MemberDefinition_Direction.both);
    rr_c_m2=new MultiDimArrayMemoryClient<CDouble>("c_m2",this,MemberDefinition_Direction.both);
    rr_c_m3=new ArrayMemoryClient<CDouble>("c_m3",this, MemberDefinition_Direction.both);
    rr_c_m4=new MultiDimArrayMemoryClient<CDouble>("c_m4",this,MemberDefinition_Direction.both);
    rr_c_m5=new ArrayMemoryClient<bool>("c_m5",this, MemberDefinition_Direction.both);
    rr_c_m6=new MultiDimArrayMemoryClient<bool>("c_m6",this,MemberDefinition_Direction.both);
    }
    public async Task<int> get_readme(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "readme");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<int>(me));
        }
    public async Task set_readme(int value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"readme");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<int>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<int> get_writeme(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "writeme");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<int>(me));
        }
    public async Task set_writeme(int value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"writeme");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<int>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<int> get_unknown_modifier(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "unknown_modifier");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<int>(me));
        }
    public async Task set_unknown_modifier(int value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"unknown_modifier");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<int>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<testenum1> get_testenum1_prop(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "testenum1_prop");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackEnum<testenum1>(me);
        }
    public async Task set_testenum1_prop(testenum1 value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"testenum1_prop");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<testenum1>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<testpod1> get_testpod1_prop(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "testpod1_prop");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackPodFromArray<testpod1>(rr_node, rr_context, me);
        }
    public async Task set_testpod1_prop(testpod1 value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"testpod1_prop");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodToArray<testpod1>(rr_node, rr_context, "value",ref value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<teststruct3> get_teststruct3_prop(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "teststruct3_prop");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackStructure<teststruct3>(rr_node, rr_context, me);
        }
    public async Task set_teststruct3_prop(teststruct3 value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"teststruct3_prop");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<List<double[]>> get_d1(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "d1");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackList<double[]>(rr_node, rr_context, me), 6, false);
        }
    public async Task set_d1(List<double[]> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"d1");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<double[]>(rr_node, rr_context, "value",DataTypeUtil.VerifyArrayLength(value, 6, false)));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<List<double[]>> get_d2(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "d2");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackList<double[]>(rr_node, rr_context, me), 6, true);
        }
    public async Task set_d2(List<double[]> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"d2");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<double[]>(rr_node, rr_context, "value",DataTypeUtil.VerifyArrayLength(value, 6, true)));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<Dictionary<int,double[]>> get_d3(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "d3");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackMap<int,double[]>(rr_node, rr_context, me), 6, false);
        }
    public async Task set_d3(Dictionary<int,double[]> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"d3");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<int,double[]>(rr_node, rr_context, "value",DataTypeUtil.VerifyArrayLength(value, 6, false)));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<Dictionary<int,double[]>> get_d4(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "d4");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackMap<int,double[]>(rr_node, rr_context, me), 6, true);
        }
    public async Task set_d4(Dictionary<int,double[]> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"d4");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<int,double[]>(rr_node, rr_context, "value",DataTypeUtil.VerifyArrayLength(value, 6, true)));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<List<MultiDimArray>> get_d5(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "d5");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackList<MultiDimArray>(rr_node, rr_context, me),9,new uint[] {3, 3});
        }
    public async Task set_d5(List<MultiDimArray> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"d5");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<MultiDimArray>(rr_node, rr_context, "value",DataTypeUtil.VerifyArrayLength(value,9,new uint[] {3, 3})));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<Dictionary<int,MultiDimArray>> get_d6(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "d6");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackMap<int,MultiDimArray>(rr_node, rr_context, me),9,new uint[] {3, 3});
        }
    public async Task set_d6(Dictionary<int,MultiDimArray> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"d6");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<int,MultiDimArray>(rr_node, rr_context, "value",DataTypeUtil.VerifyArrayLength(value,9,new uint[] {3, 3})));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<vector3> get_testnamedarray1(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "testnamedarray1");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackNamedArrayFromArray<vector3>(rr_node, rr_context, me);
        }
    public async Task set_testnamedarray1(vector3 value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"testnamedarray1");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<vector3>(rr_node, rr_context, "value",ref value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<transform> get_testnamedarray2(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "testnamedarray2");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackNamedArrayFromArray<transform>(rr_node, rr_context, me);
        }
    public async Task set_testnamedarray2(transform value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"testnamedarray2");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<transform>(rr_node, rr_context, "value",ref value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<transform[]> get_testnamedarray3(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "testnamedarray3");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackNamedArray<transform>(rr_node, rr_context, me), 10, true);
        }
    public async Task set_testnamedarray3(transform[] value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"testnamedarray3");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArray<transform>(rr_node, rr_context, "value",DataTypeUtil.VerifyArrayLength(value, 10, true)));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<NamedMultiDimArray> get_testnamedarray4(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "testnamedarray4");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackNamedMultiDimArray<transform>(rr_node, rr_context, me);
        }
    public async Task set_testnamedarray4(NamedMultiDimArray value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"testnamedarray4");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedMultiDimArray<transform>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<NamedMultiDimArray> get_testnamedarray5(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "testnamedarray5");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackNamedMultiDimArray<transform>(rr_node, rr_context, me),6,new uint[] {3, 2});
        }
    public async Task set_testnamedarray5(NamedMultiDimArray value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"testnamedarray5");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedMultiDimArray<transform>(rr_node, rr_context, "value",DataTypeUtil.VerifyArrayLength(value,6,new uint[] {3, 2})));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<CDouble> get_c1(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "c1");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<CDouble>(me));
        }
    public async Task set_c1(CDouble value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"c1");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<CDouble>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<CDouble[]> get_c2(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "c2");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackArray<CDouble>(me);
        }
    public async Task set_c2(CDouble[] value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"c2");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<CDouble>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<MultiDimArray> get_c3(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "c3");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackMultiDimArray(rr_node, me);
        }
    public async Task set_c3(MultiDimArray value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"c3");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMultiDimArray(rr_node, "value",(MultiDimArray)value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<List<CDouble>> get_c4(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "c4");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackList<CDouble>(rr_node, rr_context, me);
        }
    public async Task set_c4(List<CDouble> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"c4");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<CDouble>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<List<CDouble[]>> get_c5(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "c5");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackList<CDouble[]>(rr_node, rr_context, me);
        }
    public async Task set_c5(List<CDouble[]> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"c5");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<CDouble[]>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<List<MultiDimArray>> get_c6(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "c6");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackList<MultiDimArray>(rr_node, rr_context, me);
        }
    public async Task set_c6(List<MultiDimArray> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"c6");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<MultiDimArray>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<CSingle> get_c7(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "c7");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<CSingle>(me));
        }
    public async Task set_c7(CSingle value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"c7");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<CSingle>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<CSingle[]> get_c8(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "c8");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackArray<CSingle>(me);
        }
    public async Task set_c8(CSingle[] value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"c8");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<CSingle>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<MultiDimArray> get_c9(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "c9");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackMultiDimArray(rr_node, me);
        }
    public async Task set_c9(MultiDimArray value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"c9");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMultiDimArray(rr_node, "value",(MultiDimArray)value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<List<CSingle>> get_c10(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "c10");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackList<CSingle>(rr_node, rr_context, me);
        }
    public async Task set_c10(List<CSingle> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"c10");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<CSingle>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<List<CSingle[]>> get_c11(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "c11");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackList<CSingle[]>(rr_node, rr_context, me);
        }
    public async Task set_c11(List<CSingle[]> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"c11");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<CSingle[]>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<List<MultiDimArray>> get_c12(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "c12");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackList<MultiDimArray>(rr_node, rr_context, me);
        }
    public async Task set_c12(List<MultiDimArray> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"c12");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<MultiDimArray>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<bool> get_b1(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "b1");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<bool>(me));
        }
    public async Task set_b1(bool value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"b1");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<bool[]> get_b2(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "b2");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackArray<bool>(me);
        }
    public async Task set_b2(bool[] value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"b2");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<bool>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<MultiDimArray> get_b3(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "b3");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackMultiDimArray(rr_node, me);
        }
    public async Task set_b3(MultiDimArray value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"b3");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMultiDimArray(rr_node, "value",(MultiDimArray)value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<List<bool>> get_b4(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "b4");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackList<bool>(rr_node, rr_context, me);
        }
    public async Task set_b4(List<bool> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"b4");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<bool>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<List<bool[]>> get_b5(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "b5");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackList<bool[]>(rr_node, rr_context, me);
        }
    public async Task set_b5(List<bool[]> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"b5");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<bool[]>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<List<MultiDimArray>> get_b6(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "b6");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackList<MultiDimArray>(rr_node, rr_context, me);
        }
    public async Task set_b6(List<MultiDimArray> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"b6");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<MultiDimArray>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task testpod1_func1(testpod1 s, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"testpod1_func1");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackPodToArray<testpod1>(rr_node, rr_context, "s",ref s));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task<testpod1> testpod1_func2(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"testpod1_func2");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return MessageElementUtil.UnpackPodFromArray<testpod1>(rr_node, rr_context, rr_me.FindElement("return"));
    }
    public async Task<Generator2<double>> gen_func1(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"gen_func1");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return new Generator2Client<double>("gen_func1",this,rr_me.FindElement("index").CastData<int[]>()[0]);
    }
    public async Task<Generator2<byte[]>> gen_func2(string name, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"gen_func2");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("name",name));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return new Generator2Client<byte[]>("gen_func2",this,rr_me.FindElement("index").CastData<int[]>()[0]);
    }
    public async Task<Generator3<byte[]>> gen_func3(string name, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"gen_func3");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("name",name));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return new Generator3Client<byte[]>("gen_func3",this,rr_me.FindElement("index").CastData<int[]>()[0]);
    }
    public async Task<Generator1<byte[],byte[]>> gen_func4(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"gen_func4");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return new Generator1Client<byte[],byte[]>("gen_func4",this,rr_me.FindElement("index").CastData<int[]>()[0]);
    }
    public async Task<Generator1<com.robotraconteur.testing.TestService1.teststruct2,com.robotraconteur.testing.TestService1.teststruct2>> gen_func5(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"gen_func5");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return new Generator1Client<com.robotraconteur.testing.TestService1.teststruct2,com.robotraconteur.testing.TestService1.teststruct2>("gen_func5",this,rr_me.FindElement("index").CastData<int[]>()[0]);
    }
    public async Task test_exception_params1(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"test_exception_params1");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task test_exception_params2(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"test_exception_params2");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public async Task<obj4> get_o4(CancellationToken cancel=default(CancellationToken)) {
    return (obj4)await FindObjRefTyped("o4","com.robotraconteur.testing.TestService3.obj4",cancel);
    }
    public async Task<obj5> get_nolock_test(CancellationToken cancel=default(CancellationToken)) {
    return (obj5)await FindObjRefTyped("nolock_test","com.robotraconteur.testing.TestService3.obj5",cancel);
    }
    public Pipe<int> unreliable1 {
    get { return rr_unreliable1;  }
    set { throw new InvalidOperationException();}
    }
    public Pipe<int[]> p1 {
    get { return rr_p1;  }
    set { throw new InvalidOperationException();}
    }
    public Pipe<int[]> p2 {
    get { return rr_p2;  }
    set { throw new InvalidOperationException();}
    }
    public Pipe<MultiDimArray> p3 {
    get { return rr_p3;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<int> peekwire {
    get { return rr_peekwire;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<int> pokewire {
    get { return rr_pokewire;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<int[]> w1 {
    get { return rr_w1;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<int[]> w2 {
    get { return rr_w2;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<MultiDimArray> w3 {
    get { return rr_w3;  }
    set { throw new InvalidOperationException();}
    }
    public ArrayMemory<double> readmem { 
    get { return rr_readmem; }
    }
    public PodArrayMemory<testpod2> pod_m1 { 
    get { return rr_pod_m1; }
    }
    public PodMultiDimArrayMemory<testpod2> pod_m2 {
    get { return rr_pod_m2; }
    }
    public NamedArrayMemory<transform> namedarray_m1 { 
    get { return rr_namedarray_m1; }
    }
    public NamedMultiDimArrayMemory<transform> namedarray_m2 {
    get { return rr_namedarray_m2; }
    }
    public ArrayMemory<CDouble> c_m1 { 
    get { return rr_c_m1; }
    }
    public MultiDimArrayMemory<CDouble> c_m2 {
    get { return rr_c_m2; }
    }
    public ArrayMemory<CDouble> c_m3 { 
    get { return rr_c_m3; }
    }
    public MultiDimArrayMemory<CDouble> c_m4 {
    get { return rr_c_m4; }
    }
    public ArrayMemory<bool> c_m5 { 
    get { return rr_c_m5; }
    }
    public MultiDimArrayMemory<bool> c_m6 {
    get { return rr_c_m6; }
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "unreliable1":
    this.rr_unreliable1.PipePacketReceived(m);
    break;
    case "p1":
    this.rr_p1.PipePacketReceived(m);
    break;
    case "p2":
    this.rr_p2.PipePacketReceived(m);
    break;
    case "p3":
    this.rr_p3.PipePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "peekwire":
    this.rr_peekwire.WirePacketReceived(m);
    break;
    case "pokewire":
    this.rr_pokewire.WirePacketReceived(m);
    break;
    case "w1":
    this.rr_w1.WirePacketReceived(m);
    break;
    case "w2":
    this.rr_w2.WirePacketReceived(m);
    break;
    case "w3":
    this.rr_w3.WirePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
}
public class obj1_stub : ServiceStub , obj1 {
    public obj1_stub(string path, ClientContext c) : base(path, c) {
    }
    public async Task<double[]> get_d1(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "d1");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackArray<double>(me);
        }
    public async Task set_d1(double[] value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"d1");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
}
public class obj2_stub : ServiceStub , obj2 {
    public obj2_stub(string path, ClientContext c) : base(path, c) {
    }
    public async Task<double[]> get_d1(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "d1");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackArray<double>(me);
        }
    public async Task set_d1(double[] value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"d1");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
}
public class obj3_stub : ServiceStub , obj3 {
    public obj3_stub(string path, ClientContext c) : base(path, c) {
    }
    public async Task<double[]> get_d1(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "d1");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackArray<double>(me);
        }
    public async Task set_d1(double[] value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"d1");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
}
public class obj4_stub : ServiceStub , obj4 {
    public obj4_stub(string path, ClientContext c) : base(path, c) {
    }
    public async Task<string> get_s_ind(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "s_ind");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_s_ind(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"s_ind");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<int> get_i_ind(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "i_ind");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<int>(me));
        }
    public async Task set_i_ind(int value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"i_ind");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<int>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<string> get_data(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "data");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_data(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"data");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public async Task<com.robotraconteur.testing.TestService1.sub3> get_o3_1(string ind, CancellationToken cancel=default(CancellationToken)) {
    return (com.robotraconteur.testing.TestService1.sub3)await FindObjRefTyped("o3_1",ind.ToString(),"com.robotraconteur.testing.TestService1.sub3",cancel);
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
}
public class obj5_stub : ServiceStub , obj5 {
    private Pipe<int> rr_q1;
    private Pipe<int> rr_q2;
    private Wire<int> rr_w1;
    private Wire<int> rr_w2;
    private ArrayMemory<int> rr_m1;
    private ArrayMemory<int> rr_m2;
    private ArrayMemory<int> rr_m3;
    public obj5_stub(string path, ClientContext c) : base(path, c) {
    rr_q1=new PipeClient<int>("q1", this);
    rr_q2=new PipeClient<int>("q2", this);
    rr_w1=new WireClient<int>("w1", this);
    rr_w2=new WireClient<int>("w2", this);
    rr_m1=new ArrayMemoryClient<int>("m1",this, MemberDefinition_Direction.both);
    rr_m2=new ArrayMemoryClient<int>("m2",this, MemberDefinition_Direction.both);
    rr_m3=new ArrayMemoryClient<int>("m3",this, MemberDefinition_Direction.both);
    }
    public async Task<double> get_p1(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "p1");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<double>(me));
        }
    public async Task set_p1(double value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"p1");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<double> get_p2(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "p2");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<double>(me));
        }
    public async Task set_p2(double value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"p2");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<double> get_p3(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "p3");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<double>(me));
        }
    public async Task set_p3(double value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"p3");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<int> f1(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"f1");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return (MessageElementUtil.UnpackScalar<int>(rr_me.FindElement("return")));
    }
    public async Task<int> f2(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"f2");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return (MessageElementUtil.UnpackScalar<int>(rr_me.FindElement("return")));
    }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public Pipe<int> q1 {
    get { return rr_q1;  }
    set { throw new InvalidOperationException();}
    }
    public Pipe<int> q2 {
    get { return rr_q2;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<int> w1 {
    get { return rr_w1;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<int> w2 {
    get { return rr_w2;  }
    set { throw new InvalidOperationException();}
    }
    public ArrayMemory<int> m1 { 
    get { return rr_m1; }
    }
    public ArrayMemory<int> m2 { 
    get { return rr_m2; }
    }
    public ArrayMemory<int> m3 { 
    get { return rr_m3; }
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "q1":
    this.rr_q1.PipePacketReceived(m);
    break;
    case "q2":
    this.rr_q2.PipePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "w1":
    this.rr_w1.WirePacketReceived(m);
    break;
    case "w2":
    this.rr_w2.WirePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
}
public class testroot3_skel : ServiceSkel {
    protected testroot3 obj;
    public testroot3_skel(string p,testroot3 o,ServerContext c) : base(p,o,c) { obj=(testroot3)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "readme":
    {
    int ret=await obj.get_readme();
    mr.AddElement(MessageElementUtil.PackScalar<int>("value",ret));
    break;
    }
    case "writeme":
    {
    int ret=await obj.get_writeme();
    mr.AddElement(MessageElementUtil.PackScalar<int>("value",ret));
    break;
    }
    case "unknown_modifier":
    {
    int ret=await obj.get_unknown_modifier();
    mr.AddElement(MessageElementUtil.PackScalar<int>("value",ret));
    break;
    }
    case "testenum1_prop":
    {
    testenum1 ret=await obj.get_testenum1_prop();
    mr.AddElement(MessageElementUtil.PackEnum<testenum1>("value",ret));
    break;
    }
    case "testpod1_prop":
    {
    testpod1 ret=await obj.get_testpod1_prop();
    mr.AddElement(MessageElementUtil.PackPodToArray<testpod1>(rr_node, rr_context, "value",ref ret));
    break;
    }
    case "teststruct3_prop":
    {
    teststruct3 ret=await obj.get_teststruct3_prop();
    mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "value",ret));
    break;
    }
    case "d1":
    {
    List<double[]> ret=await obj.get_d1();
    mr.AddElement(MessageElementUtil.PackListType<double[]>(rr_node, rr_context, "value",DataTypeUtil.VerifyArrayLength(ret, 6, false)));
    break;
    }
    case "d2":
    {
    List<double[]> ret=await obj.get_d2();
    mr.AddElement(MessageElementUtil.PackListType<double[]>(rr_node, rr_context, "value",DataTypeUtil.VerifyArrayLength(ret, 6, true)));
    break;
    }
    case "d3":
    {
    Dictionary<int,double[]> ret=await obj.get_d3();
    mr.AddElement(MessageElementUtil.PackMapType<int,double[]>(rr_node, rr_context, "value",DataTypeUtil.VerifyArrayLength(ret, 6, false)));
    break;
    }
    case "d4":
    {
    Dictionary<int,double[]> ret=await obj.get_d4();
    mr.AddElement(MessageElementUtil.PackMapType<int,double[]>(rr_node, rr_context, "value",DataTypeUtil.VerifyArrayLength(ret, 6, true)));
    break;
    }
    case "d5":
    {
    List<MultiDimArray> ret=await obj.get_d5();
    mr.AddElement(MessageElementUtil.PackListType<MultiDimArray>(rr_node, rr_context, "value",DataTypeUtil.VerifyArrayLength(ret,9,new uint[] {3, 3})));
    break;
    }
    case "d6":
    {
    Dictionary<int,MultiDimArray> ret=await obj.get_d6();
    mr.AddElement(MessageElementUtil.PackMapType<int,MultiDimArray>(rr_node, rr_context, "value",DataTypeUtil.VerifyArrayLength(ret,9,new uint[] {3, 3})));
    break;
    }
    case "testnamedarray1":
    {
    vector3 ret=await obj.get_testnamedarray1();
    mr.AddElement(MessageElementUtil.PackNamedArrayToArray<vector3>(rr_node, rr_context, "value",ref ret));
    break;
    }
    case "testnamedarray2":
    {
    transform ret=await obj.get_testnamedarray2();
    mr.AddElement(MessageElementUtil.PackNamedArrayToArray<transform>(rr_node, rr_context, "value",ref ret));
    break;
    }
    case "testnamedarray3":
    {
    transform[] ret=await obj.get_testnamedarray3();
    mr.AddElement(MessageElementUtil.PackNamedArray<transform>(rr_node, rr_context, "value",DataTypeUtil.VerifyArrayLength(ret, 10, true)));
    break;
    }
    case "testnamedarray4":
    {
    NamedMultiDimArray ret=await obj.get_testnamedarray4();
    mr.AddElement(MessageElementUtil.PackNamedMultiDimArray<transform>(rr_node, rr_context, "value",ret));
    break;
    }
    case "testnamedarray5":
    {
    NamedMultiDimArray ret=await obj.get_testnamedarray5();
    mr.AddElement(MessageElementUtil.PackNamedMultiDimArray<transform>(rr_node, rr_context, "value",DataTypeUtil.VerifyArrayLength(ret,6,new uint[] {3, 2})));
    break;
    }
    case "c1":
    {
    CDouble ret=await obj.get_c1();
    mr.AddElement(MessageElementUtil.PackScalar<CDouble>("value",ret));
    break;
    }
    case "c2":
    {
    CDouble[] ret=await obj.get_c2();
    mr.AddElement(MessageElementUtil.PackArray<CDouble>("value",ret));
    break;
    }
    case "c3":
    {
    MultiDimArray ret=await obj.get_c3();
    mr.AddElement(MessageElementUtil.PackMultiDimArray(rr_node, "value",(MultiDimArray)ret));
    break;
    }
    case "c4":
    {
    List<CDouble> ret=await obj.get_c4();
    mr.AddElement(MessageElementUtil.PackListType<CDouble>(rr_node, rr_context, "value",ret));
    break;
    }
    case "c5":
    {
    List<CDouble[]> ret=await obj.get_c5();
    mr.AddElement(MessageElementUtil.PackListType<CDouble[]>(rr_node, rr_context, "value",ret));
    break;
    }
    case "c6":
    {
    List<MultiDimArray> ret=await obj.get_c6();
    mr.AddElement(MessageElementUtil.PackListType<MultiDimArray>(rr_node, rr_context, "value",ret));
    break;
    }
    case "c7":
    {
    CSingle ret=await obj.get_c7();
    mr.AddElement(MessageElementUtil.PackScalar<CSingle>("value",ret));
    break;
    }
    case "c8":
    {
    CSingle[] ret=await obj.get_c8();
    mr.AddElement(MessageElementUtil.PackArray<CSingle>("value",ret));
    break;
    }
    case "c9":
    {
    MultiDimArray ret=await obj.get_c9();
    mr.AddElement(MessageElementUtil.PackMultiDimArray(rr_node, "value",(MultiDimArray)ret));
    break;
    }
    case "c10":
    {
    List<CSingle> ret=await obj.get_c10();
    mr.AddElement(MessageElementUtil.PackListType<CSingle>(rr_node, rr_context, "value",ret));
    break;
    }
    case "c11":
    {
    List<CSingle[]> ret=await obj.get_c11();
    mr.AddElement(MessageElementUtil.PackListType<CSingle[]>(rr_node, rr_context, "value",ret));
    break;
    }
    case "c12":
    {
    List<MultiDimArray> ret=await obj.get_c12();
    mr.AddElement(MessageElementUtil.PackListType<MultiDimArray>(rr_node, rr_context, "value",ret));
    break;
    }
    case "b1":
    {
    bool ret=await obj.get_b1();
    mr.AddElement(MessageElementUtil.PackScalar<bool>("value",ret));
    break;
    }
    case "b2":
    {
    bool[] ret=await obj.get_b2();
    mr.AddElement(MessageElementUtil.PackArray<bool>("value",ret));
    break;
    }
    case "b3":
    {
    MultiDimArray ret=await obj.get_b3();
    mr.AddElement(MessageElementUtil.PackMultiDimArray(rr_node, "value",(MultiDimArray)ret));
    break;
    }
    case "b4":
    {
    List<bool> ret=await obj.get_b4();
    mr.AddElement(MessageElementUtil.PackListType<bool>(rr_node, rr_context, "value",ret));
    break;
    }
    case "b5":
    {
    List<bool[]> ret=await obj.get_b5();
    mr.AddElement(MessageElementUtil.PackListType<bool[]>(rr_node, rr_context, "value",ret));
    break;
    }
    case "b6":
    {
    List<MultiDimArray> ret=await obj.get_b6();
    mr.AddElement(MessageElementUtil.PackListType<MultiDimArray>(rr_node, rr_context, "value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "readme":
    {
    await obj.set_readme((MessageElementUtil.UnpackScalar<int>(me)));
    break;
    }
    case "writeme":
    {
    await obj.set_writeme((MessageElementUtil.UnpackScalar<int>(me)));
    break;
    }
    case "unknown_modifier":
    {
    await obj.set_unknown_modifier((MessageElementUtil.UnpackScalar<int>(me)));
    break;
    }
    case "testenum1_prop":
    {
    await obj.set_testenum1_prop(MessageElementUtil.UnpackEnum<testenum1>(me));
    break;
    }
    case "testpod1_prop":
    {
    await obj.set_testpod1_prop(MessageElementUtil.UnpackPodFromArray<testpod1>(rr_node, rr_context, me));
    break;
    }
    case "teststruct3_prop":
    {
    await obj.set_teststruct3_prop(MessageElementUtil.UnpackStructure<teststruct3>(rr_node, rr_context, me));
    break;
    }
    case "d1":
    {
    await obj.set_d1(DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackList<double[]>(rr_node, rr_context, me), 6, false));
    break;
    }
    case "d2":
    {
    await obj.set_d2(DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackList<double[]>(rr_node, rr_context, me), 6, true));
    break;
    }
    case "d3":
    {
    await obj.set_d3(DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackMap<int,double[]>(rr_node, rr_context, me), 6, false));
    break;
    }
    case "d4":
    {
    await obj.set_d4(DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackMap<int,double[]>(rr_node, rr_context, me), 6, true));
    break;
    }
    case "d5":
    {
    await obj.set_d5(DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackList<MultiDimArray>(rr_node, rr_context, me),9,new uint[] {3, 3}));
    break;
    }
    case "d6":
    {
    await obj.set_d6(DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackMap<int,MultiDimArray>(rr_node, rr_context, me),9,new uint[] {3, 3}));
    break;
    }
    case "testnamedarray1":
    {
    await obj.set_testnamedarray1(MessageElementUtil.UnpackNamedArrayFromArray<vector3>(rr_node, rr_context, me));
    break;
    }
    case "testnamedarray2":
    {
    await obj.set_testnamedarray2(MessageElementUtil.UnpackNamedArrayFromArray<transform>(rr_node, rr_context, me));
    break;
    }
    case "testnamedarray3":
    {
    await obj.set_testnamedarray3(DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackNamedArray<transform>(rr_node, rr_context, me), 10, true));
    break;
    }
    case "testnamedarray4":
    {
    await obj.set_testnamedarray4(MessageElementUtil.UnpackNamedMultiDimArray<transform>(rr_node, rr_context, me));
    break;
    }
    case "testnamedarray5":
    {
    await obj.set_testnamedarray5(DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackNamedMultiDimArray<transform>(rr_node, rr_context, me),6,new uint[] {3, 2}));
    break;
    }
    case "c1":
    {
    await obj.set_c1((MessageElementUtil.UnpackScalar<CDouble>(me)));
    break;
    }
    case "c2":
    {
    await obj.set_c2(MessageElementUtil.UnpackArray<CDouble>(me));
    break;
    }
    case "c3":
    {
    await obj.set_c3(MessageElementUtil.UnpackMultiDimArray(rr_node, me));
    break;
    }
    case "c4":
    {
    await obj.set_c4(MessageElementUtil.UnpackList<CDouble>(rr_node, rr_context, me));
    break;
    }
    case "c5":
    {
    await obj.set_c5(MessageElementUtil.UnpackList<CDouble[]>(rr_node, rr_context, me));
    break;
    }
    case "c6":
    {
    await obj.set_c6(MessageElementUtil.UnpackList<MultiDimArray>(rr_node, rr_context, me));
    break;
    }
    case "c7":
    {
    await obj.set_c7((MessageElementUtil.UnpackScalar<CSingle>(me)));
    break;
    }
    case "c8":
    {
    await obj.set_c8(MessageElementUtil.UnpackArray<CSingle>(me));
    break;
    }
    case "c9":
    {
    await obj.set_c9(MessageElementUtil.UnpackMultiDimArray(rr_node, me));
    break;
    }
    case "c10":
    {
    await obj.set_c10(MessageElementUtil.UnpackList<CSingle>(rr_node, rr_context, me));
    break;
    }
    case "c11":
    {
    await obj.set_c11(MessageElementUtil.UnpackList<CSingle[]>(rr_node, rr_context, me));
    break;
    }
    case "c12":
    {
    await obj.set_c12(MessageElementUtil.UnpackList<MultiDimArray>(rr_node, rr_context, me));
    break;
    }
    case "b1":
    {
    await obj.set_b1((MessageElementUtil.UnpackScalar<bool>(me)));
    break;
    }
    case "b2":
    {
    await obj.set_b2(MessageElementUtil.UnpackArray<bool>(me));
    break;
    }
    case "b3":
    {
    await obj.set_b3(MessageElementUtil.UnpackMultiDimArray(rr_node, me));
    break;
    }
    case "b4":
    {
    await obj.set_b4(MessageElementUtil.UnpackList<bool>(rr_node, rr_context, me));
    break;
    }
    case "b5":
    {
    await obj.set_b5(MessageElementUtil.UnpackList<bool[]>(rr_node, rr_context, me));
    break;
    }
    case "b6":
    {
    await obj.set_b6(MessageElementUtil.UnpackList<MultiDimArray>(rr_node, rr_context, me));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    case "testpod1_func1":
    {
    testpod1 s=MessageElementUtil.UnpackPodFromArray<testpod1>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"s"));
    await this.obj.testpod1_func1(s, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "testpod1_func2":
    {
    testpod1 rr_ret=await this.obj.testpod1_func2(default(CancellationToken));
    rr_mr.AddElement(MessageElementUtil.PackPodToArray<testpod1>(rr_node, rr_context, "return",ref rr_ret));
    break;
    }
    case "gen_func1":
    {
    var rr_ep = ServerEndpoint.CurrentEndpoint;
    Generator2<double> rr_ret=await this.obj.gen_func1();
    lock(generators) {
    int rr_index = GetNewGeneratorIndex();
    generators.Add(rr_index, new Generator2Server<double>(rr_ret,"gen_func1",rr_index, this, rr_ep));
    rr_mr.AddElement("index",rr_index);
    }
    break;
    }
    case "gen_func2":
    {
    string name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"name"));
    var rr_ep = ServerEndpoint.CurrentEndpoint;
    Generator2<byte[]> rr_ret=await this.obj.gen_func2(name);
    lock(generators) {
    int rr_index = GetNewGeneratorIndex();
    generators.Add(rr_index, new Generator2Server<byte[]>(rr_ret,"gen_func2",rr_index, this, rr_ep));
    rr_mr.AddElement("index",rr_index);
    }
    break;
    }
    case "gen_func3":
    {
    string name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"name"));
    var rr_ep = ServerEndpoint.CurrentEndpoint;
    Generator3<byte[]> rr_ret=await this.obj.gen_func3(name);
    lock(generators) {
    int rr_index = GetNewGeneratorIndex();
    generators.Add(rr_index, new Generator3Server<byte[]>(rr_ret,"gen_func3",rr_index, this, rr_ep));
    rr_mr.AddElement("index",rr_index);
    }
    break;
    }
    case "gen_func4":
    {
    var rr_ep = ServerEndpoint.CurrentEndpoint;
    Generator1<byte[],byte[]> rr_ret=await this.obj.gen_func4();
    lock(generators) {
    int rr_index = GetNewGeneratorIndex();
    generators.Add(rr_index, new Generator1Server<byte[],byte[]>(rr_ret,"gen_func4",rr_index, this, rr_ep));
    rr_mr.AddElement("index",rr_index);
    }
    break;
    }
    case "gen_func5":
    {
    var rr_ep = ServerEndpoint.CurrentEndpoint;
    Generator1<com.robotraconteur.testing.TestService1.teststruct2,com.robotraconteur.testing.TestService1.teststruct2> rr_ret=await this.obj.gen_func5();
    lock(generators) {
    int rr_index = GetNewGeneratorIndex();
    generators.Add(rr_index, new Generator1Server<com.robotraconteur.testing.TestService1.teststruct2,com.robotraconteur.testing.TestService1.teststruct2>(rr_ret,"gen_func5",rr_index, this, rr_ep));
    rr_mr.AddElement("index",rr_index);
    }
    break;
    }
    case "test_exception_params1":
    {
    await this.obj.test_exception_params1(default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "test_exception_params2":
    {
    await this.obj.test_exception_params2(default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    case "o4": {
    return await obj.get_o4();
    }
    case "nolock_test": {
    return await obj.get_nolock_test();
    }
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(testroot3)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(testroot3)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private PipeServer<int> rr_unreliable1;
    private PipeServer<int[]> rr_p1;
    private PipeServer<int[]> rr_p2;
    private PipeServer<MultiDimArray> rr_p3;
    private WireServer<int> rr_peekwire;
    private WireServer<int> rr_pokewire;
    private WireServer<int[]> rr_w1;
    private WireServer<int[]> rr_w2;
    private WireServer<MultiDimArray> rr_w3;
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    testroot3 castobj=(testroot3)o;
    this.rr_unreliable1=new PipeServer<int>("unreliable1",this);
    this.rr_p1=new PipeServer<int[]>("p1",this);
    this.rr_p2=new PipeServer<int[]>("p2",this);
    this.rr_p3=new PipeServer<MultiDimArray>("p3",this);
    this.rr_peekwire=new WireServer<int>("peekwire",this);
    this.rr_pokewire=new WireServer<int>("pokewire",this);
    this.rr_w1=new WireServer<int[]>("w1",this);
    this.rr_w2=new WireServer<int[]>("w2",this);
    this.rr_w3=new WireServer<MultiDimArray>("w3",this);
    castobj.unreliable1=this.rr_unreliable1;
    castobj.p1=this.rr_p1;
    castobj.p2=this.rr_p2;
    castobj.p3=this.rr_p3;
    castobj.peekwire=this.rr_peekwire;
    castobj.pokewire=this.rr_pokewire;
    castobj.w1=this.rr_w1;
    castobj.w2=this.rr_w2;
    castobj.w3=this.rr_w3;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(testroot3)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "unreliable1":
    return await this.rr_unreliable1.PipeCommand(m,e);
    case "p1":
    return await this.rr_p1.PipeCommand(m,e);
    case "p2":
    return await this.rr_p2.PipeCommand(m,e);
    case "p3":
    return await this.rr_p3.PipeCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "peekwire":
    return await this.rr_peekwire.WireCommand(m,e);
    case "pokewire":
    return await this.rr_pokewire.WireCommand(m,e);
    case "w1":
    return await this.rr_w1.WireCommand(m,e);
    case "w2":
    return await this.rr_w2.WireCommand(m,e);
    case "w3":
    return await this.rr_w3.WireCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "unreliable1":
    this.rr_unreliable1.PipePacketReceived(m,e);
    break;
    case "p1":
    this.rr_p1.PipePacketReceived(m,e);
    break;
    case "p2":
    this.rr_p2.PipePacketReceived(m,e);
    break;
    case "p3":
    this.rr_p3.PipePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "peekwire":
    this.rr_peekwire.WirePacketReceived(m,e);
    break;
    case "pokewire":
    this.rr_pokewire.WirePacketReceived(m,e);
    break;
    case "w1":
    this.rr_w1.WirePacketReceived(m,e);
    break;
    case "w2":
    this.rr_w2.WirePacketReceived(m,e);
    break;
    case "w3":
    this.rr_w3.WirePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "readmem":
     return await (new ArrayMemoryServiceSkel<double>("readmem",this,MemberDefinition_Direction.readonly_)).CallMemoryFunction(m,e,obj.readmem);
    break;
    case "pod_m1":
     return await (new PodArrayMemoryServiceSkel<testpod2>("pod_m1",this,111,MemberDefinition_Direction.both)).CallMemoryFunction(m,e,obj.pod_m1);
    break;
    case "pod_m2":
     return await (new PodMultiDimArrayMemoryServiceSkel<testpod2>("pod_m2",this,111,MemberDefinition_Direction.both)).CallMemoryFunction(m,e,obj.pod_m2);
    break;
    case "namedarray_m1":
     return await (new NamedArrayMemoryServiceSkel<transform>("namedarray_m1",this,7,MemberDefinition_Direction.both)).CallMemoryFunction(m,e,obj.namedarray_m1);
    break;
    case "namedarray_m2":
     return await (new NamedMultiDimArrayMemoryServiceSkel<transform>("namedarray_m2",this,7,MemberDefinition_Direction.both)).CallMemoryFunction(m,e,obj.namedarray_m2);
    break;
    case "c_m1":
     return await (new ArrayMemoryServiceSkel<CDouble>("c_m1",this,MemberDefinition_Direction.both)).CallMemoryFunction(m,e,obj.c_m1);
    break;
    case "c_m2":
     return await (new MultiDimArrayMemoryServiceSkel<CDouble>("c_m2",this,MemberDefinition_Direction.both)).CallMemoryFunction(m,e,obj.c_m2);
    break;
    case "c_m3":
     return await (new ArrayMemoryServiceSkel<CDouble>("c_m3",this,MemberDefinition_Direction.both)).CallMemoryFunction(m,e,obj.c_m3);
    break;
    case "c_m4":
     return await (new MultiDimArrayMemoryServiceSkel<CDouble>("c_m4",this,MemberDefinition_Direction.both)).CallMemoryFunction(m,e,obj.c_m4);
    break;
    case "c_m5":
     return await (new ArrayMemoryServiceSkel<bool>("c_m5",this,MemberDefinition_Direction.both)).CallMemoryFunction(m,e,obj.c_m5);
    break;
    case "c_m6":
     return await (new MultiDimArrayMemoryServiceSkel<bool>("c_m6",this,MemberDefinition_Direction.both)).CallMemoryFunction(m,e,obj.c_m6);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    return false;
    }
}
public class obj1_skel : ServiceSkel {
    protected obj1 obj;
    public obj1_skel(string p,obj1 o,ServerContext c) : base(p,o,c) { obj=(obj1)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "d1":
    {
    double[] ret=await obj.get_d1();
    mr.AddElement(MessageElementUtil.PackArray<double>("value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "d1":
    {
    await obj.set_d1(MessageElementUtil.UnpackArray<double>(me));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(obj1)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(obj1)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    obj1 castobj=(obj1)o;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(obj1)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    return false;
    }
}
public class obj2_skel : ServiceSkel {
    protected obj2 obj;
    public obj2_skel(string p,obj2 o,ServerContext c) : base(p,o,c) { obj=(obj2)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "d1":
    {
    double[] ret=await obj.get_d1();
    mr.AddElement(MessageElementUtil.PackArray<double>("value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "d1":
    {
    await obj.set_d1(MessageElementUtil.UnpackArray<double>(me));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(obj2)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(obj2)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    obj2 castobj=(obj2)o;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(obj2)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    return false;
    }
}
public class obj3_skel : ServiceSkel {
    protected obj3 obj;
    public obj3_skel(string p,obj3 o,ServerContext c) : base(p,o,c) { obj=(obj3)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "d1":
    {
    double[] ret=await obj.get_d1();
    mr.AddElement(MessageElementUtil.PackArray<double>("value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "d1":
    {
    await obj.set_d1(MessageElementUtil.UnpackArray<double>(me));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(obj3)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(obj3)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    obj3 castobj=(obj3)o;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(obj3)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    return false;
    }
}
public class obj4_skel : ServiceSkel {
    protected obj4 obj;
    public obj4_skel(string p,obj4 o,ServerContext c) : base(p,o,c) { obj=(obj4)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "s_ind":
    {
    string ret=await obj.get_s_ind();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "i_ind":
    {
    int ret=await obj.get_i_ind();
    mr.AddElement(MessageElementUtil.PackScalar<int>("value",ret));
    break;
    }
    case "data":
    {
    string ret=await obj.get_data();
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "s_ind":
    {
    await obj.set_s_ind(MessageElementUtil.UnpackString(me));
    break;
    }
    case "i_ind":
    {
    await obj.set_i_ind((MessageElementUtil.UnpackScalar<int>(me)));
    break;
    }
    case "data":
    {
    await obj.set_data(MessageElementUtil.UnpackString(me));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    case "o3_1": {
    return await obj.get_o3_1(ind);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(obj4)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(obj4)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    obj4 castobj=(obj4)o;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(obj4)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    return false;
    }
}
public class obj5_skel : ServiceSkel {
    protected obj5 obj;
    public obj5_skel(string p,obj5 o,ServerContext c) : base(p,o,c) { obj=(obj5)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "p1":
    {
    double ret=await obj.get_p1();
    mr.AddElement(MessageElementUtil.PackScalar<double>("value",ret));
    break;
    }
    case "p2":
    {
    double ret=await obj.get_p2();
    mr.AddElement(MessageElementUtil.PackScalar<double>("value",ret));
    break;
    }
    case "p3":
    {
    double ret=await obj.get_p3();
    mr.AddElement(MessageElementUtil.PackScalar<double>("value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "p1":
    {
    await obj.set_p1((MessageElementUtil.UnpackScalar<double>(me)));
    break;
    }
    case "p2":
    {
    await obj.set_p2((MessageElementUtil.UnpackScalar<double>(me)));
    break;
    }
    case "p3":
    {
    await obj.set_p3((MessageElementUtil.UnpackScalar<double>(me)));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    case "f1":
    {
    int rr_ret=await this.obj.f1(default(CancellationToken));
    rr_mr.AddElement(MessageElementUtil.PackScalar<int>("return",rr_ret));
    break;
    }
    case "f2":
    {
    int rr_ret=await this.obj.f2(default(CancellationToken));
    rr_mr.AddElement(MessageElementUtil.PackScalar<int>("return",rr_ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(obj5)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(obj5)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private PipeServer<int> rr_q1;
    private PipeServer<int> rr_q2;
    private WireServer<int> rr_w1;
    private WireServer<int> rr_w2;
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    obj5 castobj=(obj5)o;
    this.rr_q1=new PipeServer<int>("q1",this);
    this.rr_q2=new PipeServer<int>("q2",this);
    this.rr_w1=new WireServer<int>("w1",this);
    this.rr_w2=new WireServer<int>("w2",this);
    castobj.q1=this.rr_q1;
    castobj.q2=this.rr_q2;
    castobj.w1=this.rr_w1;
    castobj.w2=this.rr_w2;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(obj5)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "q1":
    return await this.rr_q1.PipeCommand(m,e);
    case "q2":
    return await this.rr_q2.PipeCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "w1":
    return await this.rr_w1.WireCommand(m,e);
    case "w2":
    return await this.rr_w2.WireCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "q1":
    this.rr_q1.PipePacketReceived(m,e);
    break;
    case "q2":
    this.rr_q2.PipePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "w1":
    this.rr_w1.WirePacketReceived(m,e);
    break;
    case "w2":
    this.rr_w2.WirePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "m1":
     return await (new ArrayMemoryServiceSkel<int>("m1",this,MemberDefinition_Direction.both)).CallMemoryFunction(m,e,obj.m1);
    break;
    case "m2":
     return await (new ArrayMemoryServiceSkel<int>("m2",this,MemberDefinition_Direction.both)).CallMemoryFunction(m,e,obj.m2);
    break;
    case "m3":
     return await (new ArrayMemoryServiceSkel<int>("m3",this,MemberDefinition_Direction.both)).CallMemoryFunction(m,e,obj.m3);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    if (m.MemberName == "p2") return true;
    if (m.MemberName == "p3" && m.EntryType == MessageEntryType.PropertyGetReq) return true;
    if (m.MemberName == "f2") return true;
    if (m.MemberName == "q2") return true;
    if (m.MemberName == "w2") return true;
    if (m.MemberName == "m2") return true;
    if (m.MemberName == "m3" && (m.EntryType == MessageEntryType.MemoryRead || m.EntryType == MessageEntryType.MemoryGetParam)) return true;
    return false;
    }
}
public class testroot3_default_impl : testroot3{
    protected PipeBroadcaster<int> rrvar_unreliable1;
    protected WireBroadcaster<int> rrvar_peekwire;
    protected WireUnicastReceiver<int> rrvar_pokewire;
    public virtual Task<int> get_readme(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_readme(int value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<int> get_writeme(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_writeme(int value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<int> get_unknown_modifier(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_unknown_modifier(int value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<testenum1> get_testenum1_prop(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_testenum1_prop(testenum1 value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<testpod1> get_testpod1_prop(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_testpod1_prop(testpod1 value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<teststruct3> get_teststruct3_prop(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_teststruct3_prop(teststruct3 value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<List<double[]>> get_d1(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_d1(List<double[]> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<List<double[]>> get_d2(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_d2(List<double[]> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Dictionary<int,double[]>> get_d3(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_d3(Dictionary<int,double[]> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Dictionary<int,double[]>> get_d4(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_d4(Dictionary<int,double[]> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<List<MultiDimArray>> get_d5(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_d5(List<MultiDimArray> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Dictionary<int,MultiDimArray>> get_d6(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_d6(Dictionary<int,MultiDimArray> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<vector3> get_testnamedarray1(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_testnamedarray1(vector3 value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<transform> get_testnamedarray2(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_testnamedarray2(transform value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<transform[]> get_testnamedarray3(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_testnamedarray3(transform[] value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<NamedMultiDimArray> get_testnamedarray4(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_testnamedarray4(NamedMultiDimArray value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<NamedMultiDimArray> get_testnamedarray5(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_testnamedarray5(NamedMultiDimArray value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<CDouble> get_c1(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_c1(CDouble value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<CDouble[]> get_c2(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_c2(CDouble[] value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<MultiDimArray> get_c3(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_c3(MultiDimArray value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<List<CDouble>> get_c4(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_c4(List<CDouble> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<List<CDouble[]>> get_c5(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_c5(List<CDouble[]> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<List<MultiDimArray>> get_c6(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_c6(List<MultiDimArray> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<CSingle> get_c7(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_c7(CSingle value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<CSingle[]> get_c8(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_c8(CSingle[] value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<MultiDimArray> get_c9(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_c9(MultiDimArray value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<List<CSingle>> get_c10(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_c10(List<CSingle> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<List<CSingle[]>> get_c11(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_c11(List<CSingle[]> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<List<MultiDimArray>> get_c12(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_c12(List<MultiDimArray> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<bool> get_b1(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_b1(bool value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<bool[]> get_b2(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_b2(bool[] value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<MultiDimArray> get_b3(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_b3(MultiDimArray value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<List<bool>> get_b4(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_b4(List<bool> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<List<bool[]>> get_b5(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_b5(List<bool[]> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<List<MultiDimArray>> get_b6(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_b6(List<MultiDimArray> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task testpod1_func1(testpod1 s,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<testpod1> testpod1_func2(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Generator2<double>> gen_func1(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Generator2<byte[]>> gen_func2(string name,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Generator3<byte[]>> gen_func3(string name,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Generator1<byte[],byte[]>> gen_func4(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Generator1<com.robotraconteur.testing.TestService1.teststruct2,com.robotraconteur.testing.TestService1.teststruct2>> gen_func5(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task test_exception_params1(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task test_exception_params2(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<obj4> get_o4(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<obj5> get_nolock_test(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Pipe<int> unreliable1 {
    get { return rrvar_unreliable1.Pipe;  }
    set {
    if (rrvar_unreliable1!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_unreliable1= new PipeBroadcaster<int>(value);
    }
    }
    public virtual Pipe<int[]> p1 {
    get { throw new NotImplementedException(); }
    set { throw new InvalidOperationException();}
    }
    public virtual Pipe<int[]> p2 {
    get { throw new NotImplementedException(); }
    set { throw new InvalidOperationException();}
    }
    public virtual Pipe<MultiDimArray> p3 {
    get { throw new NotImplementedException(); }
    set { throw new InvalidOperationException();}
    }
    public virtual Wire<int> peekwire {
    get { return rrvar_peekwire.Wire;  }
    set {
    if (rrvar_peekwire!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_peekwire= new WireBroadcaster<int>(value);
    }
    }
    public virtual Wire<int> pokewire {
    get { return rrvar_pokewire.Wire;  }
    set {
    if (rrvar_pokewire!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_pokewire= new WireUnicastReceiver<int>(value);
    }
    }
    public virtual Wire<int[]> w1 {
    get { throw new NotImplementedException(); }
    set { throw new NotImplementedException();}
    }
    public virtual Wire<int[]> w2 {
    get { throw new NotImplementedException(); }
    set { throw new NotImplementedException();}
    }
    public virtual Wire<MultiDimArray> w3 {
    get { throw new NotImplementedException(); }
    set { throw new NotImplementedException();}
    }
    public virtual ArrayMemory<double> readmem { 
    get { throw new NotImplementedException(); }
    }
    public virtual PodArrayMemory<testpod2> pod_m1 { 
    get { throw new NotImplementedException(); }
    }
    public virtual PodMultiDimArrayMemory<testpod2> pod_m2 {
    get { throw new NotImplementedException(); }
    }
    public virtual NamedArrayMemory<transform> namedarray_m1 { 
    get { throw new NotImplementedException(); }
    }
    public virtual NamedMultiDimArrayMemory<transform> namedarray_m2 {
    get { throw new NotImplementedException(); }
    }
    public virtual ArrayMemory<CDouble> c_m1 { 
    get { throw new NotImplementedException(); }
    }
    public virtual MultiDimArrayMemory<CDouble> c_m2 {
    get { throw new NotImplementedException(); }
    }
    public virtual ArrayMemory<CDouble> c_m3 { 
    get { throw new NotImplementedException(); }
    }
    public virtual MultiDimArrayMemory<CDouble> c_m4 {
    get { throw new NotImplementedException(); }
    }
    public virtual ArrayMemory<bool> c_m5 { 
    get { throw new NotImplementedException(); }
    }
    public virtual MultiDimArrayMemory<bool> c_m6 {
    get { throw new NotImplementedException(); }
    }
}
public class obj1_default_impl : obj1{
    public virtual Task<double[]> get_d1(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_d1(double[] value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
}
public class obj2_default_impl : obj2{
    public virtual Task<double[]> get_d1(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_d1(double[] value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
}
public class obj3_default_impl : obj3{
    public virtual Task<double[]> get_d1(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_d1(double[] value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
}
public class obj4_default_impl : obj4{
    public virtual Task<string> get_s_ind(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_s_ind(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<int> get_i_ind(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_i_ind(int value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<string> get_data(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_data(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.testing.TestService1.sub3> get_o3_1(string ind, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
}
public class obj5_default_impl : obj5{
    protected PipeBroadcaster<int> rrvar_q1;
    protected PipeBroadcaster<int> rrvar_q2;
    protected WireBroadcaster<int> rrvar_w1;
    protected WireBroadcaster<int> rrvar_w2;
    public virtual Task<double> get_p1(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_p1(double value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<double> get_p2(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_p2(double value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<double> get_p3(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_p3(double value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<int> f1(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<int> f2(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Pipe<int> q1 {
    get { return rrvar_q1.Pipe;  }
    set {
    if (rrvar_q1!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_q1= new PipeBroadcaster<int>(value);
    }
    }
    public virtual Pipe<int> q2 {
    get { return rrvar_q2.Pipe;  }
    set {
    if (rrvar_q2!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_q2= new PipeBroadcaster<int>(value);
    }
    }
    public virtual Wire<int> w1 {
    get { return rrvar_w1.Wire;  }
    set {
    if (rrvar_w1!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_w1= new WireBroadcaster<int>(value);
    }
    }
    public virtual Wire<int> w2 {
    get { return rrvar_w2.Wire;  }
    set {
    if (rrvar_w2!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_w2= new WireBroadcaster<int>(value);
    }
    }
    public virtual ArrayMemory<int> m1 { 
    get { throw new NotImplementedException(); }
    }
    public virtual ArrayMemory<int> m2 { 
    get { throw new NotImplementedException(); }
    }
    public virtual ArrayMemory<int> m3 { 
    get { throw new NotImplementedException(); }
    }
}
public static class RRExtensions
{
    public static double[] GetNumericArray(this vector3[] s)
    {
    var a=new ArraySegment<double>(new double[3 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this vector3[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 3*i,3);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this vector3[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 3*i,3);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this quaternion[] s)
    {
    var a=new ArraySegment<double>(new double[4 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this quaternion[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 4*i,4);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this quaternion[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 4*i,4);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this transform[] s)
    {
    var a=new ArraySegment<double>(new double[7 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this transform[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 7 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 7*i,7);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this transform[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 7 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 7*i,7);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static byte[] GetNumericArray(this pixel[] s)
    {
    var a=new ArraySegment<byte>(new byte[3 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this pixel[] s, ref ArraySegment<byte> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<byte>(a.Array, a.Offset + 3*i,3);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this pixel[] s, ref ArraySegment<byte> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<byte>(a.Array, a.Offset + 3*i,3);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static byte[] GetNumericArray(this pixel2[] s)
    {
    var a=new ArraySegment<byte>(new byte[31 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this pixel2[] s, ref ArraySegment<byte> a)
    {
    if(a.Count < 31 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<byte>(a.Array, a.Offset + 31*i,31);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this pixel2[] s, ref ArraySegment<byte> a)
    {
    if(a.Count < 31 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<byte>(a.Array, a.Offset + 31*i,31);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
}
}

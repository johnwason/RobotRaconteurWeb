//This file is automatically generated. DO NOT EDIT!
using System;
using RobotRaconteurWeb;
using RobotRaconteurWeb.Extensions;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 0108

namespace com.robotraconteur.testing.TestService1
{
[RobotRaconteurServiceStruct("com.robotraconteur.testing.TestService1.teststruct1")]
public class teststruct1
{
    public double[] dat1;
    public string str2;
    public Dictionary<int,string> vec3;
    public Dictionary<string,string> dict4;
    public List<string> list5;
    public teststruct2 struct1;
    public Dictionary<string,teststruct2> dstruct2;
    public List<teststruct2> lstruct3;
    public MultiDimArray multidimarray;
    public object var3;
}

[RobotRaconteurServiceStruct("com.robotraconteur.testing.TestService1.teststruct2")]
public class teststruct2
{
    public double[] mydat;
}

[RobotRaconteurServiceObjectInterface("com.robotraconteur.testing.TestService1.testroot")]
public interface testroot : com.robotraconteur.testing.TestService2.baseobj
{
    Task<double> get_d1(CancellationToken cancel=default(CancellationToken));
    Task set_d1(double value, CancellationToken cancel=default(CancellationToken));
    Task<double[]> get_d2(CancellationToken cancel=default(CancellationToken));
    Task set_d2(double[] value, CancellationToken cancel=default(CancellationToken));
    Task<double[]> get_d3(CancellationToken cancel=default(CancellationToken));
    Task set_d3(double[] value, CancellationToken cancel=default(CancellationToken));
    Task<double[]> get_d4(CancellationToken cancel=default(CancellationToken));
    Task set_d4(double[] value, CancellationToken cancel=default(CancellationToken));
    Task<MultiDimArray> get_d5(CancellationToken cancel=default(CancellationToken));
    Task set_d5(MultiDimArray value, CancellationToken cancel=default(CancellationToken));
    Task<MultiDimArray> get_d6(CancellationToken cancel=default(CancellationToken));
    Task set_d6(MultiDimArray value, CancellationToken cancel=default(CancellationToken));
    Task<float> get_s1(CancellationToken cancel=default(CancellationToken));
    Task set_s1(float value, CancellationToken cancel=default(CancellationToken));
    Task<float[]> get_s2(CancellationToken cancel=default(CancellationToken));
    Task set_s2(float[] value, CancellationToken cancel=default(CancellationToken));
    Task<sbyte> get_i8_1(CancellationToken cancel=default(CancellationToken));
    Task set_i8_1(sbyte value, CancellationToken cancel=default(CancellationToken));
    Task<sbyte[]> get_i8_2(CancellationToken cancel=default(CancellationToken));
    Task set_i8_2(sbyte[] value, CancellationToken cancel=default(CancellationToken));
    Task<byte> get_u8_1(CancellationToken cancel=default(CancellationToken));
    Task set_u8_1(byte value, CancellationToken cancel=default(CancellationToken));
    Task<byte[]> get_u8_2(CancellationToken cancel=default(CancellationToken));
    Task set_u8_2(byte[] value, CancellationToken cancel=default(CancellationToken));
    Task<MultiDimArray> get_u8_3(CancellationToken cancel=default(CancellationToken));
    Task set_u8_3(MultiDimArray value, CancellationToken cancel=default(CancellationToken));
    Task<short> get_i16_1(CancellationToken cancel=default(CancellationToken));
    Task set_i16_1(short value, CancellationToken cancel=default(CancellationToken));
    Task<short[]> get_i16_2(CancellationToken cancel=default(CancellationToken));
    Task set_i16_2(short[] value, CancellationToken cancel=default(CancellationToken));
    Task<ushort> get_u16_1(CancellationToken cancel=default(CancellationToken));
    Task set_u16_1(ushort value, CancellationToken cancel=default(CancellationToken));
    Task<ushort[]> get_u16_2(CancellationToken cancel=default(CancellationToken));
    Task set_u16_2(ushort[] value, CancellationToken cancel=default(CancellationToken));
    Task<int> get_i32_1(CancellationToken cancel=default(CancellationToken));
    Task set_i32_1(int value, CancellationToken cancel=default(CancellationToken));
    Task<int[]> get_i32_2(CancellationToken cancel=default(CancellationToken));
    Task set_i32_2(int[] value, CancellationToken cancel=default(CancellationToken));
    Task<int[]> get_i32_huge(CancellationToken cancel=default(CancellationToken));
    Task set_i32_huge(int[] value, CancellationToken cancel=default(CancellationToken));
    Task<uint> get_u32_1(CancellationToken cancel=default(CancellationToken));
    Task set_u32_1(uint value, CancellationToken cancel=default(CancellationToken));
    Task<uint[]> get_u32_2(CancellationToken cancel=default(CancellationToken));
    Task set_u32_2(uint[] value, CancellationToken cancel=default(CancellationToken));
    Task<long> get_i64_1(CancellationToken cancel=default(CancellationToken));
    Task set_i64_1(long value, CancellationToken cancel=default(CancellationToken));
    Task<long[]> get_i64_2(CancellationToken cancel=default(CancellationToken));
    Task set_i64_2(long[] value, CancellationToken cancel=default(CancellationToken));
    Task<ulong> get_u64_1(CancellationToken cancel=default(CancellationToken));
    Task set_u64_1(ulong value, CancellationToken cancel=default(CancellationToken));
    Task<ulong[]> get_u64_2(CancellationToken cancel=default(CancellationToken));
    Task set_u64_2(ulong[] value, CancellationToken cancel=default(CancellationToken));
    Task<string> get_str1(CancellationToken cancel=default(CancellationToken));
    Task set_str1(string value, CancellationToken cancel=default(CancellationToken));
    Task<teststruct1> get_struct1(CancellationToken cancel=default(CancellationToken));
    Task set_struct1(teststruct1 value, CancellationToken cancel=default(CancellationToken));
    Task<teststruct2> get_struct2(CancellationToken cancel=default(CancellationToken));
    Task set_struct2(teststruct2 value, CancellationToken cancel=default(CancellationToken));
    Task<Dictionary<int,double>> get_is_d1(CancellationToken cancel=default(CancellationToken));
    Task set_is_d1(Dictionary<int,double> value, CancellationToken cancel=default(CancellationToken));
    Task<Dictionary<string,double>> get_is_d2(CancellationToken cancel=default(CancellationToken));
    Task set_is_d2(Dictionary<string,double> value, CancellationToken cancel=default(CancellationToken));
    Task<Dictionary<int,double[]>> get_is_d3(CancellationToken cancel=default(CancellationToken));
    Task set_is_d3(Dictionary<int,double[]> value, CancellationToken cancel=default(CancellationToken));
    Task<Dictionary<string,double[]>> get_is_d4(CancellationToken cancel=default(CancellationToken));
    Task set_is_d4(Dictionary<string,double[]> value, CancellationToken cancel=default(CancellationToken));
    Task<Dictionary<int,MultiDimArray>> get_is_d5(CancellationToken cancel=default(CancellationToken));
    Task set_is_d5(Dictionary<int,MultiDimArray> value, CancellationToken cancel=default(CancellationToken));
    Task<Dictionary<string,MultiDimArray>> get_is_d6(CancellationToken cancel=default(CancellationToken));
    Task set_is_d6(Dictionary<string,MultiDimArray> value, CancellationToken cancel=default(CancellationToken));
    Task<Dictionary<int,string>> get_is_str1(CancellationToken cancel=default(CancellationToken));
    Task set_is_str1(Dictionary<int,string> value, CancellationToken cancel=default(CancellationToken));
    Task<Dictionary<string,string>> get_is_str2(CancellationToken cancel=default(CancellationToken));
    Task set_is_str2(Dictionary<string,string> value, CancellationToken cancel=default(CancellationToken));
    Task<Dictionary<int,teststruct2>> get_is_struct1(CancellationToken cancel=default(CancellationToken));
    Task set_is_struct1(Dictionary<int,teststruct2> value, CancellationToken cancel=default(CancellationToken));
    Task<Dictionary<string,teststruct2>> get_is_struct2(CancellationToken cancel=default(CancellationToken));
    Task set_is_struct2(Dictionary<string,teststruct2> value, CancellationToken cancel=default(CancellationToken));
    Task<com.robotraconteur.testing.TestService2.ostruct2> get_struct3(CancellationToken cancel=default(CancellationToken));
    Task set_struct3(com.robotraconteur.testing.TestService2.ostruct2 value, CancellationToken cancel=default(CancellationToken));
    Task<List<double>> get_list_d1(CancellationToken cancel=default(CancellationToken));
    Task set_list_d1(List<double> value, CancellationToken cancel=default(CancellationToken));
    Task<List<double[]>> get_list_d3(CancellationToken cancel=default(CancellationToken));
    Task set_list_d3(List<double[]> value, CancellationToken cancel=default(CancellationToken));
    Task<List<MultiDimArray>> get_list_d5(CancellationToken cancel=default(CancellationToken));
    Task set_list_d5(List<MultiDimArray> value, CancellationToken cancel=default(CancellationToken));
    Task<List<string>> get_list_str1(CancellationToken cancel=default(CancellationToken));
    Task set_list_str1(List<string> value, CancellationToken cancel=default(CancellationToken));
    Task<List<teststruct2>> get_list_struct1(CancellationToken cancel=default(CancellationToken));
    Task set_list_struct1(List<teststruct2> value, CancellationToken cancel=default(CancellationToken));
    Task<object> get_var1(CancellationToken cancel=default(CancellationToken));
    Task set_var1(object value, CancellationToken cancel=default(CancellationToken));
    Task<Dictionary<int,object>> get_var2(CancellationToken cancel=default(CancellationToken));
    Task set_var2(Dictionary<int,object> value, CancellationToken cancel=default(CancellationToken));
    Task<object> get_var_num(CancellationToken cancel=default(CancellationToken));
    Task set_var_num(object value, CancellationToken cancel=default(CancellationToken));
    Task<object> get_var_str(CancellationToken cancel=default(CancellationToken));
    Task set_var_str(object value, CancellationToken cancel=default(CancellationToken));
    Task<object> get_var_struct(CancellationToken cancel=default(CancellationToken));
    Task set_var_struct(object value, CancellationToken cancel=default(CancellationToken));
    Task<object> get_var_vector(CancellationToken cancel=default(CancellationToken));
    Task set_var_vector(object value, CancellationToken cancel=default(CancellationToken));
    Task<object> get_var_dictionary(CancellationToken cancel=default(CancellationToken));
    Task set_var_dictionary(object value, CancellationToken cancel=default(CancellationToken));
    Task<object> get_var_list(CancellationToken cancel=default(CancellationToken));
    Task set_var_list(object value, CancellationToken cancel=default(CancellationToken));
    Task<object> get_var_multidimarray(CancellationToken cancel=default(CancellationToken));
    Task set_var_multidimarray(object value, CancellationToken cancel=default(CancellationToken));
    Task<double> get_errtest(CancellationToken cancel=default(CancellationToken));
    Task set_errtest(double value, CancellationToken cancel=default(CancellationToken));
    Task<teststruct1> get_nulltest(CancellationToken cancel=default(CancellationToken));
    Task set_nulltest(teststruct1 value, CancellationToken cancel=default(CancellationToken));
    Task func1(CancellationToken rr_cancel=default(CancellationToken));
    Task func2(double d1, double d2,CancellationToken rr_cancel=default(CancellationToken));
    Task<double> func3(double d1, double d2,CancellationToken rr_cancel=default(CancellationToken));
    Task<int> meaning_of_life(CancellationToken rr_cancel=default(CancellationToken));
    Task func_errtest(CancellationToken rr_cancel=default(CancellationToken));
    Task func_errtest1(CancellationToken rr_cancel=default(CancellationToken));
    Task func_errtest2(CancellationToken rr_cancel=default(CancellationToken));
    Task func_errtest3(CancellationToken rr_cancel=default(CancellationToken));
    Task o6_op(int op,CancellationToken rr_cancel=default(CancellationToken));
    Task pipe_check_error(CancellationToken rr_cancel=default(CancellationToken));
    Task test_callbacks(CancellationToken rr_cancel=default(CancellationToken));
    event Action ev1;
    event Action<double, teststruct2> ev2;
    Task<sub1> get_o1(CancellationToken rr_cancel=default(CancellationToken));
    Task<sub1> get_o2(int ind, CancellationToken rr_cancel=default(CancellationToken));
    Task<sub1> get_o3(int ind, CancellationToken rr_cancel=default(CancellationToken));
    Task<sub1> get_o4(string ind, CancellationToken rr_cancel=default(CancellationToken));
    Task<com.robotraconteur.testing.TestService2.subobj> get_o5(CancellationToken rr_cancel=default(CancellationToken));
    Task<object> get_o6(CancellationToken rr_cancel=default(CancellationToken));
    Pipe<double[]> p1{ get; set; }
    Pipe<teststruct2> p2{ get; set; }
    Pipe<double> broadcastpipe{ get; set; }
    Callback<Func<CancellationToken, Task>> cb1 {get; set;}
    Callback<Func<double, double, CancellationToken, Task>> cb2 {get; set;}
    Callback<Func<double, double, CancellationToken, Task<double>>> cb3 {get; set;}
    Callback<Func<CancellationToken, Task<int>>> cb_meaning_of_life {get; set;}
    Callback<Func<CancellationToken, Task>> cb_errtest {get; set;}
    Wire<double[]> w1 { get; set; }
    Wire<teststruct2> w2 { get; set; }
    Wire<MultiDimArray> w3 { get; set; }
    Wire<double> broadcastwire { get; set; }
    ArrayMemory<double> m1 { get; }
    MultiDimArrayMemory<double> m2 { get; }
    MultiDimArrayMemory<byte> m3 { get; }
}

[RobotRaconteurServiceObjectInterface("com.robotraconteur.testing.TestService1.sub1")]
public interface sub1
{
    Task<double[]> get_d1(CancellationToken cancel=default(CancellationToken));
    Task set_d1(double[] value, CancellationToken cancel=default(CancellationToken));
    Task<MultiDimArray> get_d2(CancellationToken cancel=default(CancellationToken));
    Task set_d2(MultiDimArray value, CancellationToken cancel=default(CancellationToken));
    Task<string> get_s_ind(CancellationToken cancel=default(CancellationToken));
    Task set_s_ind(string value, CancellationToken cancel=default(CancellationToken));
    Task<int> get_i_ind(CancellationToken cancel=default(CancellationToken));
    Task set_i_ind(int value, CancellationToken cancel=default(CancellationToken));
    Task<sub2> get_o2_1(CancellationToken rr_cancel=default(CancellationToken));
    Task<sub2> get_o2_2(int ind, CancellationToken rr_cancel=default(CancellationToken));
    Task<sub2> get_o2_3(string ind, CancellationToken rr_cancel=default(CancellationToken));
}

[RobotRaconteurServiceObjectInterface("com.robotraconteur.testing.TestService1.sub2")]
public interface sub2
{
    Task<string> get_s_ind(CancellationToken cancel=default(CancellationToken));
    Task set_s_ind(string value, CancellationToken cancel=default(CancellationToken));
    Task<int> get_i_ind(CancellationToken cancel=default(CancellationToken));
    Task set_i_ind(int value, CancellationToken cancel=default(CancellationToken));
    Task<string> get_data(CancellationToken cancel=default(CancellationToken));
    Task set_data(string value, CancellationToken cancel=default(CancellationToken));
    Task<sub3> get_o3_1(string ind, CancellationToken rr_cancel=default(CancellationToken));
}

[RobotRaconteurServiceObjectInterface("com.robotraconteur.testing.TestService1.sub3")]
public interface sub3
{
    Task<string> get_ind(CancellationToken cancel=default(CancellationToken));
    Task set_ind(string value, CancellationToken cancel=default(CancellationToken));
    Task<string> get_data2(CancellationToken cancel=default(CancellationToken));
    Task set_data2(string value, CancellationToken cancel=default(CancellationToken));
    Task<double> get_data3(CancellationToken cancel=default(CancellationToken));
    Task set_data3(double value, CancellationToken cancel=default(CancellationToken));
    Task<double> add(double d,CancellationToken rr_cancel=default(CancellationToken));
}

public static class com__robotraconteur__testing__TestService1Constants  {
    public static class testroot
    {
    public static readonly double[] doubleconst={3.4, 4.8, 14372.8};
    public const string strconst="This is a constant";
    }
}
public class testexception1 : RobotRaconteurRemoteException
{
    public testexception1(string message) : base("com.robotraconteur.testing.TestService1.testexception1",message) {}
};
public class testexception2 : RobotRaconteurRemoteException
{
    public testexception2(string message) : base("com.robotraconteur.testing.TestService1.testexception2",message) {}
};
}

//This file is automatically generated. DO NOT EDIT!
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using RobotRaconteurWeb;
using RobotRaconteurWeb.Extensions;

#pragma warning disable 0108


namespace com.robotraconteur.testing.TestService1
{
    [RobotRaconteurServiceStruct("com.robotraconteur.testing.TestService1.teststruct1")]
    public class teststruct1
    {
        public double[] dat1;
        public string str2;
        public Dictionary<int, string> vec3;
        public Dictionary<string, string> dict4;
        public List<string> list5;
        public teststruct2 struct1;
        public Dictionary<string, teststruct2> dstruct2;
        public List<teststruct2> lstruct3;
        public MultiDimArray multidimarray;
        public object var3;
    }

    [RobotRaconteurServiceStruct("com.robotraconteur.testing.TestService1.teststruct2")]
    public class teststruct2
    {
        public double[] mydat;
    }

    [RobotRaconteurServiceObjectInterface("com.robotraconteur.testing.TestService1.testroot")]
    public interface testroot : com.robotraconteur.testing.TestService2.baseobj
    {
        Task<double> get_d1(CancellationToken cancel = default(CancellationToken));
        Task set_d1(double value, CancellationToken cancel = default(CancellationToken));
        Task<double[]> get_d2(CancellationToken cancel = default(CancellationToken));
        Task set_d2(double[] value, CancellationToken cancel = default(CancellationToken));
        Task<double[]> get_d3(CancellationToken cancel = default(CancellationToken));
        Task set_d3(double[] value, CancellationToken cancel = default(CancellationToken));
        Task<double[]> get_d4(CancellationToken cancel = default(CancellationToken));
        Task set_d4(double[] value, CancellationToken cancel = default(CancellationToken));
        Task<MultiDimArray> get_d5(CancellationToken cancel = default(CancellationToken));
        Task set_d5(MultiDimArray value, CancellationToken cancel = default(CancellationToken));
        Task<MultiDimArray> get_d6(CancellationToken cancel = default(CancellationToken));
        Task set_d6(MultiDimArray value, CancellationToken cancel = default(CancellationToken));
        Task<float> get_s1(CancellationToken cancel = default(CancellationToken));
        Task set_s1(float value, CancellationToken cancel = default(CancellationToken));
        Task<float[]> get_s2(CancellationToken cancel = default(CancellationToken));
        Task set_s2(float[] value, CancellationToken cancel = default(CancellationToken));
        Task<sbyte> get_i8_1(CancellationToken cancel = default(CancellationToken));
        Task set_i8_1(sbyte value, CancellationToken cancel = default(CancellationToken));
        Task<sbyte[]> get_i8_2(CancellationToken cancel = default(CancellationToken));
        Task set_i8_2(sbyte[] value, CancellationToken cancel = default(CancellationToken));
        Task<byte> get_u8_1(CancellationToken cancel = default(CancellationToken));
        Task set_u8_1(byte value, CancellationToken cancel = default(CancellationToken));
        Task<byte[]> get_u8_2(CancellationToken cancel = default(CancellationToken));
        Task set_u8_2(byte[] value, CancellationToken cancel = default(CancellationToken));
        Task<MultiDimArray> get_u8_3(CancellationToken cancel = default(CancellationToken));
        Task set_u8_3(MultiDimArray value, CancellationToken cancel = default(CancellationToken));
        Task<short> get_i16_1(CancellationToken cancel = default(CancellationToken));
        Task set_i16_1(short value, CancellationToken cancel = default(CancellationToken));
        Task<short[]> get_i16_2(CancellationToken cancel = default(CancellationToken));
        Task set_i16_2(short[] value, CancellationToken cancel = default(CancellationToken));
        Task<ushort> get_u16_1(CancellationToken cancel = default(CancellationToken));
        Task set_u16_1(ushort value, CancellationToken cancel = default(CancellationToken));
        Task<ushort[]> get_u16_2(CancellationToken cancel = default(CancellationToken));
        Task set_u16_2(ushort[] value, CancellationToken cancel = default(CancellationToken));
        Task<int> get_i32_1(CancellationToken cancel = default(CancellationToken));
        Task set_i32_1(int value, CancellationToken cancel = default(CancellationToken));
        Task<int[]> get_i32_2(CancellationToken cancel = default(CancellationToken));
        Task set_i32_2(int[] value, CancellationToken cancel = default(CancellationToken));
        Task<int[]> get_i32_huge(CancellationToken cancel = default(CancellationToken));
        Task set_i32_huge(int[] value, CancellationToken cancel = default(CancellationToken));
        Task<uint> get_u32_1(CancellationToken cancel = default(CancellationToken));
        Task set_u32_1(uint value, CancellationToken cancel = default(CancellationToken));
        Task<uint[]> get_u32_2(CancellationToken cancel = default(CancellationToken));
        Task set_u32_2(uint[] value, CancellationToken cancel = default(CancellationToken));
        Task<long> get_i64_1(CancellationToken cancel = default(CancellationToken));
        Task set_i64_1(long value, CancellationToken cancel = default(CancellationToken));
        Task<long[]> get_i64_2(CancellationToken cancel = default(CancellationToken));
        Task set_i64_2(long[] value, CancellationToken cancel = default(CancellationToken));
        Task<ulong> get_u64_1(CancellationToken cancel = default(CancellationToken));
        Task set_u64_1(ulong value, CancellationToken cancel = default(CancellationToken));
        Task<ulong[]> get_u64_2(CancellationToken cancel = default(CancellationToken));
        Task set_u64_2(ulong[] value, CancellationToken cancel = default(CancellationToken));
        Task<string> get_str1(CancellationToken cancel = default(CancellationToken));
        Task set_str1(string value, CancellationToken cancel = default(CancellationToken));
        Task<teststruct1> get_struct1(CancellationToken cancel = default(CancellationToken));
        Task set_struct1(teststruct1 value, CancellationToken cancel = default(CancellationToken));
        Task<teststruct2> get_struct2(CancellationToken cancel = default(CancellationToken));
        Task set_struct2(teststruct2 value, CancellationToken cancel = default(CancellationToken));
        Task<Dictionary<int, double>> get_is_d1(CancellationToken cancel = default(CancellationToken));
        Task set_is_d1(Dictionary<int, double> value, CancellationToken cancel = default(CancellationToken));
        Task<Dictionary<string, double>> get_is_d2(CancellationToken cancel = default(CancellationToken));
        Task set_is_d2(Dictionary<string, double> value, CancellationToken cancel = default(CancellationToken));
        Task<Dictionary<int, double[]>> get_is_d3(CancellationToken cancel = default(CancellationToken));
        Task set_is_d3(Dictionary<int, double[]> value, CancellationToken cancel = default(CancellationToken));
        Task<Dictionary<string, double[]>> get_is_d4(CancellationToken cancel = default(CancellationToken));
        Task set_is_d4(Dictionary<string, double[]> value, CancellationToken cancel = default(CancellationToken));
        Task<Dictionary<int, MultiDimArray>> get_is_d5(CancellationToken cancel = default(CancellationToken));
        Task set_is_d5(Dictionary<int, MultiDimArray> value, CancellationToken cancel = default(CancellationToken));
        Task<Dictionary<string, MultiDimArray>> get_is_d6(CancellationToken cancel = default(CancellationToken));
        Task set_is_d6(Dictionary<string, MultiDimArray> value, CancellationToken cancel = default(CancellationToken));
        Task<Dictionary<int, string>> get_is_str1(CancellationToken cancel = default(CancellationToken));
        Task set_is_str1(Dictionary<int, string> value, CancellationToken cancel = default(CancellationToken));
        Task<Dictionary<string, string>> get_is_str2(CancellationToken cancel = default(CancellationToken));
        Task set_is_str2(Dictionary<string, string> value, CancellationToken cancel = default(CancellationToken));
        Task<Dictionary<int, teststruct2>> get_is_struct1(CancellationToken cancel = default(CancellationToken));
        Task set_is_struct1(Dictionary<int, teststruct2> value, CancellationToken cancel = default(CancellationToken));
        Task<Dictionary<string, teststruct2>> get_is_struct2(CancellationToken cancel = default(CancellationToken));
        Task set_is_struct2(Dictionary<string, teststruct2> value, CancellationToken cancel = default(CancellationToken));
        Task<com.robotraconteur.testing.TestService2.ostruct2> get_struct3(CancellationToken cancel = default(CancellationToken));
        Task set_struct3(com.robotraconteur.testing.TestService2.ostruct2 value, CancellationToken cancel = default(CancellationToken));
        Task<List<double>> get_list_d1(CancellationToken cancel = default(CancellationToken));
        Task set_list_d1(List<double> value, CancellationToken cancel = default(CancellationToken));
        Task<List<double[]>> get_list_d3(CancellationToken cancel = default(CancellationToken));
        Task set_list_d3(List<double[]> value, CancellationToken cancel = default(CancellationToken));
        Task<List<MultiDimArray>> get_list_d5(CancellationToken cancel = default(CancellationToken));
        Task set_list_d5(List<MultiDimArray> value, CancellationToken cancel = default(CancellationToken));
        Task<List<string>> get_list_str1(CancellationToken cancel = default(CancellationToken));
        Task set_list_str1(List<string> value, CancellationToken cancel = default(CancellationToken));
        Task<List<teststruct2>> get_list_struct1(CancellationToken cancel = default(CancellationToken));
        Task set_list_struct1(List<teststruct2> value, CancellationToken cancel = default(CancellationToken));
        Task<object> get_var1(CancellationToken cancel = default(CancellationToken));
        Task set_var1(object value, CancellationToken cancel = default(CancellationToken));
        Task<Dictionary<int, object>> get_var2(CancellationToken cancel = default(CancellationToken));
        Task set_var2(Dictionary<int, object> value, CancellationToken cancel = default(CancellationToken));
        Task<object> get_var_num(CancellationToken cancel = default(CancellationToken));
        Task set_var_num(object value, CancellationToken cancel = default(CancellationToken));
        Task<object> get_var_str(CancellationToken cancel = default(CancellationToken));
        Task set_var_str(object value, CancellationToken cancel = default(CancellationToken));
        Task<object> get_var_struct(CancellationToken cancel = default(CancellationToken));
        Task set_var_struct(object value, CancellationToken cancel = default(CancellationToken));
        Task<object> get_var_vector(CancellationToken cancel = default(CancellationToken));
        Task set_var_vector(object value, CancellationToken cancel = default(CancellationToken));
        Task<object> get_var_dictionary(CancellationToken cancel = default(CancellationToken));
        Task set_var_dictionary(object value, CancellationToken cancel = default(CancellationToken));
        Task<object> get_var_list(CancellationToken cancel = default(CancellationToken));
        Task set_var_list(object value, CancellationToken cancel = default(CancellationToken));
        Task<object> get_var_multidimarray(CancellationToken cancel = default(CancellationToken));
        Task set_var_multidimarray(object value, CancellationToken cancel = default(CancellationToken));
        Task<double> get_errtest(CancellationToken cancel = default(CancellationToken));
        Task set_errtest(double value, CancellationToken cancel = default(CancellationToken));
        Task<teststruct1> get_nulltest(CancellationToken cancel = default(CancellationToken));
        Task set_nulltest(teststruct1 value, CancellationToken cancel = default(CancellationToken));
        Task func1(CancellationToken rr_cancel = default(CancellationToken));
        Task func2(double d1, double d2, CancellationToken rr_cancel = default(CancellationToken));
        Task<double> func3(double d1, double d2, CancellationToken rr_cancel = default(CancellationToken));
        Task<int> meaning_of_life(CancellationToken rr_cancel = default(CancellationToken));
        Task func_errtest(CancellationToken rr_cancel = default(CancellationToken));
        Task func_errtest1(CancellationToken rr_cancel = default(CancellationToken));
        Task func_errtest2(CancellationToken rr_cancel = default(CancellationToken));
        Task func_errtest3(CancellationToken rr_cancel = default(CancellationToken));
        Task o6_op(int op, CancellationToken rr_cancel = default(CancellationToken));
        Task pipe_check_error(CancellationToken rr_cancel = default(CancellationToken));
        Task test_callbacks(CancellationToken rr_cancel = default(CancellationToken));
        event Action ev1;
        event Action<double, teststruct2> ev2;
        Task<sub1> get_o1(CancellationToken rr_cancel = default(CancellationToken));
        Task<sub1> get_o2(int ind, CancellationToken rr_cancel = default(CancellationToken));
        Task<sub1> get_o3(int ind, CancellationToken rr_cancel = default(CancellationToken));
        Task<sub1> get_o4(string ind, CancellationToken rr_cancel = default(CancellationToken));
        Task<com.robotraconteur.testing.TestService2.subobj> get_o5(CancellationToken rr_cancel = default(CancellationToken));
        Task<object> get_o6(CancellationToken rr_cancel = default(CancellationToken));
        Pipe<double[]> p1 { get; set; }
        Pipe<teststruct2> p2 { get; set; }
        Pipe<double> broadcastpipe { get; set; }
        Callback<Func<CancellationToken, Task>> cb1 { get; set; }
        Callback<Func<double, double, CancellationToken, Task>> cb2 { get; set; }
        Callback<Func<double, double, CancellationToken, Task<double>>> cb3 { get; set; }
        Callback<Func<CancellationToken, Task<int>>> cb_meaning_of_life { get; set; }
        Callback<Func<CancellationToken, Task>> cb_errtest { get; set; }
        Wire<double[]> w1 { get; set; }
        Wire<teststruct2> w2 { get; set; }
        Wire<MultiDimArray> w3 { get; set; }
        Wire<double> broadcastwire { get; set; }
        ArrayMemory<double> m1 { get; }
        MultiDimArrayMemory<double> m2 { get; }
        MultiDimArrayMemory<byte> m3 { get; }
    }

    [RobotRaconteurServiceObjectInterface("com.robotraconteur.testing.TestService1.sub1")]
    public interface sub1
    {
        Task<double[]> get_d1(CancellationToken cancel = default(CancellationToken));
        Task set_d1(double[] value, CancellationToken cancel = default(CancellationToken));
        Task<MultiDimArray> get_d2(CancellationToken cancel = default(CancellationToken));
        Task set_d2(MultiDimArray value, CancellationToken cancel = default(CancellationToken));
        Task<string> get_s_ind(CancellationToken cancel = default(CancellationToken));
        Task set_s_ind(string value, CancellationToken cancel = default(CancellationToken));
        Task<int> get_i_ind(CancellationToken cancel = default(CancellationToken));
        Task set_i_ind(int value, CancellationToken cancel = default(CancellationToken));
        Task<sub2> get_o2_1(CancellationToken rr_cancel = default(CancellationToken));
        Task<sub2> get_o2_2(int ind, CancellationToken rr_cancel = default(CancellationToken));
        Task<sub2> get_o2_3(string ind, CancellationToken rr_cancel = default(CancellationToken));
    }

    [RobotRaconteurServiceObjectInterface("com.robotraconteur.testing.TestService1.sub2")]
    public interface sub2
    {
        Task<string> get_s_ind(CancellationToken cancel = default(CancellationToken));
        Task set_s_ind(string value, CancellationToken cancel = default(CancellationToken));
        Task<int> get_i_ind(CancellationToken cancel = default(CancellationToken));
        Task set_i_ind(int value, CancellationToken cancel = default(CancellationToken));
        Task<string> get_data(CancellationToken cancel = default(CancellationToken));
        Task set_data(string value, CancellationToken cancel = default(CancellationToken));
        Task<sub3> get_o3_1(string ind, CancellationToken rr_cancel = default(CancellationToken));
    }

    [RobotRaconteurServiceObjectInterface("com.robotraconteur.testing.TestService1.sub3")]
    public interface sub3
    {
        Task<string> get_ind(CancellationToken cancel = default(CancellationToken));
        Task set_ind(string value, CancellationToken cancel = default(CancellationToken));
        Task<string> get_data2(CancellationToken cancel = default(CancellationToken));
        Task set_data2(string value, CancellationToken cancel = default(CancellationToken));
        Task<double> get_data3(CancellationToken cancel = default(CancellationToken));
        Task set_data3(double value, CancellationToken cancel = default(CancellationToken));
        Task<double> add(double d, CancellationToken rr_cancel = default(CancellationToken));
    }

    public static class com__robotraconteur__testing__TestService1Constants
    {
        public static class testroot
        {
            public static readonly double[] doubleconst = { 3.4, 4.8, 14372.8 };
            public const string strconst = "This is a constant";
        }
    }
    public class testexception1 : RobotRaconteurRemoteException
    {
        public testexception1(string message) : base("com.robotraconteur.testing.TestService1.testexception1", message) { }
    };
    public class testexception2 : RobotRaconteurRemoteException
    {
        public testexception2(string message) : base("com.robotraconteur.testing.TestService1.testexception2", message) { }
    };
}

namespace com.robotraconteur.testing.TestService1
{
    public class com__robotraconteur__testing__TestService1Factory : ServiceFactory
    {
        public override string DefString()
        {
            const string s = "#This is the standard test service for RobotRaconteur\n#It is not meant to be exhaustive, rather it tests the\n#most common operations.\n\n#Each of the members defined has a specified behavior.\n#Refer to the reference implementation for details\n#on these behaviors.  New implementations of\n#Robot Raconteur should test against the reference\n#client and server to determine compatibilty.\n\nservice com.robotraconteur.testing.TestService1\n\noption version 0.8\n\nimport com.robotraconteur.testing.TestService2\n\nexception testexception1\nexception testexception2\n\nstruct teststruct1\nfield double[] dat1\nfield string str2\nfield string{int32} vec3\nfield string{string} dict4\nfield string{list} list5\nfield teststruct2 struct1\nfield teststruct2{string} dstruct2\nfield teststruct2{list} lstruct3\nfield double[*] multidimarray\n\nfield varvalue var3\n\nend struct\n\nstruct teststruct2\nfield double[] mydat\n\nend struct\n\nobject testroot\nimplements com.robotraconteur.testing.TestService2.baseobj\n\noption constant double[] doubleconst {3.4, 4.8, 14372.8}\noption constant string strconst \"This is a constant\"\n\n#Properties to test the serialization of different data types\n\n#numbers\n\nproperty double d1\nproperty double[] d2\nproperty double[16] d3\nproperty double[16-] d4\nproperty double[*] d5\nproperty double[3,3] d6\n\nproperty single s1\nproperty single[] s2\n\nproperty int8 i8_1\nproperty int8[] i8_2\n\nproperty uint8 u8_1\nproperty uint8[] u8_2\nproperty uint8[*] u8_3\n\nproperty int16 i16_1\nproperty int16[] i16_2\n\nproperty uint16 u16_1\nproperty uint16[] u16_2\n\nproperty int32 i32_1\nproperty int32[] i32_2\nproperty int32[] i32_huge\n\nproperty uint32 u32_1\nproperty uint32[] u32_2\n\nproperty int64 i64_1\nproperty int64[] i64_2\n\nproperty uint64 u64_1\nproperty uint64[] u64_2\n\n#strings\nproperty string str1\n\n#structs\nproperty teststruct1 struct1\nproperty teststruct2 struct2\n\n#indexed sets\nproperty double{int32} is_d1\nproperty double{string} is_d2\nproperty double[]{int32} is_d3\nproperty double[]{string} is_d4\nproperty double[*]{int32} is_d5\nproperty double[*]{string} is_d6\n\nproperty string{int32} is_str1\nproperty string{string} is_str2\n\nproperty teststruct2{int32} is_struct1\nproperty teststruct2{string} is_struct2\nproperty com.robotraconteur.testing.TestService2.ostruct2 struct3\n\n#lists\nproperty double{list} list_d1\nproperty double[]{list} list_d3\nproperty double[*]{list} list_d5\n\nproperty string{list} list_str1\nproperty teststruct2{list} list_struct1\n\n#varvalue\nproperty varvalue var1\nproperty varvalue{int32} var2\nproperty varvalue var_num\nproperty varvalue var_str\nproperty varvalue var_struct\nproperty varvalue var_vector\nproperty varvalue var_dictionary\nproperty varvalue var_list\nproperty varvalue var_multidimarray\n\n#Throw an error to test error transmission\nproperty double errtest\nproperty teststruct1 nulltest\n\n#functions\nfunction void func1()\nfunction void func2(double d1, double d2)\nfunction double func3(double d1, double d2)\nfunction int32 meaning_of_life()\nfunction void func_errtest()\nfunction void func_errtest1()\nfunction void func_errtest2()\nfunction void func_errtest3()\n\n#events\n\nevent ev1()\nevent ev2(double d1, teststruct2 s2 )\n\n#objrefs\n\nobjref sub1 o1\nobjref sub1[] o2\nobjref sub1{int32} o3\nobjref sub1{string} o4\nobjref com.robotraconteur.testing.TestService2.subobj o5\n\nobjref varobject o6\n\nfunction void o6_op(int32 op)\n\n#pipes\n\npipe double[] p1\n\n#option pipe p2 unreliable\npipe teststruct2 p2\nfunction void pipe_check_error()\n\npipe double broadcastpipe\n\n#callbacks\ncallback void cb1()\ncallback void cb2(double d1, double d2)\ncallback double cb3(double d1, double d2)\ncallback int32 cb_meaning_of_life()\ncallback void cb_errtest()\n\nfunction void test_callbacks()\n\n#wires\n\nwire double[] w1\nwire teststruct2 w2\nwire int32[*] w3\n\nwire double broadcastwire\n\n#memory\n\nmemory double[] m1\nmemory double[*] m2\nmemory uint8[*] m3\n\nend object\n\nobject sub1\nproperty double[] d1\nproperty double[*] d2\n\nobjref sub2 o2_1\nobjref sub2{int32} o2_2\nobjref sub2{string} o2_3\n\nproperty string s_ind\nproperty int32 i_ind\n\nend object\n\nobject sub2\n\nproperty string s_ind\nproperty int32 i_ind\n\nproperty string data\nobjref sub3{string} o3_1\nend object\n\nobject sub3\nproperty string ind\nproperty string data2\nproperty double data3\nfunction double add(double d)\nend object\n\n\n";
            return s;
        }
        public override string GetServiceName() { return "com.robotraconteur.testing.TestService1"; }
        public teststruct1_stub teststruct1_stubentry;
        public teststruct2_stub teststruct2_stubentry;
        public com__robotraconteur__testing__TestService1Factory() : this(null, null) { }
        public com__robotraconteur__testing__TestService1Factory(RobotRaconteurNode node = null, ClientContext context = null) : base(node, context)
        {
            teststruct1_stubentry = new teststruct1_stub(this, this.node, this.context);
            teststruct2_stubentry = new teststruct2_stub(this, this.node, this.context);
        }
        public override IStructureStub FindStructureStub(string objecttype)
        {
            if (objecttype == "teststruct1")
                return teststruct1_stubentry;
            if (objecttype == "teststruct2")
                return teststruct2_stubentry;
            throw new DataTypeException("Cannot find appropriate structure stub");
        }
        public override IPodStub FindPodStub(string objecttype)
        {
            throw new DataTypeException("Cannot find appropriate pod stub");
        }
        public override INamedArrayStub FindNamedArrayStub(string objecttype)
        {
            throw new DataTypeException("Cannot find appropriate pod stub");
        }
        public override ServiceStub CreateStub(string objecttype, string path, ClientContext context)
        {
            string objshort;
            if (CompareNamespace(objecttype, out objshort))
            {
                switch (objshort)
                {
                    case "testroot":
                        return new testroot_stub(path, context);
                    case "sub1":
                        return new sub1_stub(path, context);
                    case "sub2":
                        return new sub2_stub(path, context);
                    case "sub3":
                        return new sub3_stub(path, context);
                    default:
                        break;
                }
            }
            else
            {
                return base.CreateStub(objecttype, path, context);
            }
            throw new ServiceException("Could not create stub");
        }
        public override ServiceSkel CreateSkel(string path, object obj, ServerContext context)
        {
            string objtype = ServiceDefinitionUtil.FindObjectRRType(obj);
            string objshort;
            if (CompareNamespace(objtype, out objshort))
            {
                switch (objshort)
                {
                    case "testroot":
                        return new testroot_skel(path, (testroot)obj, context);
                    case "sub1":
                        return new sub1_skel(path, (sub1)obj, context);
                    case "sub2":
                        return new sub2_skel(path, (sub2)obj, context);
                    case "sub3":
                        return new sub3_skel(path, (sub3)obj, context);
                    default:
                        break;
                }
            }
            else
            {
                return base.CreateSkel(path, obj, context);
            }
            throw new ServiceException("Could not create skel");
        }
        public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
        {
            if (rr_exp == null) return rr_exp;
            string rr_type = rr_exp.Error;
            if (!rr_type.Contains(".")) return rr_exp;
            string rr_stype;
            if (CompareNamespace(rr_type, out rr_stype))
            {
                if (rr_stype == "testexception1") return new testexception1(rr_exp.Message);
                if (rr_stype == "testexception2") return new testexception2(rr_exp.Message);
            }
            else
            {
                return base.DownCastException(rr_exp);
            }
            return rr_exp;
        }
    }

    public class teststruct1_stub : IStructureStub
    {
        public teststruct1_stub(com__robotraconteur__testing__TestService1Factory d, RobotRaconteurNode node, ClientContext context) { def = d; rr_node = node; rr_context = context; }
        private com__robotraconteur__testing__TestService1Factory def;
        private RobotRaconteurNode rr_node;
        private ClientContext rr_context;
        public MessageElementNestedElementList PackStructure(object s1)
        {
            List<MessageElement> m = new List<MessageElement>();
            if (s1 == null) return null;
            teststruct1 s = (teststruct1)s1;
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackArray<double>("dat1", s.dat1));
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackString("str2", s.str2));
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackMapType<int, string>(rr_node, rr_context, "vec3", s.vec3));
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackMapType<string, string>(rr_node, rr_context, "dict4", s.dict4));
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackListType<string>(rr_node, rr_context, "list5", s.list5));
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackStructure(rr_node, rr_context, "struct1", s.struct1));
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackMapType<string, teststruct2>(rr_node, rr_context, "dstruct2", s.dstruct2));
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackListType<teststruct2>(rr_node, rr_context, "lstruct3", s.lstruct3));
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackMultiDimArray(rr_node, "multidimarray", (MultiDimArray)s.multidimarray));
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackVarType(rr_node, rr_context, "var3", s.var3));
            return new MessageElementNestedElementList(DataTypes.structure_t, "com.robotraconteur.testing.TestService1.teststruct1", m);
        }
        public T UnpackStructure<T>(MessageElementNestedElementList m)
        {
            if (m == null) return default(T);
            teststruct1 s = new teststruct1();
            s.dat1 = MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements, "dat1"));
            s.str2 = MessageElementUtil.UnpackString(MessageElement.FindElement(m.Elements, "str2"));
            s.vec3 = MessageElementUtil.UnpackMap<int, string>(rr_node, rr_context, MessageElement.FindElement(m.Elements, "vec3"));
            s.dict4 = MessageElementUtil.UnpackMap<string, string>(rr_node, rr_context, MessageElement.FindElement(m.Elements, "dict4"));
            s.list5 = MessageElementUtil.UnpackList<string>(rr_node, rr_context, MessageElement.FindElement(m.Elements, "list5"));
            s.struct1 = MessageElementUtil.UnpackStructure<teststruct2>(rr_node, rr_context, MessageElement.FindElement(m.Elements, "struct1"));
            s.dstruct2 = MessageElementUtil.UnpackMap<string, teststruct2>(rr_node, rr_context, MessageElement.FindElement(m.Elements, "dstruct2"));
            s.lstruct3 = MessageElementUtil.UnpackList<teststruct2>(rr_node, rr_context, MessageElement.FindElement(m.Elements, "lstruct3"));
            s.multidimarray = MessageElementUtil.UnpackMultiDimArray(rr_node, MessageElement.FindElement(m.Elements, "multidimarray"));
            s.var3 = MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElement.FindElement(m.Elements, "var3"));
            T st; try { st = (T)((object)s); } catch (InvalidCastException) { throw new DataTypeMismatchException("Wrong structuretype"); }
            return st;
        }
    }

    public class teststruct2_stub : IStructureStub
    {
        public teststruct2_stub(com__robotraconteur__testing__TestService1Factory d, RobotRaconteurNode node, ClientContext context) { def = d; rr_node = node; rr_context = context; }
        private com__robotraconteur__testing__TestService1Factory def;
        private RobotRaconteurNode rr_node;
        private ClientContext rr_context;
        public MessageElementNestedElementList PackStructure(object s1)
        {
            List<MessageElement> m = new List<MessageElement>();
            if (s1 == null) return null;
            teststruct2 s = (teststruct2)s1;
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackArray<double>("mydat", s.mydat));
            return new MessageElementNestedElementList(DataTypes.structure_t, "com.robotraconteur.testing.TestService1.teststruct2", m);
        }
        public T UnpackStructure<T>(MessageElementNestedElementList m)
        {
            if (m == null) return default(T);
            teststruct2 s = new teststruct2();
            s.mydat = MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements, "mydat"));
            T st; try { st = (T)((object)s); } catch (InvalidCastException) { throw new DataTypeMismatchException("Wrong structuretype"); }
            return st;
        }
    }

    public class testroot_stub : ServiceStub, testroot
    {
        private CallbackClient<Func<CancellationToken, Task>> rr_cb1;
        private CallbackClient<Func<double, double, CancellationToken, Task>> rr_cb2;
        private CallbackClient<Func<double, double, CancellationToken, Task<double>>> rr_cb3;
        private CallbackClient<Func<CancellationToken, Task<int>>> rr_cb_meaning_of_life;
        private CallbackClient<Func<CancellationToken, Task>> rr_cb_errtest;
        private Pipe<double[]> rr_p1;
        private Pipe<teststruct2> rr_p2;
        private Pipe<double> rr_broadcastpipe;
        private Wire<double[]> rr_w1;
        private Wire<teststruct2> rr_w2;
        private Wire<MultiDimArray> rr_w3;
        private Wire<double> rr_broadcastwire;
        private ArrayMemory<double> rr_m1;
        private MultiDimArrayMemory<double> rr_m2;
        private MultiDimArrayMemory<byte> rr_m3;
        public testroot_stub(string path, ClientContext c) : base(path, c)
        {
            rr_cb1 = new CallbackClient<Func<CancellationToken, Task>>("cb1");
            rr_cb2 = new CallbackClient<Func<double, double, CancellationToken, Task>>("cb2");
            rr_cb3 = new CallbackClient<Func<double, double, CancellationToken, Task<double>>>("cb3");
            rr_cb_meaning_of_life = new CallbackClient<Func<CancellationToken, Task<int>>>("cb_meaning_of_life");
            rr_cb_errtest = new CallbackClient<Func<CancellationToken, Task>>("cb_errtest");
            rr_p1 = new PipeClient<double[]>("p1", this);
            rr_p2 = new PipeClient<teststruct2>("p2", this);
            rr_broadcastpipe = new PipeClient<double>("broadcastpipe", this);
            rr_w1 = new WireClient<double[]>("w1", this);
            rr_w2 = new WireClient<teststruct2>("w2", this);
            rr_w3 = new WireClient<MultiDimArray>("w3", this);
            rr_broadcastwire = new WireClient<double>("broadcastwire", this);
            rr_m1 = new ArrayMemoryClient<double>("m1", this, MemberDefinition_Direction.both);
            rr_m2 = new MultiDimArrayMemoryClient<double>("m2", this, MemberDefinition_Direction.both);
            rr_m3 = new MultiDimArrayMemoryClient<byte>("m3", this, MemberDefinition_Direction.both);
        }
        public async Task<double> get_d1(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "d1");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return (MessageElementUtil.UnpackScalar<double>(me));
        }
        public async Task set_d1(double value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "d1");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackScalar<double>("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<double[]> get_d2(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "d2");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackArray<double>(me);
        }
        public async Task set_d2(double[] value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "d2");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackArray<double>("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<double[]> get_d3(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "d3");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackArray<double>(me), 16, false);
        }
        public async Task set_d3(double[] value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "d3");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackArray<double>("value", DataTypeUtil.VerifyArrayLength(value, 16, false)));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<double[]> get_d4(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "d4");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackArray<double>(me), 16, true);
        }
        public async Task set_d4(double[] value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "d4");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackArray<double>("value", DataTypeUtil.VerifyArrayLength(value, 16, true)));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<MultiDimArray> get_d5(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "d5");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackMultiDimArray(rr_node, me);
        }
        public async Task set_d5(MultiDimArray value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "d5");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackMultiDimArray(rr_node, "value", (MultiDimArray)value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<MultiDimArray> get_d6(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "d6");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackMultiDimArray(rr_node, me), 9, new uint[] { 3, 3 });
        }
        public async Task set_d6(MultiDimArray value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "d6");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackMultiDimArray(rr_node, "value", (MultiDimArray)DataTypeUtil.VerifyArrayLength(value, 9, new uint[] { 3, 3 })));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<float> get_s1(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "s1");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return (MessageElementUtil.UnpackScalar<float>(me));
        }
        public async Task set_s1(float value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "s1");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackScalar<float>("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<float[]> get_s2(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "s2");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackArray<float>(me);
        }
        public async Task set_s2(float[] value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "s2");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackArray<float>("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<sbyte> get_i8_1(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "i8_1");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return (MessageElementUtil.UnpackScalar<sbyte>(me));
        }
        public async Task set_i8_1(sbyte value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "i8_1");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackScalar<sbyte>("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<sbyte[]> get_i8_2(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "i8_2");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackArray<sbyte>(me);
        }
        public async Task set_i8_2(sbyte[] value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "i8_2");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackArray<sbyte>("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<byte> get_u8_1(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "u8_1");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return (MessageElementUtil.UnpackScalar<byte>(me));
        }
        public async Task set_u8_1(byte value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "u8_1");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackScalar<byte>("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<byte[]> get_u8_2(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "u8_2");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackArray<byte>(me);
        }
        public async Task set_u8_2(byte[] value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "u8_2");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackArray<byte>("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<MultiDimArray> get_u8_3(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "u8_3");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackMultiDimArray(rr_node, me);
        }
        public async Task set_u8_3(MultiDimArray value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "u8_3");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackMultiDimArray(rr_node, "value", (MultiDimArray)value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<short> get_i16_1(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "i16_1");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return (MessageElementUtil.UnpackScalar<short>(me));
        }
        public async Task set_i16_1(short value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "i16_1");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackScalar<short>("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<short[]> get_i16_2(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "i16_2");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackArray<short>(me);
        }
        public async Task set_i16_2(short[] value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "i16_2");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackArray<short>("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<ushort> get_u16_1(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "u16_1");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return (MessageElementUtil.UnpackScalar<ushort>(me));
        }
        public async Task set_u16_1(ushort value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "u16_1");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackScalar<ushort>("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<ushort[]> get_u16_2(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "u16_2");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackArray<ushort>(me);
        }
        public async Task set_u16_2(ushort[] value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "u16_2");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackArray<ushort>("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<int> get_i32_1(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "i32_1");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return (MessageElementUtil.UnpackScalar<int>(me));
        }
        public async Task set_i32_1(int value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "i32_1");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackScalar<int>("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<int[]> get_i32_2(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "i32_2");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackArray<int>(me);
        }
        public async Task set_i32_2(int[] value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "i32_2");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackArray<int>("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<int[]> get_i32_huge(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "i32_huge");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackArray<int>(me);
        }
        public async Task set_i32_huge(int[] value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "i32_huge");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackArray<int>("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<uint> get_u32_1(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "u32_1");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return (MessageElementUtil.UnpackScalar<uint>(me));
        }
        public async Task set_u32_1(uint value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "u32_1");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackScalar<uint>("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<uint[]> get_u32_2(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "u32_2");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackArray<uint>(me);
        }
        public async Task set_u32_2(uint[] value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "u32_2");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackArray<uint>("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<long> get_i64_1(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "i64_1");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return (MessageElementUtil.UnpackScalar<long>(me));
        }
        public async Task set_i64_1(long value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "i64_1");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackScalar<long>("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<long[]> get_i64_2(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "i64_2");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackArray<long>(me);
        }
        public async Task set_i64_2(long[] value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "i64_2");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackArray<long>("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<ulong> get_u64_1(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "u64_1");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return (MessageElementUtil.UnpackScalar<ulong>(me));
        }
        public async Task set_u64_1(ulong value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "u64_1");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackScalar<ulong>("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<ulong[]> get_u64_2(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "u64_2");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackArray<ulong>(me);
        }
        public async Task set_u64_2(ulong[] value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "u64_2");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackArray<ulong>("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<string> get_str1(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "str1");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackString(me);
        }
        public async Task set_str1(string value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "str1");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackString("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<teststruct1> get_struct1(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "struct1");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackStructure<teststruct1>(rr_node, rr_context, me);
        }
        public async Task set_struct1(teststruct1 value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "struct1");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackStructure(rr_node, rr_context, "value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<teststruct2> get_struct2(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "struct2");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackStructure<teststruct2>(rr_node, rr_context, me);
        }
        public async Task set_struct2(teststruct2 value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "struct2");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackStructure(rr_node, rr_context, "value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<Dictionary<int, double>> get_is_d1(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "is_d1");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackMap<int, double>(rr_node, rr_context, me);
        }
        public async Task set_is_d1(Dictionary<int, double> value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "is_d1");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackMapType<int, double>(rr_node, rr_context, "value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<Dictionary<string, double>> get_is_d2(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "is_d2");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackMap<string, double>(rr_node, rr_context, me);
        }
        public async Task set_is_d2(Dictionary<string, double> value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "is_d2");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackMapType<string, double>(rr_node, rr_context, "value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<Dictionary<int, double[]>> get_is_d3(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "is_d3");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackMap<int, double[]>(rr_node, rr_context, me);
        }
        public async Task set_is_d3(Dictionary<int, double[]> value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "is_d3");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackMapType<int, double[]>(rr_node, rr_context, "value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<Dictionary<string, double[]>> get_is_d4(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "is_d4");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackMap<string, double[]>(rr_node, rr_context, me);
        }
        public async Task set_is_d4(Dictionary<string, double[]> value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "is_d4");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackMapType<string, double[]>(rr_node, rr_context, "value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<Dictionary<int, MultiDimArray>> get_is_d5(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "is_d5");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackMap<int, MultiDimArray>(rr_node, rr_context, me);
        }
        public async Task set_is_d5(Dictionary<int, MultiDimArray> value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "is_d5");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackMapType<int, MultiDimArray>(rr_node, rr_context, "value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<Dictionary<string, MultiDimArray>> get_is_d6(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "is_d6");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackMap<string, MultiDimArray>(rr_node, rr_context, me);
        }
        public async Task set_is_d6(Dictionary<string, MultiDimArray> value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "is_d6");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackMapType<string, MultiDimArray>(rr_node, rr_context, "value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<Dictionary<int, string>> get_is_str1(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "is_str1");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackMap<int, string>(rr_node, rr_context, me);
        }
        public async Task set_is_str1(Dictionary<int, string> value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "is_str1");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackMapType<int, string>(rr_node, rr_context, "value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<Dictionary<string, string>> get_is_str2(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "is_str2");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackMap<string, string>(rr_node, rr_context, me);
        }
        public async Task set_is_str2(Dictionary<string, string> value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "is_str2");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackMapType<string, string>(rr_node, rr_context, "value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<Dictionary<int, teststruct2>> get_is_struct1(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "is_struct1");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackMap<int, teststruct2>(rr_node, rr_context, me);
        }
        public async Task set_is_struct1(Dictionary<int, teststruct2> value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "is_struct1");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackMapType<int, teststruct2>(rr_node, rr_context, "value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<Dictionary<string, teststruct2>> get_is_struct2(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "is_struct2");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackMap<string, teststruct2>(rr_node, rr_context, me);
        }
        public async Task set_is_struct2(Dictionary<string, teststruct2> value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "is_struct2");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackMapType<string, teststruct2>(rr_node, rr_context, "value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<com.robotraconteur.testing.TestService2.ostruct2> get_struct3(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "struct3");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackStructure<com.robotraconteur.testing.TestService2.ostruct2>(rr_node, rr_context, me);
        }
        public async Task set_struct3(com.robotraconteur.testing.TestService2.ostruct2 value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "struct3");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackStructure(rr_node, rr_context, "value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<List<double>> get_list_d1(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "list_d1");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackList<double>(rr_node, rr_context, me);
        }
        public async Task set_list_d1(List<double> value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "list_d1");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackListType<double>(rr_node, rr_context, "value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<List<double[]>> get_list_d3(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "list_d3");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackList<double[]>(rr_node, rr_context, me);
        }
        public async Task set_list_d3(List<double[]> value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "list_d3");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackListType<double[]>(rr_node, rr_context, "value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<List<MultiDimArray>> get_list_d5(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "list_d5");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackList<MultiDimArray>(rr_node, rr_context, me);
        }
        public async Task set_list_d5(List<MultiDimArray> value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "list_d5");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackListType<MultiDimArray>(rr_node, rr_context, "value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<List<string>> get_list_str1(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "list_str1");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackList<string>(rr_node, rr_context, me);
        }
        public async Task set_list_str1(List<string> value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "list_str1");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackListType<string>(rr_node, rr_context, "value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<List<teststruct2>> get_list_struct1(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "list_struct1");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackList<teststruct2>(rr_node, rr_context, me);
        }
        public async Task set_list_struct1(List<teststruct2> value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "list_struct1");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackListType<teststruct2>(rr_node, rr_context, "value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<object> get_var1(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "var1");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackVarType(rr_node, rr_context, me);
        }
        public async Task set_var1(object value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "var1");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackVarType(rr_node, rr_context, "value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<Dictionary<int, object>> get_var2(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "var2");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackMap<int, object>(rr_node, rr_context, me);
        }
        public async Task set_var2(Dictionary<int, object> value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "var2");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackMapType<int, object>(rr_node, rr_context, "value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<object> get_var_num(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "var_num");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackVarType(rr_node, rr_context, me);
        }
        public async Task set_var_num(object value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "var_num");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackVarType(rr_node, rr_context, "value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<object> get_var_str(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "var_str");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackVarType(rr_node, rr_context, me);
        }
        public async Task set_var_str(object value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "var_str");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackVarType(rr_node, rr_context, "value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<object> get_var_struct(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "var_struct");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackVarType(rr_node, rr_context, me);
        }
        public async Task set_var_struct(object value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "var_struct");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackVarType(rr_node, rr_context, "value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<object> get_var_vector(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "var_vector");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackVarType(rr_node, rr_context, me);
        }
        public async Task set_var_vector(object value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "var_vector");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackVarType(rr_node, rr_context, "value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<object> get_var_dictionary(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "var_dictionary");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackVarType(rr_node, rr_context, me);
        }
        public async Task set_var_dictionary(object value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "var_dictionary");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackVarType(rr_node, rr_context, "value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<object> get_var_list(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "var_list");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackVarType(rr_node, rr_context, me);
        }
        public async Task set_var_list(object value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "var_list");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackVarType(rr_node, rr_context, "value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<object> get_var_multidimarray(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "var_multidimarray");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackVarType(rr_node, rr_context, me);
        }
        public async Task set_var_multidimarray(object value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "var_multidimarray");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackVarType(rr_node, rr_context, "value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<double> get_errtest(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "errtest");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return (MessageElementUtil.UnpackScalar<double>(me));
        }
        public async Task set_errtest(double value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "errtest");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackScalar<double>("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<teststruct1> get_nulltest(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "nulltest");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackStructure<teststruct1>(rr_node, rr_context, me);
        }
        public async Task set_nulltest(teststruct1 value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "nulltest");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackStructure(rr_node, rr_context, "value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task func1(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry rr_m = new MessageEntry(MessageEntryType.FunctionCallReq, "func1");
            MessageEntry rr_me = await ProcessRequest(rr_m, cancel).ConfigureAwait(false);
        }
        public async Task func2(double d1, double d2, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry rr_m = new MessageEntry(MessageEntryType.FunctionCallReq, "func2");
            MessageElementUtil.AddMessageElement(rr_m, MessageElementUtil.PackScalar<double>("d1", d1));
            MessageElementUtil.AddMessageElement(rr_m, MessageElementUtil.PackScalar<double>("d2", d2));
            MessageEntry rr_me = await ProcessRequest(rr_m, cancel).ConfigureAwait(false);
        }
        public async Task<double> func3(double d1, double d2, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry rr_m = new MessageEntry(MessageEntryType.FunctionCallReq, "func3");
            MessageElementUtil.AddMessageElement(rr_m, MessageElementUtil.PackScalar<double>("d1", d1));
            MessageElementUtil.AddMessageElement(rr_m, MessageElementUtil.PackScalar<double>("d2", d2));
            MessageEntry rr_me = await ProcessRequest(rr_m, cancel).ConfigureAwait(false);
            return (MessageElementUtil.UnpackScalar<double>(rr_me.FindElement("return")));
        }
        public async Task<int> meaning_of_life(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry rr_m = new MessageEntry(MessageEntryType.FunctionCallReq, "meaning_of_life");
            MessageEntry rr_me = await ProcessRequest(rr_m, cancel).ConfigureAwait(false);
            return (MessageElementUtil.UnpackScalar<int>(rr_me.FindElement("return")));
        }
        public async Task func_errtest(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry rr_m = new MessageEntry(MessageEntryType.FunctionCallReq, "func_errtest");
            MessageEntry rr_me = await ProcessRequest(rr_m, cancel).ConfigureAwait(false);
        }
        public async Task func_errtest1(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry rr_m = new MessageEntry(MessageEntryType.FunctionCallReq, "func_errtest1");
            MessageEntry rr_me = await ProcessRequest(rr_m, cancel).ConfigureAwait(false);
        }
        public async Task func_errtest2(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry rr_m = new MessageEntry(MessageEntryType.FunctionCallReq, "func_errtest2");
            MessageEntry rr_me = await ProcessRequest(rr_m, cancel).ConfigureAwait(false);
        }
        public async Task func_errtest3(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry rr_m = new MessageEntry(MessageEntryType.FunctionCallReq, "func_errtest3");
            MessageEntry rr_me = await ProcessRequest(rr_m, cancel).ConfigureAwait(false);
        }
        public async Task o6_op(int op, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry rr_m = new MessageEntry(MessageEntryType.FunctionCallReq, "o6_op");
            MessageElementUtil.AddMessageElement(rr_m, MessageElementUtil.PackScalar<int>("op", op));
            MessageEntry rr_me = await ProcessRequest(rr_m, cancel).ConfigureAwait(false);
        }
        public async Task pipe_check_error(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry rr_m = new MessageEntry(MessageEntryType.FunctionCallReq, "pipe_check_error");
            MessageEntry rr_me = await ProcessRequest(rr_m, cancel).ConfigureAwait(false);
        }
        public async Task test_callbacks(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry rr_m = new MessageEntry(MessageEntryType.FunctionCallReq, "test_callbacks");
            MessageEntry rr_me = await ProcessRequest(rr_m, cancel).ConfigureAwait(false);
        }
        public event Action ev1;
        public event Action<double, teststruct2> ev2;
        protected override void DispatchEvent(MessageEntry rr_m)
        {
            switch (rr_m.MemberName)
            {
                case "ev1":
                    {
                        if (ev1 != null)
                        {
                            ev1();
                        }
                        return;
                    }
                case "ev2":
                    {
                        if (ev2 != null)
                        {
                            double d1 = (MessageElementUtil.UnpackScalar<double>(rr_m.FindElement("d1")));
                            teststruct2 s2 = MessageElementUtil.UnpackStructure<teststruct2>(rr_node, rr_context, rr_m.FindElement("s2"));
                            ev2(d1, s2);
                        }
                        return;
                    }
                default:
                    break;
            }
        }
        public async Task<sub1> get_o1(CancellationToken cancel = default(CancellationToken))
        {
            return (sub1)await FindObjRefTyped("o1", "com.robotraconteur.testing.TestService1.sub1", cancel).ConfigureAwait(false);
        }
        public async Task<sub1> get_o2(int ind, CancellationToken cancel = default(CancellationToken))
        {
            return (sub1)await FindObjRefTyped("o2", ind.ToString(), "com.robotraconteur.testing.TestService1.sub1", cancel).ConfigureAwait(false);
        }
        public async Task<sub1> get_o3(int ind, CancellationToken cancel = default(CancellationToken))
        {
            return (sub1)await FindObjRefTyped("o3", ind.ToString(), "com.robotraconteur.testing.TestService1.sub1", cancel).ConfigureAwait(false);
        }
        public async Task<sub1> get_o4(string ind, CancellationToken cancel = default(CancellationToken))
        {
            return (sub1)await FindObjRefTyped("o4", ind.ToString(), "com.robotraconteur.testing.TestService1.sub1", cancel).ConfigureAwait(false);
        }
        public async Task<com.robotraconteur.testing.TestService2.subobj> get_o5(CancellationToken cancel = default(CancellationToken))
        {
            return (com.robotraconteur.testing.TestService2.subobj)await FindObjRefTyped("o5", "com.robotraconteur.testing.TestService2.subobj", cancel).ConfigureAwait(false);
        }
        public async Task<object> get_o6(CancellationToken cancel = default(CancellationToken))
        {
            return (object)await FindObjRef("o6", cancel).ConfigureAwait(false);
        }
        public Pipe<double[]> p1
        {
            get { return rr_p1; }
            set { throw new InvalidOperationException(); }
        }
        public Pipe<teststruct2> p2
        {
            get { return rr_p2; }
            set { throw new InvalidOperationException(); }
        }
        public Pipe<double> broadcastpipe
        {
            get { return rr_broadcastpipe; }
            set { throw new InvalidOperationException(); }
        }
        public Callback<Func<CancellationToken, Task>> cb1
        {
            get { return rr_cb1; }
            set { throw new InvalidOperationException(); }
        }
        public Callback<Func<double, double, CancellationToken, Task>> cb2
        {
            get { return rr_cb2; }
            set { throw new InvalidOperationException(); }
        }
        public Callback<Func<double, double, CancellationToken, Task<double>>> cb3
        {
            get { return rr_cb3; }
            set { throw new InvalidOperationException(); }
        }
        public Callback<Func<CancellationToken, Task<int>>> cb_meaning_of_life
        {
            get { return rr_cb_meaning_of_life; }
            set { throw new InvalidOperationException(); }
        }
        public Callback<Func<CancellationToken, Task>> cb_errtest
        {
            get { return rr_cb_errtest; }
            set { throw new InvalidOperationException(); }
        }
        public Wire<double[]> w1
        {
            get { return rr_w1; }
            set { throw new InvalidOperationException(); }
        }
        public Wire<teststruct2> w2
        {
            get { return rr_w2; }
            set { throw new InvalidOperationException(); }
        }
        public Wire<MultiDimArray> w3
        {
            get { return rr_w3; }
            set { throw new InvalidOperationException(); }
        }
        public Wire<double> broadcastwire
        {
            get { return rr_broadcastwire; }
            set { throw new InvalidOperationException(); }
        }
        public ArrayMemory<double> m1
        {
            get { return rr_m1; }
        }
        public MultiDimArrayMemory<double> m2
        {
            get { return rr_m2; }
        }
        public MultiDimArrayMemory<byte> m3
        {
            get { return rr_m3; }
        }
        protected override void DispatchPipeMessage(MessageEntry m)
        {
            switch (m.MemberName)
            {
                case "p1":
                    this.rr_p1.PipePacketReceived(m);
                    break;
                case "p2":
                    this.rr_p2.PipePacketReceived(m);
                    break;
                case "broadcastpipe":
                    this.rr_broadcastpipe.PipePacketReceived(m);
                    break;
                default:
                    throw new Exception();
            }
        }
        protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m)
        {
            string rr_ename = rr_m.MemberName;
            MessageEntry rr_mr = new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
            rr_mr.ServicePath = rr_m.ServicePath;
            rr_mr.RequestID = rr_m.RequestID;
            switch (rr_ename)
            {
                case "cb1":
                    {
                        await this.cb1.Function(default(CancellationToken)).ConfigureAwait(false);
                        MessageElementUtil.AddMessageElement(rr_mr, MessageElementUtil.PackScalar<int>("return", 0));
                        break;
                    }
                case "cb2":
                    {
                        double d1 = (MessageElementUtil.UnpackScalar<double>(rr_m.FindElement("d1")));
                        double d2 = (MessageElementUtil.UnpackScalar<double>(rr_m.FindElement("d2")));
                        await this.cb2.Function(d1, d2, default(CancellationToken)).ConfigureAwait(false);
                        MessageElementUtil.AddMessageElement(rr_mr, MessageElementUtil.PackScalar<int>("return", 0));
                        break;
                    }
                case "cb3":
                    {
                        double d1 = (MessageElementUtil.UnpackScalar<double>(rr_m.FindElement("d1")));
                        double d2 = (MessageElementUtil.UnpackScalar<double>(rr_m.FindElement("d2")));
                        var rr_ret = await cb3.Function(d1, d2, default(CancellationToken)).ConfigureAwait(false);
                        MessageElementUtil.AddMessageElement(rr_mr, MessageElementUtil.PackScalar<double>("return", rr_ret));
                        break;
                    }
                case "cb_meaning_of_life":
                    {
                        var rr_ret = await cb_meaning_of_life.Function(default(CancellationToken)).ConfigureAwait(false);
                        MessageElementUtil.AddMessageElement(rr_mr, MessageElementUtil.PackScalar<int>("return", rr_ret));
                        break;
                    }
                case "cb_errtest":
                    {
                        await this.cb_errtest.Function(default(CancellationToken)).ConfigureAwait(false);
                        MessageElementUtil.AddMessageElement(rr_mr, MessageElementUtil.PackScalar<int>("return", 0));
                        break;
                    }
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return rr_mr;
        }
        protected override void DispatchWireMessage(MessageEntry m)
        {
            switch (m.MemberName)
            {
                case "w1":
                    this.rr_w1.WirePacketReceived(m);
                    break;
                case "w2":
                    this.rr_w2.WirePacketReceived(m);
                    break;
                case "w3":
                    this.rr_w3.WirePacketReceived(m);
                    break;
                case "broadcastwire":
                    this.rr_broadcastwire.WirePacketReceived(m);
                    break;
                default:
                    throw new Exception();
            }
        }
    }
    public class sub1_stub : ServiceStub, sub1
    {
        public sub1_stub(string path, ClientContext c) : base(path, c)
        {
        }
        public async Task<double[]> get_d1(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "d1");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackArray<double>(me);
        }
        public async Task set_d1(double[] value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "d1");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackArray<double>("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<MultiDimArray> get_d2(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "d2");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackMultiDimArray(rr_node, me);
        }
        public async Task set_d2(MultiDimArray value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "d2");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackMultiDimArray(rr_node, "value", (MultiDimArray)value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<string> get_s_ind(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "s_ind");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackString(me);
        }
        public async Task set_s_ind(string value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "s_ind");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackString("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<int> get_i_ind(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "i_ind");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return (MessageElementUtil.UnpackScalar<int>(me));
        }
        public async Task set_i_ind(int value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "i_ind");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackScalar<int>("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        protected override void DispatchEvent(MessageEntry rr_m)
        {
            switch (rr_m.MemberName)
            {
                default:
                    break;
            }
        }
        public async Task<sub2> get_o2_1(CancellationToken cancel = default(CancellationToken))
        {
            return (sub2)await FindObjRefTyped("o2_1", "com.robotraconteur.testing.TestService1.sub2", cancel).ConfigureAwait(false);
        }
        public async Task<sub2> get_o2_2(int ind, CancellationToken cancel = default(CancellationToken))
        {
            return (sub2)await FindObjRefTyped("o2_2", ind.ToString(), "com.robotraconteur.testing.TestService1.sub2", cancel).ConfigureAwait(false);
        }
        public async Task<sub2> get_o2_3(string ind, CancellationToken cancel = default(CancellationToken))
        {
            return (sub2)await FindObjRefTyped("o2_3", ind.ToString(), "com.robotraconteur.testing.TestService1.sub2", cancel).ConfigureAwait(false);
        }
        protected override void DispatchPipeMessage(MessageEntry m)
        {
            switch (m.MemberName)
            {
                default:
                    throw new Exception();
            }
        }
        protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m)
        {
            string rr_ename = rr_m.MemberName;
            MessageEntry rr_mr = new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
            rr_mr.ServicePath = rr_m.ServicePath;
            rr_mr.RequestID = rr_m.RequestID;
            switch (rr_ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return rr_mr;
        }
        protected override void DispatchWireMessage(MessageEntry m)
        {
            switch (m.MemberName)
            {
                default:
                    throw new Exception();
            }
        }
    }
    public class sub2_stub : ServiceStub, sub2
    {
        public sub2_stub(string path, ClientContext c) : base(path, c)
        {
        }
        public async Task<string> get_s_ind(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "s_ind");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackString(me);
        }
        public async Task set_s_ind(string value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "s_ind");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackString("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<int> get_i_ind(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "i_ind");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return (MessageElementUtil.UnpackScalar<int>(me));
        }
        public async Task set_i_ind(int value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "i_ind");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackScalar<int>("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<string> get_data(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "data");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackString(me);
        }
        public async Task set_data(string value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "data");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackString("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        protected override void DispatchEvent(MessageEntry rr_m)
        {
            switch (rr_m.MemberName)
            {
                default:
                    break;
            }
        }
        public async Task<sub3> get_o3_1(string ind, CancellationToken cancel = default(CancellationToken))
        {
            return (sub3)await FindObjRefTyped("o3_1", ind.ToString(), "com.robotraconteur.testing.TestService1.sub3", cancel).ConfigureAwait(false);
        }
        protected override void DispatchPipeMessage(MessageEntry m)
        {
            switch (m.MemberName)
            {
                default:
                    throw new Exception();
            }
        }
        protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m)
        {
            string rr_ename = rr_m.MemberName;
            MessageEntry rr_mr = new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
            rr_mr.ServicePath = rr_m.ServicePath;
            rr_mr.RequestID = rr_m.RequestID;
            switch (rr_ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return rr_mr;
        }
        protected override void DispatchWireMessage(MessageEntry m)
        {
            switch (m.MemberName)
            {
                default:
                    throw new Exception();
            }
        }
    }
    public class sub3_stub : ServiceStub, sub3
    {
        public sub3_stub(string path, ClientContext c) : base(path, c)
        {
        }
        public async Task<string> get_ind(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "ind");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackString(me);
        }
        public async Task set_ind(string value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "ind");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackString("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<string> get_data2(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "data2");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackString(me);
        }
        public async Task set_data2(string value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "data2");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackString("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<double> get_data3(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "data3");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return (MessageElementUtil.UnpackScalar<double>(me));
        }
        public async Task set_data3(double value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "data3");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackScalar<double>("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<double> add(double d, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry rr_m = new MessageEntry(MessageEntryType.FunctionCallReq, "add");
            MessageElementUtil.AddMessageElement(rr_m, MessageElementUtil.PackScalar<double>("d", d));
            MessageEntry rr_me = await ProcessRequest(rr_m, cancel).ConfigureAwait(false);
            return (MessageElementUtil.UnpackScalar<double>(rr_me.FindElement("return")));
        }
        protected override void DispatchEvent(MessageEntry rr_m)
        {
            switch (rr_m.MemberName)
            {
                default:
                    break;
            }
        }
        protected override void DispatchPipeMessage(MessageEntry m)
        {
            switch (m.MemberName)
            {
                default:
                    throw new Exception();
            }
        }
        protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m)
        {
            string rr_ename = rr_m.MemberName;
            MessageEntry rr_mr = new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
            rr_mr.ServicePath = rr_m.ServicePath;
            rr_mr.RequestID = rr_m.RequestID;
            switch (rr_ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return rr_mr;
        }
        protected override void DispatchWireMessage(MessageEntry m)
        {
            switch (m.MemberName)
            {
                default:
                    throw new Exception();
            }
        }
    }
    public class testroot_skel : ServiceSkel
    {
        protected testroot obj;
        public testroot_skel(string p, testroot o, ServerContext c) : base(p, o, c) { obj = (testroot)o; }
        public override void ReleaseCastObject()
        {
        }
        public override async Task<MessageEntry> CallGetProperty(MessageEntry m)
        {
            string ename = m.MemberName;
            MessageEntry mr = new MessageEntry(MessageEntryType.PropertyGetRes, ename);
            switch (ename)
            {
                case "d1":
                    {
                        double ret = await obj.get_d1().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackScalar<double>("value", ret));
                        break;
                    }
                case "d2":
                    {
                        double[] ret = await obj.get_d2().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackArray<double>("value", ret));
                        break;
                    }
                case "d3":
                    {
                        double[] ret = await obj.get_d3().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackArray<double>("value", DataTypeUtil.VerifyArrayLength(ret, 16, false)));
                        break;
                    }
                case "d4":
                    {
                        double[] ret = await obj.get_d4().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackArray<double>("value", DataTypeUtil.VerifyArrayLength(ret, 16, true)));
                        break;
                    }
                case "d5":
                    {
                        MultiDimArray ret = await obj.get_d5().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackMultiDimArray(rr_node, "value", (MultiDimArray)ret));
                        break;
                    }
                case "d6":
                    {
                        MultiDimArray ret = await obj.get_d6().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackMultiDimArray(rr_node, "value", (MultiDimArray)DataTypeUtil.VerifyArrayLength(ret, 9, new uint[] { 3, 3 })));
                        break;
                    }
                case "s1":
                    {
                        float ret = await obj.get_s1().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackScalar<float>("value", ret));
                        break;
                    }
                case "s2":
                    {
                        float[] ret = await obj.get_s2().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackArray<float>("value", ret));
                        break;
                    }
                case "i8_1":
                    {
                        sbyte ret = await obj.get_i8_1().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackScalar<sbyte>("value", ret));
                        break;
                    }
                case "i8_2":
                    {
                        sbyte[] ret = await obj.get_i8_2().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackArray<sbyte>("value", ret));
                        break;
                    }
                case "u8_1":
                    {
                        byte ret = await obj.get_u8_1().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackScalar<byte>("value", ret));
                        break;
                    }
                case "u8_2":
                    {
                        byte[] ret = await obj.get_u8_2().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackArray<byte>("value", ret));
                        break;
                    }
                case "u8_3":
                    {
                        MultiDimArray ret = await obj.get_u8_3().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackMultiDimArray(rr_node, "value", (MultiDimArray)ret));
                        break;
                    }
                case "i16_1":
                    {
                        short ret = await obj.get_i16_1().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackScalar<short>("value", ret));
                        break;
                    }
                case "i16_2":
                    {
                        short[] ret = await obj.get_i16_2().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackArray<short>("value", ret));
                        break;
                    }
                case "u16_1":
                    {
                        ushort ret = await obj.get_u16_1().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackScalar<ushort>("value", ret));
                        break;
                    }
                case "u16_2":
                    {
                        ushort[] ret = await obj.get_u16_2().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackArray<ushort>("value", ret));
                        break;
                    }
                case "i32_1":
                    {
                        int ret = await obj.get_i32_1().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackScalar<int>("value", ret));
                        break;
                    }
                case "i32_2":
                    {
                        int[] ret = await obj.get_i32_2().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackArray<int>("value", ret));
                        break;
                    }
                case "i32_huge":
                    {
                        int[] ret = await obj.get_i32_huge().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackArray<int>("value", ret));
                        break;
                    }
                case "u32_1":
                    {
                        uint ret = await obj.get_u32_1().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackScalar<uint>("value", ret));
                        break;
                    }
                case "u32_2":
                    {
                        uint[] ret = await obj.get_u32_2().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackArray<uint>("value", ret));
                        break;
                    }
                case "i64_1":
                    {
                        long ret = await obj.get_i64_1().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackScalar<long>("value", ret));
                        break;
                    }
                case "i64_2":
                    {
                        long[] ret = await obj.get_i64_2().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackArray<long>("value", ret));
                        break;
                    }
                case "u64_1":
                    {
                        ulong ret = await obj.get_u64_1().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackScalar<ulong>("value", ret));
                        break;
                    }
                case "u64_2":
                    {
                        ulong[] ret = await obj.get_u64_2().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackArray<ulong>("value", ret));
                        break;
                    }
                case "str1":
                    {
                        string ret = await obj.get_str1().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackString("value", ret));
                        break;
                    }
                case "struct1":
                    {
                        teststruct1 ret = await obj.get_struct1().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "value", ret));
                        break;
                    }
                case "struct2":
                    {
                        teststruct2 ret = await obj.get_struct2().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "value", ret));
                        break;
                    }
                case "is_d1":
                    {
                        Dictionary<int, double> ret = await obj.get_is_d1().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackMapType<int, double>(rr_node, rr_context, "value", ret));
                        break;
                    }
                case "is_d2":
                    {
                        Dictionary<string, double> ret = await obj.get_is_d2().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackMapType<string, double>(rr_node, rr_context, "value", ret));
                        break;
                    }
                case "is_d3":
                    {
                        Dictionary<int, double[]> ret = await obj.get_is_d3().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackMapType<int, double[]>(rr_node, rr_context, "value", ret));
                        break;
                    }
                case "is_d4":
                    {
                        Dictionary<string, double[]> ret = await obj.get_is_d4().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackMapType<string, double[]>(rr_node, rr_context, "value", ret));
                        break;
                    }
                case "is_d5":
                    {
                        Dictionary<int, MultiDimArray> ret = await obj.get_is_d5().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackMapType<int, MultiDimArray>(rr_node, rr_context, "value", ret));
                        break;
                    }
                case "is_d6":
                    {
                        Dictionary<string, MultiDimArray> ret = await obj.get_is_d6().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackMapType<string, MultiDimArray>(rr_node, rr_context, "value", ret));
                        break;
                    }
                case "is_str1":
                    {
                        Dictionary<int, string> ret = await obj.get_is_str1().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackMapType<int, string>(rr_node, rr_context, "value", ret));
                        break;
                    }
                case "is_str2":
                    {
                        Dictionary<string, string> ret = await obj.get_is_str2().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackMapType<string, string>(rr_node, rr_context, "value", ret));
                        break;
                    }
                case "is_struct1":
                    {
                        Dictionary<int, teststruct2> ret = await obj.get_is_struct1().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackMapType<int, teststruct2>(rr_node, rr_context, "value", ret));
                        break;
                    }
                case "is_struct2":
                    {
                        Dictionary<string, teststruct2> ret = await obj.get_is_struct2().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackMapType<string, teststruct2>(rr_node, rr_context, "value", ret));
                        break;
                    }
                case "struct3":
                    {
                        com.robotraconteur.testing.TestService2.ostruct2 ret = await obj.get_struct3().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "value", ret));
                        break;
                    }
                case "list_d1":
                    {
                        List<double> ret = await obj.get_list_d1().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackListType<double>(rr_node, rr_context, "value", ret));
                        break;
                    }
                case "list_d3":
                    {
                        List<double[]> ret = await obj.get_list_d3().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackListType<double[]>(rr_node, rr_context, "value", ret));
                        break;
                    }
                case "list_d5":
                    {
                        List<MultiDimArray> ret = await obj.get_list_d5().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackListType<MultiDimArray>(rr_node, rr_context, "value", ret));
                        break;
                    }
                case "list_str1":
                    {
                        List<string> ret = await obj.get_list_str1().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackListType<string>(rr_node, rr_context, "value", ret));
                        break;
                    }
                case "list_struct1":
                    {
                        List<teststruct2> ret = await obj.get_list_struct1().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackListType<teststruct2>(rr_node, rr_context, "value", ret));
                        break;
                    }
                case "var1":
                    {
                        object ret = await obj.get_var1().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackVarType(rr_node, rr_context, "value", ret));
                        break;
                    }
                case "var2":
                    {
                        Dictionary<int, object> ret = await obj.get_var2().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackMapType<int, object>(rr_node, rr_context, "value", ret));
                        break;
                    }
                case "var_num":
                    {
                        object ret = await obj.get_var_num().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackVarType(rr_node, rr_context, "value", ret));
                        break;
                    }
                case "var_str":
                    {
                        object ret = await obj.get_var_str().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackVarType(rr_node, rr_context, "value", ret));
                        break;
                    }
                case "var_struct":
                    {
                        object ret = await obj.get_var_struct().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackVarType(rr_node, rr_context, "value", ret));
                        break;
                    }
                case "var_vector":
                    {
                        object ret = await obj.get_var_vector().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackVarType(rr_node, rr_context, "value", ret));
                        break;
                    }
                case "var_dictionary":
                    {
                        object ret = await obj.get_var_dictionary().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackVarType(rr_node, rr_context, "value", ret));
                        break;
                    }
                case "var_list":
                    {
                        object ret = await obj.get_var_list().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackVarType(rr_node, rr_context, "value", ret));
                        break;
                    }
                case "var_multidimarray":
                    {
                        object ret = await obj.get_var_multidimarray().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackVarType(rr_node, rr_context, "value", ret));
                        break;
                    }
                case "errtest":
                    {
                        double ret = await obj.get_errtest().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackScalar<double>("value", ret));
                        break;
                    }
                case "nulltest":
                    {
                        teststruct1 ret = await obj.get_nulltest().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "value", ret));
                        break;
                    }
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return mr;
        }
        public override async Task<MessageEntry> CallSetProperty(MessageEntry m)
        {
            string ename = m.MemberName;
            MessageElement me = m.FindElement("value");
            MessageEntry mr = new MessageEntry(MessageEntryType.PropertySetRes, ename);
            switch (ename)
            {
                case "d1":
                    {
                        await obj.set_d1((MessageElementUtil.UnpackScalar<double>(me))).ConfigureAwait(false);
                        break;
                    }
                case "d2":
                    {
                        await obj.set_d2(MessageElementUtil.UnpackArray<double>(me)).ConfigureAwait(false);
                        break;
                    }
                case "d3":
                    {
                        await obj.set_d3(DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackArray<double>(me), 16, false)).ConfigureAwait(false);
                        break;
                    }
                case "d4":
                    {
                        await obj.set_d4(DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackArray<double>(me), 16, true)).ConfigureAwait(false);
                        break;
                    }
                case "d5":
                    {
                        await obj.set_d5(MessageElementUtil.UnpackMultiDimArray(rr_node, me)).ConfigureAwait(false);
                        break;
                    }
                case "d6":
                    {
                        await obj.set_d6(DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackMultiDimArray(rr_node, me), 9, new uint[] { 3, 3 })).ConfigureAwait(false);
                        break;
                    }
                case "s1":
                    {
                        await obj.set_s1((MessageElementUtil.UnpackScalar<float>(me))).ConfigureAwait(false);
                        break;
                    }
                case "s2":
                    {
                        await obj.set_s2(MessageElementUtil.UnpackArray<float>(me)).ConfigureAwait(false);
                        break;
                    }
                case "i8_1":
                    {
                        await obj.set_i8_1((MessageElementUtil.UnpackScalar<sbyte>(me))).ConfigureAwait(false);
                        break;
                    }
                case "i8_2":
                    {
                        await obj.set_i8_2(MessageElementUtil.UnpackArray<sbyte>(me)).ConfigureAwait(false);
                        break;
                    }
                case "u8_1":
                    {
                        await obj.set_u8_1((MessageElementUtil.UnpackScalar<byte>(me))).ConfigureAwait(false);
                        break;
                    }
                case "u8_2":
                    {
                        await obj.set_u8_2(MessageElementUtil.UnpackArray<byte>(me)).ConfigureAwait(false);
                        break;
                    }
                case "u8_3":
                    {
                        await obj.set_u8_3(MessageElementUtil.UnpackMultiDimArray(rr_node, me)).ConfigureAwait(false);
                        break;
                    }
                case "i16_1":
                    {
                        await obj.set_i16_1((MessageElementUtil.UnpackScalar<short>(me))).ConfigureAwait(false);
                        break;
                    }
                case "i16_2":
                    {
                        await obj.set_i16_2(MessageElementUtil.UnpackArray<short>(me)).ConfigureAwait(false);
                        break;
                    }
                case "u16_1":
                    {
                        await obj.set_u16_1((MessageElementUtil.UnpackScalar<ushort>(me))).ConfigureAwait(false);
                        break;
                    }
                case "u16_2":
                    {
                        await obj.set_u16_2(MessageElementUtil.UnpackArray<ushort>(me)).ConfigureAwait(false);
                        break;
                    }
                case "i32_1":
                    {
                        await obj.set_i32_1((MessageElementUtil.UnpackScalar<int>(me))).ConfigureAwait(false);
                        break;
                    }
                case "i32_2":
                    {
                        await obj.set_i32_2(MessageElementUtil.UnpackArray<int>(me)).ConfigureAwait(false);
                        break;
                    }
                case "i32_huge":
                    {
                        await obj.set_i32_huge(MessageElementUtil.UnpackArray<int>(me)).ConfigureAwait(false);
                        break;
                    }
                case "u32_1":
                    {
                        await obj.set_u32_1((MessageElementUtil.UnpackScalar<uint>(me))).ConfigureAwait(false);
                        break;
                    }
                case "u32_2":
                    {
                        await obj.set_u32_2(MessageElementUtil.UnpackArray<uint>(me)).ConfigureAwait(false);
                        break;
                    }
                case "i64_1":
                    {
                        await obj.set_i64_1((MessageElementUtil.UnpackScalar<long>(me))).ConfigureAwait(false);
                        break;
                    }
                case "i64_2":
                    {
                        await obj.set_i64_2(MessageElementUtil.UnpackArray<long>(me)).ConfigureAwait(false);
                        break;
                    }
                case "u64_1":
                    {
                        await obj.set_u64_1((MessageElementUtil.UnpackScalar<ulong>(me))).ConfigureAwait(false);
                        break;
                    }
                case "u64_2":
                    {
                        await obj.set_u64_2(MessageElementUtil.UnpackArray<ulong>(me)).ConfigureAwait(false);
                        break;
                    }
                case "str1":
                    {
                        await obj.set_str1(MessageElementUtil.UnpackString(me)).ConfigureAwait(false);
                        break;
                    }
                case "struct1":
                    {
                        await obj.set_struct1(MessageElementUtil.UnpackStructure<teststruct1>(rr_node, rr_context, me)).ConfigureAwait(false);
                        break;
                    }
                case "struct2":
                    {
                        await obj.set_struct2(MessageElementUtil.UnpackStructure<teststruct2>(rr_node, rr_context, me)).ConfigureAwait(false);
                        break;
                    }
                case "is_d1":
                    {
                        await obj.set_is_d1(MessageElementUtil.UnpackMap<int, double>(rr_node, rr_context, me)).ConfigureAwait(false);
                        break;
                    }
                case "is_d2":
                    {
                        await obj.set_is_d2(MessageElementUtil.UnpackMap<string, double>(rr_node, rr_context, me)).ConfigureAwait(false);
                        break;
                    }
                case "is_d3":
                    {
                        await obj.set_is_d3(MessageElementUtil.UnpackMap<int, double[]>(rr_node, rr_context, me)).ConfigureAwait(false);
                        break;
                    }
                case "is_d4":
                    {
                        await obj.set_is_d4(MessageElementUtil.UnpackMap<string, double[]>(rr_node, rr_context, me)).ConfigureAwait(false);
                        break;
                    }
                case "is_d5":
                    {
                        await obj.set_is_d5(MessageElementUtil.UnpackMap<int, MultiDimArray>(rr_node, rr_context, me)).ConfigureAwait(false);
                        break;
                    }
                case "is_d6":
                    {
                        await obj.set_is_d6(MessageElementUtil.UnpackMap<string, MultiDimArray>(rr_node, rr_context, me)).ConfigureAwait(false);
                        break;
                    }
                case "is_str1":
                    {
                        await obj.set_is_str1(MessageElementUtil.UnpackMap<int, string>(rr_node, rr_context, me)).ConfigureAwait(false);
                        break;
                    }
                case "is_str2":
                    {
                        await obj.set_is_str2(MessageElementUtil.UnpackMap<string, string>(rr_node, rr_context, me)).ConfigureAwait(false);
                        break;
                    }
                case "is_struct1":
                    {
                        await obj.set_is_struct1(MessageElementUtil.UnpackMap<int, teststruct2>(rr_node, rr_context, me)).ConfigureAwait(false);
                        break;
                    }
                case "is_struct2":
                    {
                        await obj.set_is_struct2(MessageElementUtil.UnpackMap<string, teststruct2>(rr_node, rr_context, me)).ConfigureAwait(false);
                        break;
                    }
                case "struct3":
                    {
                        await obj.set_struct3(MessageElementUtil.UnpackStructure<com.robotraconteur.testing.TestService2.ostruct2>(rr_node, rr_context, me)).ConfigureAwait(false);
                        break;
                    }
                case "list_d1":
                    {
                        await obj.set_list_d1(MessageElementUtil.UnpackList<double>(rr_node, rr_context, me)).ConfigureAwait(false);
                        break;
                    }
                case "list_d3":
                    {
                        await obj.set_list_d3(MessageElementUtil.UnpackList<double[]>(rr_node, rr_context, me)).ConfigureAwait(false);
                        break;
                    }
                case "list_d5":
                    {
                        await obj.set_list_d5(MessageElementUtil.UnpackList<MultiDimArray>(rr_node, rr_context, me)).ConfigureAwait(false);
                        break;
                    }
                case "list_str1":
                    {
                        await obj.set_list_str1(MessageElementUtil.UnpackList<string>(rr_node, rr_context, me)).ConfigureAwait(false);
                        break;
                    }
                case "list_struct1":
                    {
                        await obj.set_list_struct1(MessageElementUtil.UnpackList<teststruct2>(rr_node, rr_context, me)).ConfigureAwait(false);
                        break;
                    }
                case "var1":
                    {
                        await obj.set_var1(MessageElementUtil.UnpackVarType(rr_node, rr_context, me)).ConfigureAwait(false);
                        break;
                    }
                case "var2":
                    {
                        await obj.set_var2(MessageElementUtil.UnpackMap<int, object>(rr_node, rr_context, me)).ConfigureAwait(false);
                        break;
                    }
                case "var_num":
                    {
                        await obj.set_var_num(MessageElementUtil.UnpackVarType(rr_node, rr_context, me)).ConfigureAwait(false);
                        break;
                    }
                case "var_str":
                    {
                        await obj.set_var_str(MessageElementUtil.UnpackVarType(rr_node, rr_context, me)).ConfigureAwait(false);
                        break;
                    }
                case "var_struct":
                    {
                        await obj.set_var_struct(MessageElementUtil.UnpackVarType(rr_node, rr_context, me)).ConfigureAwait(false);
                        break;
                    }
                case "var_vector":
                    {
                        await obj.set_var_vector(MessageElementUtil.UnpackVarType(rr_node, rr_context, me)).ConfigureAwait(false);
                        break;
                    }
                case "var_dictionary":
                    {
                        await obj.set_var_dictionary(MessageElementUtil.UnpackVarType(rr_node, rr_context, me)).ConfigureAwait(false);
                        break;
                    }
                case "var_list":
                    {
                        await obj.set_var_list(MessageElementUtil.UnpackVarType(rr_node, rr_context, me)).ConfigureAwait(false);
                        break;
                    }
                case "var_multidimarray":
                    {
                        await obj.set_var_multidimarray(MessageElementUtil.UnpackVarType(rr_node, rr_context, me)).ConfigureAwait(false);
                        break;
                    }
                case "errtest":
                    {
                        await obj.set_errtest((MessageElementUtil.UnpackScalar<double>(me))).ConfigureAwait(false);
                        break;
                    }
                case "nulltest":
                    {
                        await obj.set_nulltest(MessageElementUtil.UnpackStructure<teststruct1>(rr_node, rr_context, me)).ConfigureAwait(false);
                        break;
                    }
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return mr;
        }
        public override async Task<MessageEntry> CallFunction(MessageEntry rr_m)
        {
            string rr_ename = rr_m.MemberName;
            MessageEntry rr_mr = new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
            switch (rr_ename)
            {
                case "func1":
                    {
                        await this.obj.func1(default(CancellationToken)).ConfigureAwait(false);
                        rr_mr.AddElement("return", (int)0);
                        break;
                    }
                case "func2":
                    {
                        double d1 = (MessageElementUtil.UnpackScalar<double>(MessageElementUtil.FindElement(rr_m, "d1")));
                        double d2 = (MessageElementUtil.UnpackScalar<double>(MessageElementUtil.FindElement(rr_m, "d2")));
                        await this.obj.func2(d1, d2, default(CancellationToken)).ConfigureAwait(false);
                        rr_mr.AddElement("return", (int)0);
                        break;
                    }
                case "func3":
                    {
                        double d1 = (MessageElementUtil.UnpackScalar<double>(MessageElementUtil.FindElement(rr_m, "d1")));
                        double d2 = (MessageElementUtil.UnpackScalar<double>(MessageElementUtil.FindElement(rr_m, "d2")));
                        double rr_ret = await this.obj.func3(d1, d2, default(CancellationToken)).ConfigureAwait(false);
                        rr_mr.AddElement(MessageElementUtil.PackScalar<double>("return", rr_ret));
                        break;
                    }
                case "meaning_of_life":
                    {
                        int rr_ret = await this.obj.meaning_of_life(default(CancellationToken)).ConfigureAwait(false);
                        rr_mr.AddElement(MessageElementUtil.PackScalar<int>("return", rr_ret));
                        break;
                    }
                case "func_errtest":
                    {
                        await this.obj.func_errtest(default(CancellationToken)).ConfigureAwait(false);
                        rr_mr.AddElement("return", (int)0);
                        break;
                    }
                case "func_errtest1":
                    {
                        await this.obj.func_errtest1(default(CancellationToken)).ConfigureAwait(false);
                        rr_mr.AddElement("return", (int)0);
                        break;
                    }
                case "func_errtest2":
                    {
                        await this.obj.func_errtest2(default(CancellationToken)).ConfigureAwait(false);
                        rr_mr.AddElement("return", (int)0);
                        break;
                    }
                case "func_errtest3":
                    {
                        await this.obj.func_errtest3(default(CancellationToken)).ConfigureAwait(false);
                        rr_mr.AddElement("return", (int)0);
                        break;
                    }
                case "o6_op":
                    {
                        int op = (MessageElementUtil.UnpackScalar<int>(MessageElementUtil.FindElement(rr_m, "op")));
                        await this.obj.o6_op(op, default(CancellationToken)).ConfigureAwait(false);
                        rr_mr.AddElement("return", (int)0);
                        break;
                    }
                case "pipe_check_error":
                    {
                        await this.obj.pipe_check_error(default(CancellationToken)).ConfigureAwait(false);
                        rr_mr.AddElement("return", (int)0);
                        break;
                    }
                case "test_callbacks":
                    {
                        await this.obj.test_callbacks(default(CancellationToken)).ConfigureAwait(false);
                        rr_mr.AddElement("return", (int)0);
                        break;
                    }
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return rr_mr;
        }
        public override async Task<object> GetSubObj(string name, string ind)
        {
            switch (name)
            {
                case "o1":
                    {
                        return await obj.get_o1().ConfigureAwait(false);
                    }
                case "o2":
                    {
                        return await obj.get_o2(Int32.Parse(ind)).ConfigureAwait(false);
                    }
                case "o3":
                    {
                        return await obj.get_o3(Int32.Parse(ind)).ConfigureAwait(false);
                    }
                case "o4":
                    {
                        return await obj.get_o4(ind).ConfigureAwait(false);
                    }
                case "o5":
                    {
                        return await obj.get_o5().ConfigureAwait(false);
                    }
                case "o6":
                    {
                        return await obj.get_o6().ConfigureAwait(false);
                    }
                default:
                    break;
            }
            throw new MemberNotFoundException("");
        }
        public override void RegisterEvents(object rrobj1)
        {
            obj = (testroot)rrobj1;
            obj.ev1 += rr_ev1;
            obj.ev2 += rr_ev2;
        }
        public override void UnregisterEvents(object rrobj1)
        {
            obj = (testroot)rrobj1;
            obj.ev1 -= rr_ev1;
            obj.ev2 -= rr_ev2;
        }
        public void rr_ev1()
        {
            MessageEntry rr_mm = new MessageEntry(MessageEntryType.EventReq, "ev1");
            this.SendEvent(rr_mm);
        }
        public void rr_ev2(double d1, teststruct2 s2)
        {
            MessageEntry rr_mm = new MessageEntry(MessageEntryType.EventReq, "ev2");
            MessageElementUtil.AddMessageElement(rr_mm, MessageElementUtil.PackScalar<double>("d1", d1));
            MessageElementUtil.AddMessageElement(rr_mm, MessageElementUtil.PackStructure(rr_node, rr_context, "s2", s2));
            this.SendEvent(rr_mm);
        }
        public override object GetCallbackFunction(uint rr_endpoint, string rr_membername)
        {
            switch (rr_membername)
            {
                case "cb1":
                    {
                        return new Func<CancellationToken, Task>(async delegate (CancellationToken rr_cancel)
                        {
                            MessageEntry rr_mm = new MessageEntry(MessageEntryType.CallbackCallReq, "cb1");
                            rr_mm.ServicePath = m_ServicePath;
                            MessageEntry rr_mr = await RRContext.ProcessCallbackRequest(rr_mm, rr_endpoint, rr_cancel).ConfigureAwait(false);
                            MessageElement rr_me = rr_mr.FindElement("return");
                        });
                    }
                case "cb2":
                    {
                        return new Func<double, double, CancellationToken, Task>(async delegate (double d1, double d2, CancellationToken rr_cancel)
                        {
                            MessageEntry rr_mm = new MessageEntry(MessageEntryType.CallbackCallReq, "cb2");
                            rr_mm.ServicePath = m_ServicePath;
                            MessageElementUtil.AddMessageElement(rr_mm, MessageElementUtil.PackScalar<double>("d1", d1));
                            MessageElementUtil.AddMessageElement(rr_mm, MessageElementUtil.PackScalar<double>("d2", d2));
                            MessageEntry rr_mr = await RRContext.ProcessCallbackRequest(rr_mm, rr_endpoint, rr_cancel).ConfigureAwait(false);
                            MessageElement rr_me = rr_mr.FindElement("return");
                        });
                    }
                case "cb3":
                    {
                        return new Func<double, double, CancellationToken, Task<double>>(async delegate (double d1, double d2, CancellationToken rr_cancel)
                        {
                            MessageEntry rr_mm = new MessageEntry(MessageEntryType.CallbackCallReq, "cb3");
                            rr_mm.ServicePath = m_ServicePath;
                            MessageElementUtil.AddMessageElement(rr_mm, MessageElementUtil.PackScalar<double>("d1", d1));
                            MessageElementUtil.AddMessageElement(rr_mm, MessageElementUtil.PackScalar<double>("d2", d2));
                            MessageEntry rr_mr = await RRContext.ProcessCallbackRequest(rr_mm, rr_endpoint, rr_cancel).ConfigureAwait(false);
                            MessageElement rr_me = rr_mr.FindElement("return");
                            return (MessageElementUtil.UnpackScalar<double>(rr_me));
                        });
                    }
                case "cb_meaning_of_life":
                    {
                        return new Func<CancellationToken, Task<int>>(async delegate (CancellationToken rr_cancel)
                        {
                            MessageEntry rr_mm = new MessageEntry(MessageEntryType.CallbackCallReq, "cb_meaning_of_life");
                            rr_mm.ServicePath = m_ServicePath;
                            MessageEntry rr_mr = await RRContext.ProcessCallbackRequest(rr_mm, rr_endpoint, rr_cancel).ConfigureAwait(false);
                            MessageElement rr_me = rr_mr.FindElement("return");
                            return (MessageElementUtil.UnpackScalar<int>(rr_me));
                        });
                    }
                case "cb_errtest":
                    {
                        return new Func<CancellationToken, Task>(async delegate (CancellationToken rr_cancel)
                        {
                            MessageEntry rr_mm = new MessageEntry(MessageEntryType.CallbackCallReq, "cb_errtest");
                            rr_mm.ServicePath = m_ServicePath;
                            MessageEntry rr_mr = await RRContext.ProcessCallbackRequest(rr_mm, rr_endpoint, rr_cancel).ConfigureAwait(false);
                            MessageElement rr_me = rr_mr.FindElement("return");
                        });
                    }
                default:
                    break;
            }
            throw new MemberNotFoundException("Member not found");
        }
        private PipeServer<double[]> rr_p1;
        private PipeServer<teststruct2> rr_p2;
        private PipeServer<double> rr_broadcastpipe;
        private WireServer<double[]> rr_w1;
        private WireServer<teststruct2> rr_w2;
        private WireServer<MultiDimArray> rr_w3;
        private WireServer<double> rr_broadcastwire;
        private bool rr_InitPipeServersRun = false;
        public override void InitPipeServers(object o)
        {
            if (this.rr_InitPipeServersRun) return;
            this.rr_InitPipeServersRun = true;
            testroot castobj = (testroot)o;
            this.rr_p1 = new PipeServer<double[]>("p1", this);
            this.rr_p2 = new PipeServer<teststruct2>("p2", this);
            this.rr_broadcastpipe = new PipeServer<double>("broadcastpipe", this);
            this.rr_w1 = new WireServer<double[]>("w1", this);
            this.rr_w2 = new WireServer<teststruct2>("w2", this);
            this.rr_w3 = new WireServer<MultiDimArray>("w3", this);
            this.rr_broadcastwire = new WireServer<double>("broadcastwire", this);
            castobj.p1 = this.rr_p1;
            castobj.p2 = this.rr_p2;
            castobj.broadcastpipe = this.rr_broadcastpipe;
            castobj.w1 = this.rr_w1;
            castobj.w2 = this.rr_w2;
            castobj.w3 = this.rr_w3;
            castobj.broadcastwire = this.rr_broadcastwire;
        }
        public override void InitCallbackServers(object rrobj1)
        {
            obj = (testroot)rrobj1;
            obj.cb1 = new CallbackServer<Func<CancellationToken, Task>>("cb1", this);
            obj.cb2 = new CallbackServer<Func<double, double, CancellationToken, Task>>("cb2", this);
            obj.cb3 = new CallbackServer<Func<double, double, CancellationToken, Task<double>>>("cb3", this);
            obj.cb_meaning_of_life = new CallbackServer<Func<CancellationToken, Task<int>>>("cb_meaning_of_life", this);
            obj.cb_errtest = new CallbackServer<Func<CancellationToken, Task>>("cb_errtest", this);
        }
        public override async Task<MessageEntry> CallPipeFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                case "p1":
                    return await this.rr_p1.PipeCommand(m, e).ConfigureAwait(false);
                case "p2":
                    return await this.rr_p2.PipeCommand(m, e).ConfigureAwait(false);
                case "broadcastpipe":
                    return await this.rr_broadcastpipe.PipeCommand(m, e).ConfigureAwait(false);
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override async Task<MessageEntry> CallWireFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                case "w1":
                    return await this.rr_w1.WireCommand(m, e).ConfigureAwait(false);
                case "w2":
                    return await this.rr_w2.WireCommand(m, e).ConfigureAwait(false);
                case "w3":
                    return await this.rr_w3.WireCommand(m, e).ConfigureAwait(false);
                case "broadcastwire":
                    return await this.rr_broadcastwire.WireCommand(m, e).ConfigureAwait(false);
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
        {
            switch (m.MemberName)
            {
                case "p1":
                    this.rr_p1.PipePacketReceived(m, e);
                    break;
                case "p2":
                    this.rr_p2.PipePacketReceived(m, e);
                    break;
                case "broadcastpipe":
                    this.rr_broadcastpipe.PipePacketReceived(m, e);
                    break;
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override void DispatchWireMessage(MessageEntry m, Endpoint e)
        {
            switch (m.MemberName)
            {
                case "w1":
                    this.rr_w1.WirePacketReceived(m, e);
                    break;
                case "w2":
                    this.rr_w2.WirePacketReceived(m, e);
                    break;
                case "w3":
                    this.rr_w3.WirePacketReceived(m, e);
                    break;
                case "broadcastwire":
                    this.rr_broadcastwire.WirePacketReceived(m, e);
                    break;
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                case "m1":
                    return await (new ArrayMemoryServiceSkel<double>("m1", this, MemberDefinition_Direction.both)).CallMemoryFunction(m, e, obj.m1).ConfigureAwait(false);
                    break;
                case "m2":
                    return await (new MultiDimArrayMemoryServiceSkel<double>("m2", this, MemberDefinition_Direction.both)).CallMemoryFunction(m, e, obj.m2).ConfigureAwait(false);
                    break;
                case "m3":
                    return await (new MultiDimArrayMemoryServiceSkel<byte>("m3", this, MemberDefinition_Direction.both)).CallMemoryFunction(m, e, obj.m3).ConfigureAwait(false);
                    break;
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override bool IsRequestNoLock(MessageEntry m)
        {
            return false;
        }
    }
    public class sub1_skel : ServiceSkel
    {
        protected sub1 obj;
        public sub1_skel(string p, sub1 o, ServerContext c) : base(p, o, c) { obj = (sub1)o; }
        public override void ReleaseCastObject()
        {
        }
        public override async Task<MessageEntry> CallGetProperty(MessageEntry m)
        {
            string ename = m.MemberName;
            MessageEntry mr = new MessageEntry(MessageEntryType.PropertyGetRes, ename);
            switch (ename)
            {
                case "d1":
                    {
                        double[] ret = await obj.get_d1().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackArray<double>("value", ret));
                        break;
                    }
                case "d2":
                    {
                        MultiDimArray ret = await obj.get_d2().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackMultiDimArray(rr_node, "value", (MultiDimArray)ret));
                        break;
                    }
                case "s_ind":
                    {
                        string ret = await obj.get_s_ind().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackString("value", ret));
                        break;
                    }
                case "i_ind":
                    {
                        int ret = await obj.get_i_ind().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackScalar<int>("value", ret));
                        break;
                    }
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return mr;
        }
        public override async Task<MessageEntry> CallSetProperty(MessageEntry m)
        {
            string ename = m.MemberName;
            MessageElement me = m.FindElement("value");
            MessageEntry mr = new MessageEntry(MessageEntryType.PropertySetRes, ename);
            switch (ename)
            {
                case "d1":
                    {
                        await obj.set_d1(MessageElementUtil.UnpackArray<double>(me)).ConfigureAwait(false);
                        break;
                    }
                case "d2":
                    {
                        await obj.set_d2(MessageElementUtil.UnpackMultiDimArray(rr_node, me)).ConfigureAwait(false);
                        break;
                    }
                case "s_ind":
                    {
                        await obj.set_s_ind(MessageElementUtil.UnpackString(me)).ConfigureAwait(false);
                        break;
                    }
                case "i_ind":
                    {
                        await obj.set_i_ind((MessageElementUtil.UnpackScalar<int>(me))).ConfigureAwait(false);
                        break;
                    }
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return mr;
        }
        public override async Task<MessageEntry> CallFunction(MessageEntry rr_m)
        {
            string rr_ename = rr_m.MemberName;
            MessageEntry rr_mr = new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
            switch (rr_ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return rr_mr;
        }
        public override async Task<object> GetSubObj(string name, string ind)
        {
            switch (name)
            {
                case "o2_1":
                    {
                        return await obj.get_o2_1().ConfigureAwait(false);
                    }
                case "o2_2":
                    {
                        return await obj.get_o2_2(Int32.Parse(ind)).ConfigureAwait(false);
                    }
                case "o2_3":
                    {
                        return await obj.get_o2_3(ind).ConfigureAwait(false);
                    }
                default:
                    break;
            }
            throw new MemberNotFoundException("");
        }
        public override void RegisterEvents(object rrobj1)
        {
            obj = (sub1)rrobj1;
        }
        public override void UnregisterEvents(object rrobj1)
        {
            obj = (sub1)rrobj1;
        }
        public override object GetCallbackFunction(uint rr_endpoint, string rr_membername)
        {
            switch (rr_membername)
            {
                default:
                    break;
            }
            throw new MemberNotFoundException("Member not found");
        }
        private bool rr_InitPipeServersRun = false;
        public override void InitPipeServers(object o)
        {
            if (this.rr_InitPipeServersRun) return;
            this.rr_InitPipeServersRun = true;
            sub1 castobj = (sub1)o;
        }
        public override void InitCallbackServers(object rrobj1)
        {
            obj = (sub1)rrobj1;
        }
        public override async Task<MessageEntry> CallPipeFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override async Task<MessageEntry> CallWireFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
        {
            switch (m.MemberName)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override void DispatchWireMessage(MessageEntry m, Endpoint e)
        {
            switch (m.MemberName)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override bool IsRequestNoLock(MessageEntry m)
        {
            return false;
        }
    }
    public class sub2_skel : ServiceSkel
    {
        protected sub2 obj;
        public sub2_skel(string p, sub2 o, ServerContext c) : base(p, o, c) { obj = (sub2)o; }
        public override void ReleaseCastObject()
        {
        }
        public override async Task<MessageEntry> CallGetProperty(MessageEntry m)
        {
            string ename = m.MemberName;
            MessageEntry mr = new MessageEntry(MessageEntryType.PropertyGetRes, ename);
            switch (ename)
            {
                case "s_ind":
                    {
                        string ret = await obj.get_s_ind().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackString("value", ret));
                        break;
                    }
                case "i_ind":
                    {
                        int ret = await obj.get_i_ind().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackScalar<int>("value", ret));
                        break;
                    }
                case "data":
                    {
                        string ret = await obj.get_data().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackString("value", ret));
                        break;
                    }
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return mr;
        }
        public override async Task<MessageEntry> CallSetProperty(MessageEntry m)
        {
            string ename = m.MemberName;
            MessageElement me = m.FindElement("value");
            MessageEntry mr = new MessageEntry(MessageEntryType.PropertySetRes, ename);
            switch (ename)
            {
                case "s_ind":
                    {
                        await obj.set_s_ind(MessageElementUtil.UnpackString(me)).ConfigureAwait(false);
                        break;
                    }
                case "i_ind":
                    {
                        await obj.set_i_ind((MessageElementUtil.UnpackScalar<int>(me))).ConfigureAwait(false);
                        break;
                    }
                case "data":
                    {
                        await obj.set_data(MessageElementUtil.UnpackString(me)).ConfigureAwait(false);
                        break;
                    }
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return mr;
        }
        public override async Task<MessageEntry> CallFunction(MessageEntry rr_m)
        {
            string rr_ename = rr_m.MemberName;
            MessageEntry rr_mr = new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
            switch (rr_ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return rr_mr;
        }
        public override async Task<object> GetSubObj(string name, string ind)
        {
            switch (name)
            {
                case "o3_1":
                    {
                        return await obj.get_o3_1(ind).ConfigureAwait(false);
                    }
                default:
                    break;
            }
            throw new MemberNotFoundException("");
        }
        public override void RegisterEvents(object rrobj1)
        {
            obj = (sub2)rrobj1;
        }
        public override void UnregisterEvents(object rrobj1)
        {
            obj = (sub2)rrobj1;
        }
        public override object GetCallbackFunction(uint rr_endpoint, string rr_membername)
        {
            switch (rr_membername)
            {
                default:
                    break;
            }
            throw new MemberNotFoundException("Member not found");
        }
        private bool rr_InitPipeServersRun = false;
        public override void InitPipeServers(object o)
        {
            if (this.rr_InitPipeServersRun) return;
            this.rr_InitPipeServersRun = true;
            sub2 castobj = (sub2)o;
        }
        public override void InitCallbackServers(object rrobj1)
        {
            obj = (sub2)rrobj1;
        }
        public override async Task<MessageEntry> CallPipeFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override async Task<MessageEntry> CallWireFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
        {
            switch (m.MemberName)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override void DispatchWireMessage(MessageEntry m, Endpoint e)
        {
            switch (m.MemberName)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override bool IsRequestNoLock(MessageEntry m)
        {
            return false;
        }
    }
    public class sub3_skel : ServiceSkel
    {
        protected sub3 obj;
        public sub3_skel(string p, sub3 o, ServerContext c) : base(p, o, c) { obj = (sub3)o; }
        public override void ReleaseCastObject()
        {
        }
        public override async Task<MessageEntry> CallGetProperty(MessageEntry m)
        {
            string ename = m.MemberName;
            MessageEntry mr = new MessageEntry(MessageEntryType.PropertyGetRes, ename);
            switch (ename)
            {
                case "ind":
                    {
                        string ret = await obj.get_ind().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackString("value", ret));
                        break;
                    }
                case "data2":
                    {
                        string ret = await obj.get_data2().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackString("value", ret));
                        break;
                    }
                case "data3":
                    {
                        double ret = await obj.get_data3().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackScalar<double>("value", ret));
                        break;
                    }
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return mr;
        }
        public override async Task<MessageEntry> CallSetProperty(MessageEntry m)
        {
            string ename = m.MemberName;
            MessageElement me = m.FindElement("value");
            MessageEntry mr = new MessageEntry(MessageEntryType.PropertySetRes, ename);
            switch (ename)
            {
                case "ind":
                    {
                        await obj.set_ind(MessageElementUtil.UnpackString(me)).ConfigureAwait(false);
                        break;
                    }
                case "data2":
                    {
                        await obj.set_data2(MessageElementUtil.UnpackString(me)).ConfigureAwait(false);
                        break;
                    }
                case "data3":
                    {
                        await obj.set_data3((MessageElementUtil.UnpackScalar<double>(me))).ConfigureAwait(false);
                        break;
                    }
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return mr;
        }
        public override async Task<MessageEntry> CallFunction(MessageEntry rr_m)
        {
            string rr_ename = rr_m.MemberName;
            MessageEntry rr_mr = new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
            switch (rr_ename)
            {
                case "add":
                    {
                        double d = (MessageElementUtil.UnpackScalar<double>(MessageElementUtil.FindElement(rr_m, "d")));
                        double rr_ret = await this.obj.add(d, default(CancellationToken)).ConfigureAwait(false);
                        rr_mr.AddElement(MessageElementUtil.PackScalar<double>("return", rr_ret));
                        break;
                    }
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return rr_mr;
        }
        public override async Task<object> GetSubObj(string name, string ind)
        {
            switch (name)
            {
                default:
                    break;
            }
            throw new MemberNotFoundException("");
        }
        public override void RegisterEvents(object rrobj1)
        {
            obj = (sub3)rrobj1;
        }
        public override void UnregisterEvents(object rrobj1)
        {
            obj = (sub3)rrobj1;
        }
        public override object GetCallbackFunction(uint rr_endpoint, string rr_membername)
        {
            switch (rr_membername)
            {
                default:
                    break;
            }
            throw new MemberNotFoundException("Member not found");
        }
        private bool rr_InitPipeServersRun = false;
        public override void InitPipeServers(object o)
        {
            if (this.rr_InitPipeServersRun) return;
            this.rr_InitPipeServersRun = true;
            sub3 castobj = (sub3)o;
        }
        public override void InitCallbackServers(object rrobj1)
        {
            obj = (sub3)rrobj1;
        }
        public override async Task<MessageEntry> CallPipeFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override async Task<MessageEntry> CallWireFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
        {
            switch (m.MemberName)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override void DispatchWireMessage(MessageEntry m, Endpoint e)
        {
            switch (m.MemberName)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override bool IsRequestNoLock(MessageEntry m)
        {
            return false;
        }
    }
    public class testroot_default_impl : testroot
    {
        protected Callback<Func<CancellationToken, Task>> rrvar_cb1;
        protected Callback<Func<double, double, CancellationToken, Task>> rrvar_cb2;
        protected Callback<Func<double, double, CancellationToken, Task<double>>> rrvar_cb3;
        protected Callback<Func<CancellationToken, Task<int>>> rrvar_cb_meaning_of_life;
        protected Callback<Func<CancellationToken, Task>> rrvar_cb_errtest;
        public virtual Task<double> get_d1(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_d1(double value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<double[]> get_d2(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_d2(double[] value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<double[]> get_d3(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_d3(double[] value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<double[]> get_d4(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_d4(double[] value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<MultiDimArray> get_d5(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_d5(MultiDimArray value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<MultiDimArray> get_d6(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_d6(MultiDimArray value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<float> get_s1(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_s1(float value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<float[]> get_s2(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_s2(float[] value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<sbyte> get_i8_1(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_i8_1(sbyte value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<sbyte[]> get_i8_2(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_i8_2(sbyte[] value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<byte> get_u8_1(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_u8_1(byte value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<byte[]> get_u8_2(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_u8_2(byte[] value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<MultiDimArray> get_u8_3(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_u8_3(MultiDimArray value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<short> get_i16_1(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_i16_1(short value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<short[]> get_i16_2(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_i16_2(short[] value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<ushort> get_u16_1(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_u16_1(ushort value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<ushort[]> get_u16_2(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_u16_2(ushort[] value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<int> get_i32_1(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_i32_1(int value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<int[]> get_i32_2(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_i32_2(int[] value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<int[]> get_i32_huge(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_i32_huge(int[] value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<uint> get_u32_1(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_u32_1(uint value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<uint[]> get_u32_2(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_u32_2(uint[] value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<long> get_i64_1(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_i64_1(long value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<long[]> get_i64_2(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_i64_2(long[] value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<ulong> get_u64_1(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_u64_1(ulong value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<ulong[]> get_u64_2(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_u64_2(ulong[] value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<string> get_str1(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_str1(string value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<teststruct1> get_struct1(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_struct1(teststruct1 value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<teststruct2> get_struct2(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_struct2(teststruct2 value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<Dictionary<int, double>> get_is_d1(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_is_d1(Dictionary<int, double> value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<Dictionary<string, double>> get_is_d2(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_is_d2(Dictionary<string, double> value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<Dictionary<int, double[]>> get_is_d3(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_is_d3(Dictionary<int, double[]> value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<Dictionary<string, double[]>> get_is_d4(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_is_d4(Dictionary<string, double[]> value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<Dictionary<int, MultiDimArray>> get_is_d5(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_is_d5(Dictionary<int, MultiDimArray> value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<Dictionary<string, MultiDimArray>> get_is_d6(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_is_d6(Dictionary<string, MultiDimArray> value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<Dictionary<int, string>> get_is_str1(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_is_str1(Dictionary<int, string> value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<Dictionary<string, string>> get_is_str2(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_is_str2(Dictionary<string, string> value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<Dictionary<int, teststruct2>> get_is_struct1(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_is_struct1(Dictionary<int, teststruct2> value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<Dictionary<string, teststruct2>> get_is_struct2(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_is_struct2(Dictionary<string, teststruct2> value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<com.robotraconteur.testing.TestService2.ostruct2> get_struct3(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_struct3(com.robotraconteur.testing.TestService2.ostruct2 value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<List<double>> get_list_d1(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_list_d1(List<double> value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<List<double[]>> get_list_d3(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_list_d3(List<double[]> value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<List<MultiDimArray>> get_list_d5(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_list_d5(List<MultiDimArray> value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<List<string>> get_list_str1(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_list_str1(List<string> value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<List<teststruct2>> get_list_struct1(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_list_struct1(List<teststruct2> value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<object> get_var1(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_var1(object value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<Dictionary<int, object>> get_var2(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_var2(Dictionary<int, object> value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<object> get_var_num(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_var_num(object value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<object> get_var_str(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_var_str(object value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<object> get_var_struct(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_var_struct(object value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<object> get_var_vector(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_var_vector(object value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<object> get_var_dictionary(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_var_dictionary(object value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<object> get_var_list(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_var_list(object value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<object> get_var_multidimarray(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_var_multidimarray(object value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<double> get_errtest(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_errtest(double value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<teststruct1> get_nulltest(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_nulltest(teststruct1 value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task func1(CancellationToken rr_cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task func2(double d1, double d2, CancellationToken rr_cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<double> func3(double d1, double d2, CancellationToken rr_cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<int> meaning_of_life(CancellationToken rr_cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task func_errtest(CancellationToken rr_cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task func_errtest1(CancellationToken rr_cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task func_errtest2(CancellationToken rr_cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task func_errtest3(CancellationToken rr_cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task o6_op(int op, CancellationToken rr_cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task pipe_check_error(CancellationToken rr_cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task test_callbacks(CancellationToken rr_cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual event Action ev1;
        public virtual event Action<double, teststruct2> ev2;
        public virtual Task<sub1> get_o1(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<sub1> get_o2(int ind, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<sub1> get_o3(int ind, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<sub1> get_o4(string ind, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<com.robotraconteur.testing.TestService2.subobj> get_o5(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<object> get_o6(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Pipe<double[]> p1
        {
            get { throw new NotImplementedException(); }
            set { throw new InvalidOperationException(); }
        }
        public virtual Pipe<teststruct2> p2
        {
            get { throw new NotImplementedException(); }
            set { throw new InvalidOperationException(); }
        }
        public virtual Pipe<double> broadcastpipe
        {
            get { throw new NotImplementedException(); }
            set { throw new InvalidOperationException(); }
        }
        public virtual Callback<Func<CancellationToken, Task>> cb1
        {
            get { return rrvar_cb1; }
            set
            {
                if (rrvar_cb1 != null) throw new InvalidOperationException("Callback already set");
                rrvar_cb1 = value;
            }
        }
        public virtual Callback<Func<double, double, CancellationToken, Task>> cb2
        {
            get { return rrvar_cb2; }
            set
            {
                if (rrvar_cb2 != null) throw new InvalidOperationException("Callback already set");
                rrvar_cb2 = value;
            }
        }
        public virtual Callback<Func<double, double, CancellationToken, Task<double>>> cb3
        {
            get { return rrvar_cb3; }
            set
            {
                if (rrvar_cb3 != null) throw new InvalidOperationException("Callback already set");
                rrvar_cb3 = value;
            }
        }
        public virtual Callback<Func<CancellationToken, Task<int>>> cb_meaning_of_life
        {
            get { return rrvar_cb_meaning_of_life; }
            set
            {
                if (rrvar_cb_meaning_of_life != null) throw new InvalidOperationException("Callback already set");
                rrvar_cb_meaning_of_life = value;
            }
        }
        public virtual Callback<Func<CancellationToken, Task>> cb_errtest
        {
            get { return rrvar_cb_errtest; }
            set
            {
                if (rrvar_cb_errtest != null) throw new InvalidOperationException("Callback already set");
                rrvar_cb_errtest = value;
            }
        }
        public virtual Wire<double[]> w1
        {
            get { throw new NotImplementedException(); }
            set { throw new NotImplementedException(); }
        }
        public virtual Wire<teststruct2> w2
        {
            get { throw new NotImplementedException(); }
            set { throw new NotImplementedException(); }
        }
        public virtual Wire<MultiDimArray> w3
        {
            get { throw new NotImplementedException(); }
            set { throw new NotImplementedException(); }
        }
        public virtual Wire<double> broadcastwire
        {
            get { throw new NotImplementedException(); }
            set { throw new NotImplementedException(); }
        }
        public virtual ArrayMemory<double> m1
        {
            get { throw new NotImplementedException(); }
        }
        public virtual MultiDimArrayMemory<double> m2
        {
            get { throw new NotImplementedException(); }
        }
        public virtual MultiDimArrayMemory<byte> m3
        {
            get { throw new NotImplementedException(); }
        }
    }
    public class sub1_default_impl : sub1
    {
        public virtual Task<double[]> get_d1(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_d1(double[] value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<MultiDimArray> get_d2(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_d2(MultiDimArray value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<string> get_s_ind(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_s_ind(string value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<int> get_i_ind(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_i_ind(int value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<sub2> get_o2_1(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<sub2> get_o2_2(int ind, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<sub2> get_o2_3(string ind, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
    }
    public class sub2_default_impl : sub2
    {
        public virtual Task<string> get_s_ind(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_s_ind(string value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<int> get_i_ind(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_i_ind(int value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<string> get_data(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_data(string value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<sub3> get_o3_1(string ind, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
    }
    public class sub3_default_impl : sub3
    {
        public virtual Task<string> get_ind(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_ind(string value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<string> get_data2(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_data2(string value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<double> get_data3(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_data3(double value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<double> add(double d, CancellationToken rr_cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
    }
    public static class RRExtensions
    {
    }
}

namespace com.robotraconteur.testing.TestService2
{
    [RobotRaconteurServiceStruct("com.robotraconteur.testing.TestService2.ostruct2")]
    public class ostruct2
    {
        public double[] a1;
    }

    [RobotRaconteurServiceObjectInterface("com.robotraconteur.testing.TestService2.baseobj")]
    public interface baseobj
    {
        Task<double> get_d1(CancellationToken cancel = default(CancellationToken));
        Task set_d1(double value, CancellationToken cancel = default(CancellationToken));
        Task<double[]> get_d2(CancellationToken cancel = default(CancellationToken));
        Task set_d2(double[] value, CancellationToken cancel = default(CancellationToken));
        Task<double> func3(double d1, double d2, CancellationToken rr_cancel = default(CancellationToken));
        event Action ev1;
        Task<subobj> get_o5(CancellationToken rr_cancel = default(CancellationToken));
        Pipe<double[]> p1 { get; set; }
        Callback<Func<double, double, CancellationToken, Task>> cb2 { get; set; }
        Wire<double[]> w1 { get; set; }
        ArrayMemory<double> m1 { get; }
    }

    [RobotRaconteurServiceObjectInterface("com.robotraconteur.testing.TestService2.subobj")]
    public interface subobj
    {
        Task<double> add_val(double v, CancellationToken rr_cancel = default(CancellationToken));
    }

    public class testexception3 : RobotRaconteurRemoteException
    {
        public testexception3(string message) : base("com.robotraconteur.testing.TestService2.testexception3", message) { }
    };
}

namespace com.robotraconteur.testing.TestService2
{
    public class com__robotraconteur__testing__TestService2Factory : ServiceFactory
    {
        public override string DefString()
        {
            const string s = "service com.robotraconteur.testing.TestService2\n\noption version 0.8\n\nexception testexception3\n\nstruct ostruct2\nfield double[] a1\nend struct\n\n\nobject baseobj\nproperty double d1\nproperty double[] d2\n\nfunction double func3(double d1, double d2)\n\nevent ev1()\n\nobjref subobj o5\n\npipe double[] p1\n\ncallback void cb2(double d1, double d2)\n\nwire double[] w1\n\nmemory double[] m1\n\n\nend object\n\nobject subobj\n\nfunction double add_val(double v)\n\nend object\n";
            return s;
        }
        public override string GetServiceName() { return "com.robotraconteur.testing.TestService2"; }
        public ostruct2_stub ostruct2_stubentry;
        public com__robotraconteur__testing__TestService2Factory() : this(null, null) { }
        public com__robotraconteur__testing__TestService2Factory(RobotRaconteurNode node = null, ClientContext context = null) : base(node, context)
        {
            ostruct2_stubentry = new ostruct2_stub(this, this.node, this.context);
        }
        public override IStructureStub FindStructureStub(string objecttype)
        {
            if (objecttype == "ostruct2")
                return ostruct2_stubentry;
            throw new DataTypeException("Cannot find appropriate structure stub");
        }
        public override IPodStub FindPodStub(string objecttype)
        {
            throw new DataTypeException("Cannot find appropriate pod stub");
        }
        public override INamedArrayStub FindNamedArrayStub(string objecttype)
        {
            throw new DataTypeException("Cannot find appropriate pod stub");
        }
        public override ServiceStub CreateStub(string objecttype, string path, ClientContext context)
        {
            string objshort;
            if (CompareNamespace(objecttype, out objshort))
            {
                switch (objshort)
                {
                    case "baseobj":
                        return new baseobj_stub(path, context);
                    case "subobj":
                        return new subobj_stub(path, context);
                    default:
                        break;
                }
            }
            else
            {
                return base.CreateStub(objecttype, path, context);
            }
            throw new ServiceException("Could not create stub");
        }
        public override ServiceSkel CreateSkel(string path, object obj, ServerContext context)
        {
            string objtype = ServiceDefinitionUtil.FindObjectRRType(obj);
            string objshort;
            if (CompareNamespace(objtype, out objshort))
            {
                switch (objshort)
                {
                    case "baseobj":
                        return new baseobj_skel(path, (baseobj)obj, context);
                    case "subobj":
                        return new subobj_skel(path, (subobj)obj, context);
                    default:
                        break;
                }
            }
            else
            {
                return base.CreateSkel(path, obj, context);
            }
            throw new ServiceException("Could not create skel");
        }
        public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
        {
            if (rr_exp == null) return rr_exp;
            string rr_type = rr_exp.Error;
            if (!rr_type.Contains(".")) return rr_exp;
            string rr_stype;
            if (CompareNamespace(rr_type, out rr_stype))
            {
                if (rr_stype == "testexception3") return new testexception3(rr_exp.Message);
            }
            else
            {
                return base.DownCastException(rr_exp);
            }
            return rr_exp;
        }
    }

    public class ostruct2_stub : IStructureStub
    {
        public ostruct2_stub(com__robotraconteur__testing__TestService2Factory d, RobotRaconteurNode node, ClientContext context) { def = d; rr_node = node; rr_context = context; }
        private com__robotraconteur__testing__TestService2Factory def;
        private RobotRaconteurNode rr_node;
        private ClientContext rr_context;
        public MessageElementNestedElementList PackStructure(object s1)
        {
            List<MessageElement> m = new List<MessageElement>();
            if (s1 == null) return null;
            ostruct2 s = (ostruct2)s1;
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackArray<double>("a1", s.a1));
            return new MessageElementNestedElementList(DataTypes.structure_t, "com.robotraconteur.testing.TestService2.ostruct2", m);
        }
        public T UnpackStructure<T>(MessageElementNestedElementList m)
        {
            if (m == null) return default(T);
            ostruct2 s = new ostruct2();
            s.a1 = MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements, "a1"));
            T st; try { st = (T)((object)s); } catch (InvalidCastException) { throw new DataTypeMismatchException("Wrong structuretype"); }
            return st;
        }
    }

    public class baseobj_stub : ServiceStub, baseobj
    {
        private CallbackClient<Func<double, double, CancellationToken, Task>> rr_cb2;
        private Pipe<double[]> rr_p1;
        private Wire<double[]> rr_w1;
        private ArrayMemory<double> rr_m1;
        public baseobj_stub(string path, ClientContext c) : base(path, c)
        {
            rr_cb2 = new CallbackClient<Func<double, double, CancellationToken, Task>>("cb2");
            rr_p1 = new PipeClient<double[]>("p1", this);
            rr_w1 = new WireClient<double[]>("w1", this);
            rr_m1 = new ArrayMemoryClient<double>("m1", this, MemberDefinition_Direction.both);
        }
        public async Task<double> get_d1(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "d1");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return (MessageElementUtil.UnpackScalar<double>(me));
        }
        public async Task set_d1(double value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "d1");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackScalar<double>("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<double[]> get_d2(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "d2");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackArray<double>(me);
        }
        public async Task set_d2(double[] value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "d2");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackArray<double>("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<double> func3(double d1, double d2, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry rr_m = new MessageEntry(MessageEntryType.FunctionCallReq, "func3");
            MessageElementUtil.AddMessageElement(rr_m, MessageElementUtil.PackScalar<double>("d1", d1));
            MessageElementUtil.AddMessageElement(rr_m, MessageElementUtil.PackScalar<double>("d2", d2));
            MessageEntry rr_me = await ProcessRequest(rr_m, cancel).ConfigureAwait(false);
            return (MessageElementUtil.UnpackScalar<double>(rr_me.FindElement("return")));
        }
        public event Action ev1;
        protected override void DispatchEvent(MessageEntry rr_m)
        {
            switch (rr_m.MemberName)
            {
                case "ev1":
                    {
                        if (ev1 != null)
                        {
                            ev1();
                        }
                        return;
                    }
                default:
                    break;
            }
        }
        public async Task<subobj> get_o5(CancellationToken cancel = default(CancellationToken))
        {
            return (subobj)await FindObjRefTyped("o5", "com.robotraconteur.testing.TestService2.subobj", cancel).ConfigureAwait(false);
        }
        public Pipe<double[]> p1
        {
            get { return rr_p1; }
            set { throw new InvalidOperationException(); }
        }
        public Callback<Func<double, double, CancellationToken, Task>> cb2
        {
            get { return rr_cb2; }
            set { throw new InvalidOperationException(); }
        }
        public Wire<double[]> w1
        {
            get { return rr_w1; }
            set { throw new InvalidOperationException(); }
        }
        public ArrayMemory<double> m1
        {
            get { return rr_m1; }
        }
        protected override void DispatchPipeMessage(MessageEntry m)
        {
            switch (m.MemberName)
            {
                case "p1":
                    this.rr_p1.PipePacketReceived(m);
                    break;
                default:
                    throw new Exception();
            }
        }
        protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m)
        {
            string rr_ename = rr_m.MemberName;
            MessageEntry rr_mr = new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
            rr_mr.ServicePath = rr_m.ServicePath;
            rr_mr.RequestID = rr_m.RequestID;
            switch (rr_ename)
            {
                case "cb2":
                    {
                        double d1 = (MessageElementUtil.UnpackScalar<double>(rr_m.FindElement("d1")));
                        double d2 = (MessageElementUtil.UnpackScalar<double>(rr_m.FindElement("d2")));
                        await this.cb2.Function(d1, d2, default(CancellationToken)).ConfigureAwait(false);
                        MessageElementUtil.AddMessageElement(rr_mr, MessageElementUtil.PackScalar<int>("return", 0));
                        break;
                    }
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return rr_mr;
        }
        protected override void DispatchWireMessage(MessageEntry m)
        {
            switch (m.MemberName)
            {
                case "w1":
                    this.rr_w1.WirePacketReceived(m);
                    break;
                default:
                    throw new Exception();
            }
        }
    }
    public class subobj_stub : ServiceStub, subobj
    {
        public subobj_stub(string path, ClientContext c) : base(path, c)
        {
        }
        public async Task<double> add_val(double v, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry rr_m = new MessageEntry(MessageEntryType.FunctionCallReq, "add_val");
            MessageElementUtil.AddMessageElement(rr_m, MessageElementUtil.PackScalar<double>("v", v));
            MessageEntry rr_me = await ProcessRequest(rr_m, cancel).ConfigureAwait(false);
            return (MessageElementUtil.UnpackScalar<double>(rr_me.FindElement("return")));
        }
        protected override void DispatchEvent(MessageEntry rr_m)
        {
            switch (rr_m.MemberName)
            {
                default:
                    break;
            }
        }
        protected override void DispatchPipeMessage(MessageEntry m)
        {
            switch (m.MemberName)
            {
                default:
                    throw new Exception();
            }
        }
        protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m)
        {
            string rr_ename = rr_m.MemberName;
            MessageEntry rr_mr = new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
            rr_mr.ServicePath = rr_m.ServicePath;
            rr_mr.RequestID = rr_m.RequestID;
            switch (rr_ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return rr_mr;
        }
        protected override void DispatchWireMessage(MessageEntry m)
        {
            switch (m.MemberName)
            {
                default:
                    throw new Exception();
            }
        }
    }
    public class baseobj_skel : ServiceSkel
    {
        protected baseobj obj;
        public baseobj_skel(string p, baseobj o, ServerContext c) : base(p, o, c) { obj = (baseobj)o; }
        public override void ReleaseCastObject()
        {
        }
        public override async Task<MessageEntry> CallGetProperty(MessageEntry m)
        {
            string ename = m.MemberName;
            MessageEntry mr = new MessageEntry(MessageEntryType.PropertyGetRes, ename);
            switch (ename)
            {
                case "d1":
                    {
                        double ret = await obj.get_d1().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackScalar<double>("value", ret));
                        break;
                    }
                case "d2":
                    {
                        double[] ret = await obj.get_d2().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackArray<double>("value", ret));
                        break;
                    }
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return mr;
        }
        public override async Task<MessageEntry> CallSetProperty(MessageEntry m)
        {
            string ename = m.MemberName;
            MessageElement me = m.FindElement("value");
            MessageEntry mr = new MessageEntry(MessageEntryType.PropertySetRes, ename);
            switch (ename)
            {
                case "d1":
                    {
                        await obj.set_d1((MessageElementUtil.UnpackScalar<double>(me))).ConfigureAwait(false);
                        break;
                    }
                case "d2":
                    {
                        await obj.set_d2(MessageElementUtil.UnpackArray<double>(me)).ConfigureAwait(false);
                        break;
                    }
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return mr;
        }
        public override async Task<MessageEntry> CallFunction(MessageEntry rr_m)
        {
            string rr_ename = rr_m.MemberName;
            MessageEntry rr_mr = new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
            switch (rr_ename)
            {
                case "func3":
                    {
                        double d1 = (MessageElementUtil.UnpackScalar<double>(MessageElementUtil.FindElement(rr_m, "d1")));
                        double d2 = (MessageElementUtil.UnpackScalar<double>(MessageElementUtil.FindElement(rr_m, "d2")));
                        double rr_ret = await this.obj.func3(d1, d2, default(CancellationToken)).ConfigureAwait(false);
                        rr_mr.AddElement(MessageElementUtil.PackScalar<double>("return", rr_ret));
                        break;
                    }
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return rr_mr;
        }
        public override async Task<object> GetSubObj(string name, string ind)
        {
            switch (name)
            {
                case "o5":
                    {
                        return await obj.get_o5().ConfigureAwait(false);
                    }
                default:
                    break;
            }
            throw new MemberNotFoundException("");
        }
        public override void RegisterEvents(object rrobj1)
        {
            obj = (baseobj)rrobj1;
            obj.ev1 += rr_ev1;
        }
        public override void UnregisterEvents(object rrobj1)
        {
            obj = (baseobj)rrobj1;
            obj.ev1 -= rr_ev1;
        }
        public void rr_ev1()
        {
            MessageEntry rr_mm = new MessageEntry(MessageEntryType.EventReq, "ev1");
            this.SendEvent(rr_mm);
        }
        public override object GetCallbackFunction(uint rr_endpoint, string rr_membername)
        {
            switch (rr_membername)
            {
                case "cb2":
                    {
                        return new Func<double, double, CancellationToken, Task>(async delegate (double d1, double d2, CancellationToken rr_cancel)
                        {
                            MessageEntry rr_mm = new MessageEntry(MessageEntryType.CallbackCallReq, "cb2");
                            rr_mm.ServicePath = m_ServicePath;
                            MessageElementUtil.AddMessageElement(rr_mm, MessageElementUtil.PackScalar<double>("d1", d1));
                            MessageElementUtil.AddMessageElement(rr_mm, MessageElementUtil.PackScalar<double>("d2", d2));
                            MessageEntry rr_mr = await RRContext.ProcessCallbackRequest(rr_mm, rr_endpoint, rr_cancel).ConfigureAwait(false);
                            MessageElement rr_me = rr_mr.FindElement("return");
                        });
                    }
                default:
                    break;
            }
            throw new MemberNotFoundException("Member not found");
        }
        private PipeServer<double[]> rr_p1;
        private WireServer<double[]> rr_w1;
        private bool rr_InitPipeServersRun = false;
        public override void InitPipeServers(object o)
        {
            if (this.rr_InitPipeServersRun) return;
            this.rr_InitPipeServersRun = true;
            baseobj castobj = (baseobj)o;
            this.rr_p1 = new PipeServer<double[]>("p1", this);
            this.rr_w1 = new WireServer<double[]>("w1", this);
            castobj.p1 = this.rr_p1;
            castobj.w1 = this.rr_w1;
        }
        public override void InitCallbackServers(object rrobj1)
        {
            obj = (baseobj)rrobj1;
            obj.cb2 = new CallbackServer<Func<double, double, CancellationToken, Task>>("cb2", this);
        }
        public override async Task<MessageEntry> CallPipeFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                case "p1":
                    return await this.rr_p1.PipeCommand(m, e).ConfigureAwait(false);
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override async Task<MessageEntry> CallWireFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                case "w1":
                    return await this.rr_w1.WireCommand(m, e).ConfigureAwait(false);
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
        {
            switch (m.MemberName)
            {
                case "p1":
                    this.rr_p1.PipePacketReceived(m, e);
                    break;
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override void DispatchWireMessage(MessageEntry m, Endpoint e)
        {
            switch (m.MemberName)
            {
                case "w1":
                    this.rr_w1.WirePacketReceived(m, e);
                    break;
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                case "m1":
                    return await (new ArrayMemoryServiceSkel<double>("m1", this, MemberDefinition_Direction.both)).CallMemoryFunction(m, e, obj.m1).ConfigureAwait(false);
                    break;
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override bool IsRequestNoLock(MessageEntry m)
        {
            return false;
        }
    }
    public class subobj_skel : ServiceSkel
    {
        protected subobj obj;
        public subobj_skel(string p, subobj o, ServerContext c) : base(p, o, c) { obj = (subobj)o; }
        public override void ReleaseCastObject()
        {
        }
        public override async Task<MessageEntry> CallGetProperty(MessageEntry m)
        {
            string ename = m.MemberName;
            MessageEntry mr = new MessageEntry(MessageEntryType.PropertyGetRes, ename);
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return mr;
        }
        public override async Task<MessageEntry> CallSetProperty(MessageEntry m)
        {
            string ename = m.MemberName;
            MessageElement me = m.FindElement("value");
            MessageEntry mr = new MessageEntry(MessageEntryType.PropertySetRes, ename);
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return mr;
        }
        public override async Task<MessageEntry> CallFunction(MessageEntry rr_m)
        {
            string rr_ename = rr_m.MemberName;
            MessageEntry rr_mr = new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
            switch (rr_ename)
            {
                case "add_val":
                    {
                        double v = (MessageElementUtil.UnpackScalar<double>(MessageElementUtil.FindElement(rr_m, "v")));
                        double rr_ret = await this.obj.add_val(v, default(CancellationToken)).ConfigureAwait(false);
                        rr_mr.AddElement(MessageElementUtil.PackScalar<double>("return", rr_ret));
                        break;
                    }
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return rr_mr;
        }
        public override async Task<object> GetSubObj(string name, string ind)
        {
            switch (name)
            {
                default:
                    break;
            }
            throw new MemberNotFoundException("");
        }
        public override void RegisterEvents(object rrobj1)
        {
            obj = (subobj)rrobj1;
        }
        public override void UnregisterEvents(object rrobj1)
        {
            obj = (subobj)rrobj1;
        }
        public override object GetCallbackFunction(uint rr_endpoint, string rr_membername)
        {
            switch (rr_membername)
            {
                default:
                    break;
            }
            throw new MemberNotFoundException("Member not found");
        }
        private bool rr_InitPipeServersRun = false;
        public override void InitPipeServers(object o)
        {
            if (this.rr_InitPipeServersRun) return;
            this.rr_InitPipeServersRun = true;
            subobj castobj = (subobj)o;
        }
        public override void InitCallbackServers(object rrobj1)
        {
            obj = (subobj)rrobj1;
        }
        public override async Task<MessageEntry> CallPipeFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override async Task<MessageEntry> CallWireFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
        {
            switch (m.MemberName)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override void DispatchWireMessage(MessageEntry m, Endpoint e)
        {
            switch (m.MemberName)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override bool IsRequestNoLock(MessageEntry m)
        {
            return false;
        }
    }
    public class baseobj_default_impl : baseobj
    {
        protected Callback<Func<double, double, CancellationToken, Task>> rrvar_cb2;
        public virtual Task<double> get_d1(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_d1(double value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<double[]> get_d2(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_d2(double[] value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<double> func3(double d1, double d2, CancellationToken rr_cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual event Action ev1;
        public virtual Task<subobj> get_o5(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Pipe<double[]> p1
        {
            get { throw new NotImplementedException(); }
            set { throw new InvalidOperationException(); }
        }
        public virtual Callback<Func<double, double, CancellationToken, Task>> cb2
        {
            get { return rrvar_cb2; }
            set
            {
                if (rrvar_cb2 != null) throw new InvalidOperationException("Callback already set");
                rrvar_cb2 = value;
            }
        }
        public virtual Wire<double[]> w1
        {
            get { throw new NotImplementedException(); }
            set { throw new NotImplementedException(); }
        }
        public virtual ArrayMemory<double> m1
        {
            get { throw new NotImplementedException(); }
        }
    }
    public class subobj_default_impl : subobj
    {
        public virtual Task<double> add_val(double v, CancellationToken rr_cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
    }
    public static class RRExtensions
    {
    }
}

namespace com.robotraconteur.testing.TestService3
{
    [RobotRaconteurServiceStruct("com.robotraconteur.testing.TestService3.teststruct3")]
    public class teststruct3
    {
        public testpod1 s1;
        public testpod1[] s2;
        public testpod1[] s3;
        public testpod1[] s4;
        public PodMultiDimArray s5;
        public PodMultiDimArray s6;
        public List<testpod1> s7;
        public List<testpod1[]> s8;
        public List<PodMultiDimArray> s9;
        public object s10;
        public object s11;
        public object s12;
        public object s13;
        public object s14;
        public object s15;
        public transform t1;
        public transform[] t2;
        public NamedMultiDimArray t3;
        public object t4;
        public object t5;
        public List<transform> t6;
        public List<transform[]> t7;
        public List<NamedMultiDimArray> t8;
        public object t9;
        public object t10;
        public object t11;
    }

    [RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.testing.TestService3.vector3", typeof(double), 3)]
    public struct vector3
    {
        public double x;
        public double y;
        public double z;
        public double[] GetNumericArray()
        {
            var a = new ArraySegment<double>(new double[3]);
            GetNumericArray(ref a);
            return a.Array;
        }
        public void GetNumericArray(ref ArraySegment<double> a)
        {
            if (a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
            a.Array[a.Offset + 0] = this.x;
            a.Array[a.Offset + 1] = this.y;
            a.Array[a.Offset + 2] = this.z;
        }
        public void AssignFromNumericArray(ref ArraySegment<double> a)
        {
            if (a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
            this.x = a.Array[a.Offset + 0];
            this.y = a.Array[a.Offset + 1];
            this.z = a.Array[a.Offset + 2];
        }
    }

    [RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.testing.TestService3.quaternion", typeof(double), 4)]
    public struct quaternion
    {
        public double q0;
        public double q1;
        public double q2;
        public double q3;
        public double[] GetNumericArray()
        {
            var a = new ArraySegment<double>(new double[4]);
            GetNumericArray(ref a);
            return a.Array;
        }
        public void GetNumericArray(ref ArraySegment<double> a)
        {
            if (a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
            a.Array[a.Offset + 0] = this.q0;
            a.Array[a.Offset + 1] = this.q1;
            a.Array[a.Offset + 2] = this.q2;
            a.Array[a.Offset + 3] = this.q3;
        }
        public void AssignFromNumericArray(ref ArraySegment<double> a)
        {
            if (a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
            this.q0 = a.Array[a.Offset + 0];
            this.q1 = a.Array[a.Offset + 1];
            this.q2 = a.Array[a.Offset + 2];
            this.q3 = a.Array[a.Offset + 3];
        }
    }

    [RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.testing.TestService3.transform", typeof(double), 7)]
    public struct transform
    {
        public quaternion rotation;
        public vector3 translation;
        public double[] GetNumericArray()
        {
            var a = new ArraySegment<double>(new double[7]);
            GetNumericArray(ref a);
            return a.Array;
        }
        public void GetNumericArray(ref ArraySegment<double> a)
        {
            if (a.Count < 7) throw new ArgumentException("ArraySegment invalid length");
            var a0 = new ArraySegment<double>(a.Array, a.Offset + 0, 4);
            this.rotation.GetNumericArray(ref a0);
            var a4 = new ArraySegment<double>(a.Array, a.Offset + 4, 3);
            this.translation.GetNumericArray(ref a4);
        }
        public void AssignFromNumericArray(ref ArraySegment<double> a)
        {
            if (a.Count < 7) throw new ArgumentException("ArraySegment invalid length");
            var a0 = new ArraySegment<double>(a.Array, a.Offset + 0, 4);
            this.rotation.AssignFromNumericArray(ref a0);
            var a4 = new ArraySegment<double>(a.Array, a.Offset + 4, 3);
            this.translation.AssignFromNumericArray(ref a4);
        }
    }

    [RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.testing.TestService3.pixel", typeof(byte), 3)]
    public struct pixel
    {
        public byte r;
        public byte b;
        public byte g;
        public byte[] GetNumericArray()
        {
            var a = new ArraySegment<byte>(new byte[3]);
            GetNumericArray(ref a);
            return a.Array;
        }
        public void GetNumericArray(ref ArraySegment<byte> a)
        {
            if (a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
            a.Array[a.Offset + 0] = this.r;
            a.Array[a.Offset + 1] = this.b;
            a.Array[a.Offset + 2] = this.g;
        }
        public void AssignFromNumericArray(ref ArraySegment<byte> a)
        {
            if (a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
            this.r = a.Array[a.Offset + 0];
            this.b = a.Array[a.Offset + 1];
            this.g = a.Array[a.Offset + 2];
        }
    }

    [RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.testing.TestService3.pixel2", typeof(byte), 31)]
    public struct pixel2
    {
        public byte c;
        public pixel d;
        public pixel e;
        public pixel[] f;
        public pixel g;
        public byte[] GetNumericArray()
        {
            var a = new ArraySegment<byte>(new byte[31]);
            GetNumericArray(ref a);
            return a.Array;
        }
        public void GetNumericArray(ref ArraySegment<byte> a)
        {
            if (a.Count < 31) throw new ArgumentException("ArraySegment invalid length");
            a.Array[a.Offset + 0] = this.c;
            var a1 = new ArraySegment<byte>(a.Array, a.Offset + 1, 3);
            this.d.GetNumericArray(ref a1);
            var a4 = new ArraySegment<byte>(a.Array, a.Offset + 4, 3);
            this.e.GetNumericArray(ref a4);
            var a7 = new ArraySegment<byte>(a.Array, a.Offset + 7, 21);
            this.f.GetNumericArray(ref a7);
            var a28 = new ArraySegment<byte>(a.Array, a.Offset + 28, 3);
            this.g.GetNumericArray(ref a28);
        }
        public void AssignFromNumericArray(ref ArraySegment<byte> a)
        {
            if (a.Count < 31) throw new ArgumentException("ArraySegment invalid length");
            this.c = a.Array[a.Offset + 0];
            var a1 = new ArraySegment<byte>(a.Array, a.Offset + 1, 3);
            this.d.AssignFromNumericArray(ref a1);
            var a4 = new ArraySegment<byte>(a.Array, a.Offset + 4, 3);
            this.e.AssignFromNumericArray(ref a4);
            var a7 = new ArraySegment<byte>(a.Array, a.Offset + 7, 21);
            this.f.AssignFromNumericArray(ref a7);
            var a28 = new ArraySegment<byte>(a.Array, a.Offset + 28, 3);
            this.g.AssignFromNumericArray(ref a28);
        }
    }

    [RobotRaconteurServicePod("com.robotraconteur.testing.TestService3.testpod1")]
    public struct testpod1
    {
        public double d1;
        public double[] d2;
        public double[] d3;
        public double[] d4;
        public testpod2 s1;
        public testpod2[] s2;
        public testpod2[] s3;
        public testpod2[] s4;
        public transform t1;
        public transform[] t2;
        public transform[] t3;
        public transform[] t4;
    }

    [RobotRaconteurServicePod("com.robotraconteur.testing.TestService3.testpod2")]
    public struct testpod2
    {
        public sbyte i1;
        public sbyte[] i2;
        public sbyte[] i3;
    }

    [RobotRaconteurServiceObjectInterface("com.robotraconteur.testing.TestService3.testroot3")]
    public interface testroot3
    {
        Task<int> get_readme(CancellationToken cancel = default(CancellationToken));
        Task set_readme(int value, CancellationToken cancel = default(CancellationToken));
        Task<int> get_writeme(CancellationToken cancel = default(CancellationToken));
        Task set_writeme(int value, CancellationToken cancel = default(CancellationToken));
        Task<int> get_unknown_modifier(CancellationToken cancel = default(CancellationToken));
        Task set_unknown_modifier(int value, CancellationToken cancel = default(CancellationToken));
        Task<testenum1> get_testenum1_prop(CancellationToken cancel = default(CancellationToken));
        Task set_testenum1_prop(testenum1 value, CancellationToken cancel = default(CancellationToken));
        Task<testpod1> get_testpod1_prop(CancellationToken cancel = default(CancellationToken));
        Task set_testpod1_prop(testpod1 value, CancellationToken cancel = default(CancellationToken));
        Task<teststruct3> get_teststruct3_prop(CancellationToken cancel = default(CancellationToken));
        Task set_teststruct3_prop(teststruct3 value, CancellationToken cancel = default(CancellationToken));
        Task<List<double[]>> get_d1(CancellationToken cancel = default(CancellationToken));
        Task set_d1(List<double[]> value, CancellationToken cancel = default(CancellationToken));
        Task<List<double[]>> get_d2(CancellationToken cancel = default(CancellationToken));
        Task set_d2(List<double[]> value, CancellationToken cancel = default(CancellationToken));
        Task<Dictionary<int, double[]>> get_d3(CancellationToken cancel = default(CancellationToken));
        Task set_d3(Dictionary<int, double[]> value, CancellationToken cancel = default(CancellationToken));
        Task<Dictionary<int, double[]>> get_d4(CancellationToken cancel = default(CancellationToken));
        Task set_d4(Dictionary<int, double[]> value, CancellationToken cancel = default(CancellationToken));
        Task<List<MultiDimArray>> get_d5(CancellationToken cancel = default(CancellationToken));
        Task set_d5(List<MultiDimArray> value, CancellationToken cancel = default(CancellationToken));
        Task<Dictionary<int, MultiDimArray>> get_d6(CancellationToken cancel = default(CancellationToken));
        Task set_d6(Dictionary<int, MultiDimArray> value, CancellationToken cancel = default(CancellationToken));
        Task<vector3> get_testnamedarray1(CancellationToken cancel = default(CancellationToken));
        Task set_testnamedarray1(vector3 value, CancellationToken cancel = default(CancellationToken));
        Task<transform> get_testnamedarray2(CancellationToken cancel = default(CancellationToken));
        Task set_testnamedarray2(transform value, CancellationToken cancel = default(CancellationToken));
        Task<transform[]> get_testnamedarray3(CancellationToken cancel = default(CancellationToken));
        Task set_testnamedarray3(transform[] value, CancellationToken cancel = default(CancellationToken));
        Task<NamedMultiDimArray> get_testnamedarray4(CancellationToken cancel = default(CancellationToken));
        Task set_testnamedarray4(NamedMultiDimArray value, CancellationToken cancel = default(CancellationToken));
        Task<NamedMultiDimArray> get_testnamedarray5(CancellationToken cancel = default(CancellationToken));
        Task set_testnamedarray5(NamedMultiDimArray value, CancellationToken cancel = default(CancellationToken));
        Task<CDouble> get_c1(CancellationToken cancel = default(CancellationToken));
        Task set_c1(CDouble value, CancellationToken cancel = default(CancellationToken));
        Task<CDouble[]> get_c2(CancellationToken cancel = default(CancellationToken));
        Task set_c2(CDouble[] value, CancellationToken cancel = default(CancellationToken));
        Task<MultiDimArray> get_c3(CancellationToken cancel = default(CancellationToken));
        Task set_c3(MultiDimArray value, CancellationToken cancel = default(CancellationToken));
        Task<List<CDouble>> get_c4(CancellationToken cancel = default(CancellationToken));
        Task set_c4(List<CDouble> value, CancellationToken cancel = default(CancellationToken));
        Task<List<CDouble[]>> get_c5(CancellationToken cancel = default(CancellationToken));
        Task set_c5(List<CDouble[]> value, CancellationToken cancel = default(CancellationToken));
        Task<List<MultiDimArray>> get_c6(CancellationToken cancel = default(CancellationToken));
        Task set_c6(List<MultiDimArray> value, CancellationToken cancel = default(CancellationToken));
        Task<CSingle> get_c7(CancellationToken cancel = default(CancellationToken));
        Task set_c7(CSingle value, CancellationToken cancel = default(CancellationToken));
        Task<CSingle[]> get_c8(CancellationToken cancel = default(CancellationToken));
        Task set_c8(CSingle[] value, CancellationToken cancel = default(CancellationToken));
        Task<MultiDimArray> get_c9(CancellationToken cancel = default(CancellationToken));
        Task set_c9(MultiDimArray value, CancellationToken cancel = default(CancellationToken));
        Task<List<CSingle>> get_c10(CancellationToken cancel = default(CancellationToken));
        Task set_c10(List<CSingle> value, CancellationToken cancel = default(CancellationToken));
        Task<List<CSingle[]>> get_c11(CancellationToken cancel = default(CancellationToken));
        Task set_c11(List<CSingle[]> value, CancellationToken cancel = default(CancellationToken));
        Task<List<MultiDimArray>> get_c12(CancellationToken cancel = default(CancellationToken));
        Task set_c12(List<MultiDimArray> value, CancellationToken cancel = default(CancellationToken));
        Task<bool> get_b1(CancellationToken cancel = default(CancellationToken));
        Task set_b1(bool value, CancellationToken cancel = default(CancellationToken));
        Task<bool[]> get_b2(CancellationToken cancel = default(CancellationToken));
        Task set_b2(bool[] value, CancellationToken cancel = default(CancellationToken));
        Task<MultiDimArray> get_b3(CancellationToken cancel = default(CancellationToken));
        Task set_b3(MultiDimArray value, CancellationToken cancel = default(CancellationToken));
        Task<List<bool>> get_b4(CancellationToken cancel = default(CancellationToken));
        Task set_b4(List<bool> value, CancellationToken cancel = default(CancellationToken));
        Task<List<bool[]>> get_b5(CancellationToken cancel = default(CancellationToken));
        Task set_b5(List<bool[]> value, CancellationToken cancel = default(CancellationToken));
        Task<List<MultiDimArray>> get_b6(CancellationToken cancel = default(CancellationToken));
        Task set_b6(List<MultiDimArray> value, CancellationToken cancel = default(CancellationToken));
        Task testpod1_func1(testpod1 s, CancellationToken rr_cancel = default(CancellationToken));
        Task<testpod1> testpod1_func2(CancellationToken rr_cancel = default(CancellationToken));
        Task<Generator2<double>> gen_func1(CancellationToken rr_cancel = default(CancellationToken));
        Task<Generator2<byte[]>> gen_func2(string name, CancellationToken rr_cancel = default(CancellationToken));
        Task<Generator3<byte[]>> gen_func3(string name, CancellationToken rr_cancel = default(CancellationToken));
        Task<Generator1<byte[], byte[]>> gen_func4(CancellationToken rr_cancel = default(CancellationToken));
        Task<Generator1<com.robotraconteur.testing.TestService1.teststruct2, com.robotraconteur.testing.TestService1.teststruct2>> gen_func5(CancellationToken rr_cancel = default(CancellationToken));
        Task test_exception_params1(CancellationToken rr_cancel = default(CancellationToken));
        Task test_exception_params2(CancellationToken rr_cancel = default(CancellationToken));
        Task<obj4> get_o4(CancellationToken rr_cancel = default(CancellationToken));
        Task<obj5> get_nolock_test(CancellationToken rr_cancel = default(CancellationToken));
        Pipe<int> unreliable1 { get; set; }
        Pipe<int[]> p1 { get; set; }
        Pipe<int[]> p2 { get; set; }
        Pipe<MultiDimArray> p3 { get; set; }
        Wire<int> peekwire { get; set; }
        Wire<int> pokewire { get; set; }
        Wire<int[]> w1 { get; set; }
        Wire<int[]> w2 { get; set; }
        Wire<MultiDimArray> w3 { get; set; }
        ArrayMemory<double> readmem { get; }
        PodArrayMemory<testpod2> pod_m1 { get; }
        PodMultiDimArrayMemory<testpod2> pod_m2 { get; }
        NamedArrayMemory<transform> namedarray_m1 { get; }
        NamedMultiDimArrayMemory<transform> namedarray_m2 { get; }
        ArrayMemory<CDouble> c_m1 { get; }
        MultiDimArrayMemory<CDouble> c_m2 { get; }
        ArrayMemory<CDouble> c_m3 { get; }
        MultiDimArrayMemory<CDouble> c_m4 { get; }
        ArrayMemory<bool> c_m5 { get; }
        MultiDimArrayMemory<bool> c_m6 { get; }
    }

    [RobotRaconteurServiceObjectInterface("com.robotraconteur.testing.TestService3.obj1")]
    public interface obj1
    {
        Task<double[]> get_d1(CancellationToken cancel = default(CancellationToken));
        Task set_d1(double[] value, CancellationToken cancel = default(CancellationToken));
    }

    [RobotRaconteurServiceObjectInterface("com.robotraconteur.testing.TestService3.obj2")]
    public interface obj2 : obj1
    {
        Task<double[]> get_d1(CancellationToken cancel = default(CancellationToken));
        Task set_d1(double[] value, CancellationToken cancel = default(CancellationToken));
    }

    [RobotRaconteurServiceObjectInterface("com.robotraconteur.testing.TestService3.obj3")]
    public interface obj3 : obj1, obj2
    {
        Task<double[]> get_d1(CancellationToken cancel = default(CancellationToken));
        Task set_d1(double[] value, CancellationToken cancel = default(CancellationToken));
    }

    [RobotRaconteurServiceObjectInterface("com.robotraconteur.testing.TestService3.obj4")]
    public interface obj4 : com.robotraconteur.testing.TestService1.sub2
    {
        Task<string> get_s_ind(CancellationToken cancel = default(CancellationToken));
        Task set_s_ind(string value, CancellationToken cancel = default(CancellationToken));
        Task<int> get_i_ind(CancellationToken cancel = default(CancellationToken));
        Task set_i_ind(int value, CancellationToken cancel = default(CancellationToken));
        Task<string> get_data(CancellationToken cancel = default(CancellationToken));
        Task set_data(string value, CancellationToken cancel = default(CancellationToken));
        Task<com.robotraconteur.testing.TestService1.sub3> get_o3_1(string ind, CancellationToken rr_cancel = default(CancellationToken));
    }

    [RobotRaconteurServiceObjectInterface("com.robotraconteur.testing.TestService3.obj5")]
    public interface obj5
    {
        Task<double> get_p1(CancellationToken cancel = default(CancellationToken));
        Task set_p1(double value, CancellationToken cancel = default(CancellationToken));
        Task<double> get_p2(CancellationToken cancel = default(CancellationToken));
        Task set_p2(double value, CancellationToken cancel = default(CancellationToken));
        Task<double> get_p3(CancellationToken cancel = default(CancellationToken));
        Task set_p3(double value, CancellationToken cancel = default(CancellationToken));
        Task<int> f1(CancellationToken rr_cancel = default(CancellationToken));
        Task<int> f2(CancellationToken rr_cancel = default(CancellationToken));
        Pipe<int> q1 { get; set; }
        Pipe<int> q2 { get; set; }
        Wire<int> w1 { get; set; }
        Wire<int> w2 { get; set; }
        ArrayMemory<int> m1 { get; }
        ArrayMemory<int> m2 { get; }
        ArrayMemory<int> m3 { get; }
    }

    public static class com__robotraconteur__testing__TestService3Constants
    {
        public const string strconst = "This is a\n \"string constant\" \\/\b\f \r＀ tabme\ttabme\n smile! 㷘Ǟ";
        public const int int32const = 3856384;
        public static readonly int[] int32const_array = { 182476, 56483, -2947 };
        public const int int32hexconst = 0x082bc7;
        public const int int32hexconst2 = -0x7264c17;
        public static readonly int[] int32hexconst_array = { 0x8274ec, -0x0001, +0xABCDEF, 0xabcdef, 0x012345, 0x6789 };
        public static readonly double[] doubleconst_array = { 1.5847, 3.14, -548e3, 3452.67e2, 485e-21 };
        public static class structconst { public const string strconst = "This is a\n \"string constant\" \\/\b\f \r＀ tabme\ttabme\n smile! 㷘Ǟ"; public static readonly int[] int32const_array = { 182476, 56483, -2947 }; }
        public static class structconst2 { public static class structconst { public const string strconst = "This is a\n \"string constant\" \\/\b\f \r＀ tabme\ttabme\n smile! 㷘Ǟ"; public static readonly int[] int32const_array = { 182476, 56483, -2947 }; } public const int int32const = 3856384; }
        public static class testroot3
        {
            public const string unknown_modifier_hello = "hello world!";
        }
    }
    public enum testenum1
    {
        value1 = 0,
        value2 = 1,
        value3 = 2,
        anothervalue = -1,
        anothervalue2 = -2,
        anothervalue3 = -3,
        hexval1 = 0x10,
        hexval2 = 0x11,
        neghexval1 = -2147483643,
        neghexval2 = -2147483642,
        more_values = -2147483641
    };
    public class test_exception4 : RobotRaconteurRemoteException
    {
        public test_exception4(string message) : base("com.robotraconteur.testing.TestService3.test_exception4", message) { }
    };
}

namespace com.robotraconteur.testing.TestService3
{
    public class com__robotraconteur__testing__TestService3Factory : ServiceFactory
    {
        public override string DefString()
        {
            const string s = "service com.robotraconteur.testing.TestService3\n\nstdver 0.9.2\n#option version 0.9.0\n\nimport com.robotraconteur.testing.TestService1\nusing  com.robotraconteur.testing.TestService1.testroot\nusing  com.robotraconteur.testing.TestService1.teststruct1\nusing  com.robotraconteur.testing.TestService1.teststruct2\nusing  com.robotraconteur.testing.TestService1.testexception1\nusing  com.robotraconteur.testing.TestService1.sub2\nusing  com.robotraconteur.testing.TestService1.sub3\n\nenum testenum1\nvalue1 = 0,	value2,	value3,	anothervalue = -1,\nanothervalue2 = -2,\nanothervalue3 = -3,\nhexval1 = 0x10,\nhexval2,\nneghexval1 = -0x7ffffffb,\nneghexval2,\nmore_values\nend\n\nconstant string strconst \"This is a\\n \\\"string constant\\\" \\\\\\/\\b\\f \\r\\u00FF tabme\\ttabme\\n smile! \\ud83d\\udE01\"\nconstant int32 int32const 3856384\nconstant int32[] int32const_array {182476, 56483, -2947}\nconstant int32 int32hexconst 0x082bc7\nconstant int32 int32hexconst2 -0x7264c17\nconstant int32[] int32hexconst_array { 0x8274ec, -0x0001, +0xABCDEF, 0xabcdef, 0x012345, 0x6789 }\nconstant double[] doubleconst_array {1.5847, 3.14, -548e3, 3452.67e2, 485e-21}\nconstant struct structconst {field1: strconst, field2: int32const_array}\nconstant struct structconst2 {field3: structconst, field4: int32const}\n\nexception test_exception4\n\nnamedarray vector3\nfield double x\nfield double y\nfield double z\nend\n\nnamedarray quaternion\nfield double q0\nfield double q1\nfield double q2\nfield double q3\nend\n\nnamedarray transform\nfield quaternion rotation\nfield vector3 translation\nend\n\nnamedarray pixel\nfield uint8 r\nfield uint8 b\nfield uint8 g\nend\n\nnamedarray pixel2\nfield uint8 c\nfield pixel d\nfield pixel e\nfield pixel[7] f\nfield pixel g\nend\n\npod testpod1\nfield double d1\nfield double[6] d2\nfield double[6-] d3\nfield double[3,3] d4\nfield testpod2 s1\nfield testpod2[8] s2\nfield testpod2[9-] s3\nfield testpod2[2,4] s4\nfield transform t1\nfield transform[4] t2\nfield transform[15-] t3\nfield transform[2,4] t4\nend\n\npod testpod2\nfield int8 i1\nfield int8[15] i2\nfield int8[17-] i3\nend\n\nstruct teststruct3\nfield testpod1 s1\nfield testpod1[] s2\nfield testpod1[11] s3\nfield testpod1[16-] s4\nfield testpod1[3,3] s5\nfield testpod1[*] s6\nfield testpod1{list} s7\nfield testpod1[]{list} s8\nfield testpod1[*]{list} s9\nfield varvalue s10\nfield varvalue s11\nfield varvalue s12\nfield varvalue s13\nfield varvalue s14\nfield varvalue s15\nfield transform t1\nfield transform[4] t2\nfield transform[2,4] t3\nfield varvalue t4\nfield varvalue t5\nfield transform{list} t6\nfield transform[4]{list} t7\nfield transform[2,4]{list} t8\nfield varvalue t9\nfield varvalue t10\nfield varvalue t11\n\nend\n\nobject testroot3\n\nconstant string unknown_modifier_hello \"hello world!\"\n\nproperty int32 readme [readonly]\nproperty int32 writeme [writeonly]\n\npipe int32 unreliable1 [unreliable,readonly]\n\nwire int32 peekwire [readonly]\nwire int32 \\\npokewire [writeonly]\nproperty int32 unknown_modifier [unknown, unknown_3(23, 45.8e-5, unknown_modifier_hello)]\n\nmemory double[] readmem [readonly]\n\nobjref obj4 o4\n\nproperty testenum1 testenum1_prop\n\nproperty testpod1 testpod1_prop\nfunction void testpod1_func1(testpod1 s)\nfunction testpod1 testpod1_func2()\n\nproperty teststruct3 teststruct3_prop\n\nmemory testpod2[] pod_m1\nmemory testpod2[*] pod_m2\n\nfunction double{generator} gen_func1()\nfunction uint8[]{generator} gen_func2(string name)\nfunction void gen_func3(string name, uint8[]{generator} in)\nfunction uint8[]{generator} gen_func4(uint8[]{generator} in)\nfunction teststruct2{generator} gen_func5(teststruct2{generator} in)\n\n#extra tests for fixed length arrays\nproperty double[6]{list} d1\nproperty double[6-]{list} d2\nproperty double[6]{int32} d3\nproperty double[6-]{int32} d4\nproperty double[3,3]{list} d5\nproperty double[3,3]{int32} d6\n\n#Test pipe and wire verification\npipe int32[3] p1\npipe int32[3-] p2\npipe int32[2,2] p3\nwire int32[6] w1\nwire int32[6-] w2\nwire int32[3,2] w3\n\n#namedarray test\nproperty vector3 testnamedarray1\nproperty transform testnamedarray2\nproperty transform[10-] testnamedarray3\nproperty transform[*] testnamedarray4\nproperty transform[3,2] testnamedarray5\n\nmemory transform[] namedarray_m1\nmemory transform[*] namedarray_m2\n\n#new primitive types test\nproperty cdouble c1\nproperty cdouble[] c2\nproperty cdouble[*] c3\nproperty cdouble{list} c4\nproperty cdouble[]{list} c5\nproperty cdouble[*]{list} c6\nproperty csingle c7\nproperty csingle[] c8\nproperty csingle[*] c9\nproperty csingle{list} c10\nproperty csingle[]{list} c11\nproperty csingle[*]{list} c12\n\nproperty bool b1\nproperty bool[] b2\nproperty bool[*] b3\nproperty bool{list} b4\nproperty bool[]{list} b5\nproperty bool[*]{list} b6\n\nmemory cdouble[] c_m1\nmemory cdouble[*] c_m2\nmemory cdouble[] c_m3\nmemory cdouble[*] c_m4\nmemory bool[] c_m5\nmemory bool[*] c_m6\n\nobjref obj5 nolock_test\n\nfunction void test_exception_params1()\nfunction void test_exception_params2()\n\nend\n\nobject obj1\nproperty double[] d1\nend\n\nobject obj2\nimplements obj1\nproperty double[] d1\nend\n\nobject obj3\nimplements obj1\nimplements obj2\nproperty double[] d1\nend\n\nobject obj4\nimplements sub2\nproperty string s_ind\nproperty int32 i_ind\n\nproperty string data\nobjref sub3{string} o3_1\nend\n\nobject obj5\n\nproperty double p1\nproperty double p2 [nolock]\nproperty double p3 [nolockread]\n\nfunction int32 f1()\nfunction int32 f2() [nolock]\n\npipe int32 q1 [readonly]\npipe int32 q2 [readonly,nolock]\n\nwire int32 w1 [readonly]\nwire int32 w2 [readonly,nolock]\n\nmemory int32[] m1\nmemory int32[] m2 [nolock]\nmemory int32[] m3 [nolockread]\n\nend\n\n\n";
            return s;
        }
        public override string GetServiceName() { return "com.robotraconteur.testing.TestService3"; }
        public teststruct3_stub teststruct3_stubentry;
        public testpod1_stub testpod1_stubentry;
        public testpod2_stub testpod2_stubentry;
        public vector3_stub vector3_stubentry;
        public quaternion_stub quaternion_stubentry;
        public transform_stub transform_stubentry;
        public pixel_stub pixel_stubentry;
        public pixel2_stub pixel2_stubentry;
        public com__robotraconteur__testing__TestService3Factory() : this(null, null) { }
        public com__robotraconteur__testing__TestService3Factory(RobotRaconteurNode node = null, ClientContext context = null) : base(node, context)
        {
            teststruct3_stubentry = new teststruct3_stub(this, this.node, this.context);
            testpod1_stubentry = new testpod1_stub(this, this.node, this.context);
            testpod2_stubentry = new testpod2_stub(this, this.node, this.context);
            vector3_stubentry = new vector3_stub();
            quaternion_stubentry = new quaternion_stub();
            transform_stubentry = new transform_stub();
            pixel_stubentry = new pixel_stub();
            pixel2_stubentry = new pixel2_stub();
        }
        public override IStructureStub FindStructureStub(string objecttype)
        {
            if (objecttype == "teststruct3")
                return teststruct3_stubentry;
            throw new DataTypeException("Cannot find appropriate structure stub");
        }
        public override IPodStub FindPodStub(string objecttype)
        {
            if (objecttype == "testpod1")
                return testpod1_stubentry;
            if (objecttype == "testpod2")
                return testpod2_stubentry;
            throw new DataTypeException("Cannot find appropriate pod stub");
        }
        public override INamedArrayStub FindNamedArrayStub(string objecttype)
        {
            if (objecttype == "vector3")
                return vector3_stubentry;
            if (objecttype == "quaternion")
                return quaternion_stubentry;
            if (objecttype == "transform")
                return transform_stubentry;
            if (objecttype == "pixel")
                return pixel_stubentry;
            if (objecttype == "pixel2")
                return pixel2_stubentry;
            throw new DataTypeException("Cannot find appropriate pod stub");
        }
        public override ServiceStub CreateStub(string objecttype, string path, ClientContext context)
        {
            string objshort;
            if (CompareNamespace(objecttype, out objshort))
            {
                switch (objshort)
                {
                    case "testroot3":
                        return new testroot3_stub(path, context);
                    case "obj1":
                        return new obj1_stub(path, context);
                    case "obj2":
                        return new obj2_stub(path, context);
                    case "obj3":
                        return new obj3_stub(path, context);
                    case "obj4":
                        return new obj4_stub(path, context);
                    case "obj5":
                        return new obj5_stub(path, context);
                    default:
                        break;
                }
            }
            else
            {
                return base.CreateStub(objecttype, path, context);
            }
            throw new ServiceException("Could not create stub");
        }
        public override ServiceSkel CreateSkel(string path, object obj, ServerContext context)
        {
            string objtype = ServiceDefinitionUtil.FindObjectRRType(obj);
            string objshort;
            if (CompareNamespace(objtype, out objshort))
            {
                switch (objshort)
                {
                    case "testroot3":
                        return new testroot3_skel(path, (testroot3)obj, context);
                    case "obj1":
                        return new obj1_skel(path, (obj1)obj, context);
                    case "obj2":
                        return new obj2_skel(path, (obj2)obj, context);
                    case "obj3":
                        return new obj3_skel(path, (obj3)obj, context);
                    case "obj4":
                        return new obj4_skel(path, (obj4)obj, context);
                    case "obj5":
                        return new obj5_skel(path, (obj5)obj, context);
                    default:
                        break;
                }
            }
            else
            {
                return base.CreateSkel(path, obj, context);
            }
            throw new ServiceException("Could not create skel");
        }
        public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
        {
            if (rr_exp == null) return rr_exp;
            string rr_type = rr_exp.Error;
            if (!rr_type.Contains(".")) return rr_exp;
            string rr_stype;
            if (CompareNamespace(rr_type, out rr_stype))
            {
                if (rr_stype == "test_exception4") return new test_exception4(rr_exp.Message);
            }
            else
            {
                return base.DownCastException(rr_exp);
            }
            return rr_exp;
        }
    }

    public class teststruct3_stub : IStructureStub
    {
        public teststruct3_stub(com__robotraconteur__testing__TestService3Factory d, RobotRaconteurNode node, ClientContext context) { def = d; rr_node = node; rr_context = context; }
        private com__robotraconteur__testing__TestService3Factory def;
        private RobotRaconteurNode rr_node;
        private ClientContext rr_context;
        public MessageElementNestedElementList PackStructure(object s1)
        {
            List<MessageElement> m = new List<MessageElement>();
            if (s1 == null) return null;
            teststruct3 s = (teststruct3)s1;
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackPodToArray<testpod1>(rr_node, rr_context, "s1", ref s.s1));
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackPodArray<testpod1>(rr_node, rr_context, "s2", s.s2));
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackPodArray<testpod1>(rr_node, rr_context, "s3", DataTypeUtil.VerifyArrayLength(s.s3, 11, false)));
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackPodArray<testpod1>(rr_node, rr_context, "s4", DataTypeUtil.VerifyArrayLength(s.s4, 16, true)));
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackPodMultiDimArray<testpod1>(rr_node, rr_context, "s5", DataTypeUtil.VerifyArrayLength(s.s5, 9, new uint[] { 3, 3 })));
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackPodMultiDimArray<testpod1>(rr_node, rr_context, "s6", s.s6));
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackListType<testpod1>(rr_node, rr_context, "s7", s.s7));
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackListType<testpod1[]>(rr_node, rr_context, "s8", s.s8));
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackListType<PodMultiDimArray>(rr_node, rr_context, "s9", s.s9));
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackVarType(rr_node, rr_context, "s10", s.s10));
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackVarType(rr_node, rr_context, "s11", s.s11));
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackVarType(rr_node, rr_context, "s12", s.s12));
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackVarType(rr_node, rr_context, "s13", s.s13));
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackVarType(rr_node, rr_context, "s14", s.s14));
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackVarType(rr_node, rr_context, "s15", s.s15));
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackNamedArrayToArray<transform>(rr_node, rr_context, "t1", ref s.t1));
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackNamedArray<transform>(rr_node, rr_context, "t2", DataTypeUtil.VerifyArrayLength(s.t2, 4, false)));
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackNamedMultiDimArray<transform>(rr_node, rr_context, "t3", DataTypeUtil.VerifyArrayLength(s.t3, 8, new uint[] { 2, 4 })));
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackVarType(rr_node, rr_context, "t4", s.t4));
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackVarType(rr_node, rr_context, "t5", s.t5));
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackListType<transform>(rr_node, rr_context, "t6", s.t6));
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackListType<transform[]>(rr_node, rr_context, "t7", DataTypeUtil.VerifyArrayLength(s.t7, 4, false)));
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackListType<NamedMultiDimArray>(rr_node, rr_context, "t8", DataTypeUtil.VerifyArrayLength(s.t8, 8, new uint[] { 2, 4 })));
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackVarType(rr_node, rr_context, "t9", s.t9));
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackVarType(rr_node, rr_context, "t10", s.t10));
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackVarType(rr_node, rr_context, "t11", s.t11));
            return new MessageElementNestedElementList(DataTypes.structure_t, "com.robotraconteur.testing.TestService3.teststruct3", m);
        }
        public T UnpackStructure<T>(MessageElementNestedElementList m)
        {
            if (m == null) return default(T);
            teststruct3 s = new teststruct3();
            s.s1 = MessageElementUtil.UnpackPodFromArray<testpod1>(rr_node, rr_context, MessageElement.FindElement(m.Elements, "s1"));
            s.s2 = MessageElementUtil.UnpackPodArray<testpod1>(rr_node, rr_context, MessageElement.FindElement(m.Elements, "s2"));
            s.s3 = DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackPodArray<testpod1>(rr_node, rr_context, MessageElement.FindElement(m.Elements, "s3")), 11, false);
            s.s4 = DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackPodArray<testpod1>(rr_node, rr_context, MessageElement.FindElement(m.Elements, "s4")), 16, true);
            s.s5 = DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackPodMultiDimArray<testpod1>(rr_node, rr_context, MessageElement.FindElement(m.Elements, "s5")), 9, new uint[] { 3, 3 });
            s.s6 = MessageElementUtil.UnpackPodMultiDimArray<testpod1>(rr_node, rr_context, MessageElement.FindElement(m.Elements, "s6"));
            s.s7 = MessageElementUtil.UnpackList<testpod1>(rr_node, rr_context, MessageElement.FindElement(m.Elements, "s7"));
            s.s8 = MessageElementUtil.UnpackList<testpod1[]>(rr_node, rr_context, MessageElement.FindElement(m.Elements, "s8"));
            s.s9 = MessageElementUtil.UnpackList<PodMultiDimArray>(rr_node, rr_context, MessageElement.FindElement(m.Elements, "s9"));
            s.s10 = MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElement.FindElement(m.Elements, "s10"));
            s.s11 = MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElement.FindElement(m.Elements, "s11"));
            s.s12 = MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElement.FindElement(m.Elements, "s12"));
            s.s13 = MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElement.FindElement(m.Elements, "s13"));
            s.s14 = MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElement.FindElement(m.Elements, "s14"));
            s.s15 = MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElement.FindElement(m.Elements, "s15"));
            s.t1 = MessageElementUtil.UnpackNamedArrayFromArray<transform>(rr_node, rr_context, MessageElement.FindElement(m.Elements, "t1"));
            s.t2 = DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackNamedArray<transform>(rr_node, rr_context, MessageElement.FindElement(m.Elements, "t2")), 4, false);
            s.t3 = DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackNamedMultiDimArray<transform>(rr_node, rr_context, MessageElement.FindElement(m.Elements, "t3")), 8, new uint[] { 2, 4 });
            s.t4 = MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElement.FindElement(m.Elements, "t4"));
            s.t5 = MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElement.FindElement(m.Elements, "t5"));
            s.t6 = MessageElementUtil.UnpackList<transform>(rr_node, rr_context, MessageElement.FindElement(m.Elements, "t6"));
            s.t7 = DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackList<transform[]>(rr_node, rr_context, MessageElement.FindElement(m.Elements, "t7")), 4, false);
            s.t8 = DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackList<NamedMultiDimArray>(rr_node, rr_context, MessageElement.FindElement(m.Elements, "t8")), 8, new uint[] { 2, 4 });
            s.t9 = MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElement.FindElement(m.Elements, "t9"));
            s.t10 = MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElement.FindElement(m.Elements, "t10"));
            s.t11 = MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElement.FindElement(m.Elements, "t11"));
            T st; try { st = (T)((object)s); } catch (InvalidCastException) { throw new DataTypeMismatchException("Wrong structuretype"); }
            return st;
        }
    }

    public class testpod1_stub : PodStub<testpod1>
    {
        public testpod1_stub(com__robotraconteur__testing__TestService3Factory d, RobotRaconteurNode node, ClientContext context) { def = d; rr_node = node; rr_context = context; }
        private com__robotraconteur__testing__TestService3Factory def;
        private RobotRaconteurNode rr_node;
        private ClientContext rr_context;
        public override MessageElementNestedElementList PackPod(ref testpod1 s1)
        {
            List<MessageElement> m = new List<MessageElement>();
            testpod1 s = (testpod1)s1;
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackScalar<double>("d1", s.d1));
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackArray<double>("d2", DataTypeUtil.VerifyArrayLength(s.d2, 6, false)));
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackArray<double>("d3", DataTypeUtil.VerifyArrayLength(s.d3, 6, true)));
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackArray<double>("d4", DataTypeUtil.VerifyArrayLength(s.d4, 9, false)));
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackPodToArray<testpod2>(rr_node, rr_context, "s1", ref s.s1));
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackPodArray<testpod2>(rr_node, rr_context, "s2", DataTypeUtil.VerifyArrayLength(s.s2, 8, false)));
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackPodArray<testpod2>(rr_node, rr_context, "s3", DataTypeUtil.VerifyArrayLength(s.s3, 9, true)));
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackPodArray<testpod2>(rr_node, rr_context, "s4", DataTypeUtil.VerifyArrayLength(s.s4, 8, false)));
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackNamedArrayToArray<transform>(rr_node, rr_context, "t1", ref s.t1));
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackNamedArray<transform>(rr_node, rr_context, "t2", DataTypeUtil.VerifyArrayLength(s.t2, 4, false)));
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackNamedArray<transform>(rr_node, rr_context, "t3", DataTypeUtil.VerifyArrayLength(s.t3, 15, true)));
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackNamedArray<transform>(rr_node, rr_context, "t4", DataTypeUtil.VerifyArrayLength(s.t4, 8, false)));
            return new MessageElementNestedElementList(DataTypes.pod_t, "", m);
        }
        public override testpod1 UnpackPod(MessageElementNestedElementList m)
        {
            if (m == null) throw new NullReferenceException("Pod must not be null");
            testpod1 s = new testpod1();
            s.d1 = (MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements, "d1")));
            s.d2 = DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements, "d2")), 6, false);
            s.d3 = DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements, "d3")), 6, true);
            s.d4 = DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements, "d4")), 9, false);
            s.s1 = MessageElementUtil.UnpackPodFromArray<testpod2>(rr_node, rr_context, MessageElement.FindElement(m.Elements, "s1"));
            s.s2 = DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackPodArray<testpod2>(rr_node, rr_context, MessageElement.FindElement(m.Elements, "s2")), 8, false);
            s.s3 = DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackPodArray<testpod2>(rr_node, rr_context, MessageElement.FindElement(m.Elements, "s3")), 9, true);
            s.s4 = DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackPodArray<testpod2>(rr_node, rr_context, MessageElement.FindElement(m.Elements, "s4")), 8, false);
            s.t1 = MessageElementUtil.UnpackNamedArrayFromArray<transform>(rr_node, rr_context, MessageElement.FindElement(m.Elements, "t1"));
            s.t2 = DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackNamedArray<transform>(rr_node, rr_context, MessageElement.FindElement(m.Elements, "t2")), 4, false);
            s.t3 = DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackNamedArray<transform>(rr_node, rr_context, MessageElement.FindElement(m.Elements, "t3")), 15, true);
            s.t4 = DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackNamedArray<transform>(rr_node, rr_context, MessageElement.FindElement(m.Elements, "t4")), 8, false);
            return s;
        }
        public override string TypeName { get { return "com.robotraconteur.testing.TestService3.testpod1"; } }
    }

    public class testpod2_stub : PodStub<testpod2>
    {
        public testpod2_stub(com__robotraconteur__testing__TestService3Factory d, RobotRaconteurNode node, ClientContext context) { def = d; rr_node = node; rr_context = context; }
        private com__robotraconteur__testing__TestService3Factory def;
        private RobotRaconteurNode rr_node;
        private ClientContext rr_context;
        public override MessageElementNestedElementList PackPod(ref testpod2 s1)
        {
            List<MessageElement> m = new List<MessageElement>();
            testpod2 s = (testpod2)s1;
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackScalar<sbyte>("i1", s.i1));
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackArray<sbyte>("i2", DataTypeUtil.VerifyArrayLength(s.i2, 15, false)));
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackArray<sbyte>("i3", DataTypeUtil.VerifyArrayLength(s.i3, 17, true)));
            return new MessageElementNestedElementList(DataTypes.pod_t, "", m);
        }
        public override testpod2 UnpackPod(MessageElementNestedElementList m)
        {
            if (m == null) throw new NullReferenceException("Pod must not be null");
            testpod2 s = new testpod2();
            s.i1 = (MessageElementUtil.UnpackScalar<sbyte>(MessageElement.FindElement(m.Elements, "i1")));
            s.i2 = DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackArray<sbyte>(MessageElement.FindElement(m.Elements, "i2")), 15, false);
            s.i3 = DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackArray<sbyte>(MessageElement.FindElement(m.Elements, "i3")), 17, true);
            return s;
        }
        public override string TypeName { get { return "com.robotraconteur.testing.TestService3.testpod2"; } }
    }

    public class vector3_stub : NamedArrayStub<vector3, double>
    {
        public override double[] GetNumericArrayFromNamedArrayStruct(ref vector3 s)
        {
            return s.GetNumericArray();
        }
        public override vector3 GetNamedArrayStructFromNumericArray(double[] m)
        {
            if (m.Length != 3) throw new DataTypeException("Invalid namedarray array");
            var s = new vector3();
            var a = new ArraySegment<double>(m);
            s.AssignFromNumericArray(ref a);
            return s;
        }
        public override double[] GetNumericArrayFromNamedArray(vector3[] s)
        {
            return s.GetNumericArray();
        }
        public override vector3[] GetNamedArrayFromNumericArray(double[] m)
        {
            if (m.Length % 3 != 0) throw new DataTypeException("Invalid namedarray array");
            vector3[] s = new vector3[m.Length / 3];
            var a = new ArraySegment<double>(m);
            s.AssignFromNumericArray(ref a);
            return s;
        }
        public override string TypeName { get { return "com.robotraconteur.testing.TestService3.vector3"; } }
    }

    public class quaternion_stub : NamedArrayStub<quaternion, double>
    {
        public override double[] GetNumericArrayFromNamedArrayStruct(ref quaternion s)
        {
            return s.GetNumericArray();
        }
        public override quaternion GetNamedArrayStructFromNumericArray(double[] m)
        {
            if (m.Length != 4) throw new DataTypeException("Invalid namedarray array");
            var s = new quaternion();
            var a = new ArraySegment<double>(m);
            s.AssignFromNumericArray(ref a);
            return s;
        }
        public override double[] GetNumericArrayFromNamedArray(quaternion[] s)
        {
            return s.GetNumericArray();
        }
        public override quaternion[] GetNamedArrayFromNumericArray(double[] m)
        {
            if (m.Length % 4 != 0) throw new DataTypeException("Invalid namedarray array");
            quaternion[] s = new quaternion[m.Length / 4];
            var a = new ArraySegment<double>(m);
            s.AssignFromNumericArray(ref a);
            return s;
        }
        public override string TypeName { get { return "com.robotraconteur.testing.TestService3.quaternion"; } }
    }

    public class transform_stub : NamedArrayStub<transform, double>
    {
        public override double[] GetNumericArrayFromNamedArrayStruct(ref transform s)
        {
            return s.GetNumericArray();
        }
        public override transform GetNamedArrayStructFromNumericArray(double[] m)
        {
            if (m.Length != 7) throw new DataTypeException("Invalid namedarray array");
            var s = new transform();
            var a = new ArraySegment<double>(m);
            s.AssignFromNumericArray(ref a);
            return s;
        }
        public override double[] GetNumericArrayFromNamedArray(transform[] s)
        {
            return s.GetNumericArray();
        }
        public override transform[] GetNamedArrayFromNumericArray(double[] m)
        {
            if (m.Length % 7 != 0) throw new DataTypeException("Invalid namedarray array");
            transform[] s = new transform[m.Length / 7];
            var a = new ArraySegment<double>(m);
            s.AssignFromNumericArray(ref a);
            return s;
        }
        public override string TypeName { get { return "com.robotraconteur.testing.TestService3.transform"; } }
    }

    public class pixel_stub : NamedArrayStub<pixel, byte>
    {
        public override byte[] GetNumericArrayFromNamedArrayStruct(ref pixel s)
        {
            return s.GetNumericArray();
        }
        public override pixel GetNamedArrayStructFromNumericArray(byte[] m)
        {
            if (m.Length != 3) throw new DataTypeException("Invalid namedarray array");
            var s = new pixel();
            var a = new ArraySegment<byte>(m);
            s.AssignFromNumericArray(ref a);
            return s;
        }
        public override byte[] GetNumericArrayFromNamedArray(pixel[] s)
        {
            return s.GetNumericArray();
        }
        public override pixel[] GetNamedArrayFromNumericArray(byte[] m)
        {
            if (m.Length % 3 != 0) throw new DataTypeException("Invalid namedarray array");
            pixel[] s = new pixel[m.Length / 3];
            var a = new ArraySegment<byte>(m);
            s.AssignFromNumericArray(ref a);
            return s;
        }
        public override string TypeName { get { return "com.robotraconteur.testing.TestService3.pixel"; } }
    }

    public class pixel2_stub : NamedArrayStub<pixel2, byte>
    {
        public override byte[] GetNumericArrayFromNamedArrayStruct(ref pixel2 s)
        {
            return s.GetNumericArray();
        }
        public override pixel2 GetNamedArrayStructFromNumericArray(byte[] m)
        {
            if (m.Length != 31) throw new DataTypeException("Invalid namedarray array");
            var s = new pixel2();
            var a = new ArraySegment<byte>(m);
            s.AssignFromNumericArray(ref a);
            return s;
        }
        public override byte[] GetNumericArrayFromNamedArray(pixel2[] s)
        {
            return s.GetNumericArray();
        }
        public override pixel2[] GetNamedArrayFromNumericArray(byte[] m)
        {
            if (m.Length % 31 != 0) throw new DataTypeException("Invalid namedarray array");
            pixel2[] s = new pixel2[m.Length / 31];
            var a = new ArraySegment<byte>(m);
            s.AssignFromNumericArray(ref a);
            return s;
        }
        public override string TypeName { get { return "com.robotraconteur.testing.TestService3.pixel2"; } }
    }

    public class testroot3_stub : ServiceStub, testroot3
    {
        private Pipe<int> rr_unreliable1;
        private Pipe<int[]> rr_p1;
        private Pipe<int[]> rr_p2;
        private Pipe<MultiDimArray> rr_p3;
        private Wire<int> rr_peekwire;
        private Wire<int> rr_pokewire;
        private Wire<int[]> rr_w1;
        private Wire<int[]> rr_w2;
        private Wire<MultiDimArray> rr_w3;
        private ArrayMemory<double> rr_readmem;
        private PodArrayMemory<testpod2> rr_pod_m1;
        private PodMultiDimArrayMemory<testpod2> rr_pod_m2;
        private NamedArrayMemory<transform> rr_namedarray_m1;
        private NamedMultiDimArrayMemory<transform> rr_namedarray_m2;
        private ArrayMemory<CDouble> rr_c_m1;
        private MultiDimArrayMemory<CDouble> rr_c_m2;
        private ArrayMemory<CDouble> rr_c_m3;
        private MultiDimArrayMemory<CDouble> rr_c_m4;
        private ArrayMemory<bool> rr_c_m5;
        private MultiDimArrayMemory<bool> rr_c_m6;
        public testroot3_stub(string path, ClientContext c) : base(path, c)
        {
            rr_unreliable1 = new PipeClient<int>("unreliable1", this);
            rr_p1 = new PipeClient<int[]>("p1", this);
            rr_p2 = new PipeClient<int[]>("p2", this);
            rr_p3 = new PipeClient<MultiDimArray>("p3", this);
            rr_peekwire = new WireClient<int>("peekwire", this);
            rr_pokewire = new WireClient<int>("pokewire", this);
            rr_w1 = new WireClient<int[]>("w1", this);
            rr_w2 = new WireClient<int[]>("w2", this);
            rr_w3 = new WireClient<MultiDimArray>("w3", this);
            rr_readmem = new ArrayMemoryClient<double>("readmem", this, MemberDefinition_Direction.readonly_);
            rr_pod_m1 = new PodArrayMemoryClient<testpod2>("pod_m1", this, 111, MemberDefinition_Direction.both);
            rr_pod_m2 = new PodMultiDimArrayMemoryClient<testpod2>("pod_m2", this, 111, MemberDefinition_Direction.both);
            rr_namedarray_m1 = new NamedArrayMemoryClient<transform>("namedarray_m1", this, 7, MemberDefinition_Direction.both);
            rr_namedarray_m2 = new NamedMultiDimArrayMemoryClient<transform>("namedarray_m2", this, 7, MemberDefinition_Direction.both);
            rr_c_m1 = new ArrayMemoryClient<CDouble>("c_m1", this, MemberDefinition_Direction.both);
            rr_c_m2 = new MultiDimArrayMemoryClient<CDouble>("c_m2", this, MemberDefinition_Direction.both);
            rr_c_m3 = new ArrayMemoryClient<CDouble>("c_m3", this, MemberDefinition_Direction.both);
            rr_c_m4 = new MultiDimArrayMemoryClient<CDouble>("c_m4", this, MemberDefinition_Direction.both);
            rr_c_m5 = new ArrayMemoryClient<bool>("c_m5", this, MemberDefinition_Direction.both);
            rr_c_m6 = new MultiDimArrayMemoryClient<bool>("c_m6", this, MemberDefinition_Direction.both);
        }
        public async Task<int> get_readme(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "readme");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return (MessageElementUtil.UnpackScalar<int>(me));
        }
        public async Task set_readme(int value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "readme");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackScalar<int>("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<int> get_writeme(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "writeme");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return (MessageElementUtil.UnpackScalar<int>(me));
        }
        public async Task set_writeme(int value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "writeme");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackScalar<int>("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<int> get_unknown_modifier(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "unknown_modifier");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return (MessageElementUtil.UnpackScalar<int>(me));
        }
        public async Task set_unknown_modifier(int value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "unknown_modifier");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackScalar<int>("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<testenum1> get_testenum1_prop(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "testenum1_prop");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackEnum<testenum1>(me);
        }
        public async Task set_testenum1_prop(testenum1 value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "testenum1_prop");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackEnum<testenum1>("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<testpod1> get_testpod1_prop(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "testpod1_prop");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackPodFromArray<testpod1>(rr_node, rr_context, me);
        }
        public async Task set_testpod1_prop(testpod1 value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "testpod1_prop");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackPodToArray<testpod1>(rr_node, rr_context, "value", ref value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<teststruct3> get_teststruct3_prop(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "teststruct3_prop");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackStructure<teststruct3>(rr_node, rr_context, me);
        }
        public async Task set_teststruct3_prop(teststruct3 value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "teststruct3_prop");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackStructure(rr_node, rr_context, "value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<List<double[]>> get_d1(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "d1");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackList<double[]>(rr_node, rr_context, me), 6, false);
        }
        public async Task set_d1(List<double[]> value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "d1");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackListType<double[]>(rr_node, rr_context, "value", DataTypeUtil.VerifyArrayLength(value, 6, false)));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<List<double[]>> get_d2(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "d2");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackList<double[]>(rr_node, rr_context, me), 6, true);
        }
        public async Task set_d2(List<double[]> value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "d2");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackListType<double[]>(rr_node, rr_context, "value", DataTypeUtil.VerifyArrayLength(value, 6, true)));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<Dictionary<int, double[]>> get_d3(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "d3");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackMap<int, double[]>(rr_node, rr_context, me), 6, false);
        }
        public async Task set_d3(Dictionary<int, double[]> value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "d3");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackMapType<int, double[]>(rr_node, rr_context, "value", DataTypeUtil.VerifyArrayLength(value, 6, false)));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<Dictionary<int, double[]>> get_d4(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "d4");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackMap<int, double[]>(rr_node, rr_context, me), 6, true);
        }
        public async Task set_d4(Dictionary<int, double[]> value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "d4");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackMapType<int, double[]>(rr_node, rr_context, "value", DataTypeUtil.VerifyArrayLength(value, 6, true)));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<List<MultiDimArray>> get_d5(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "d5");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackList<MultiDimArray>(rr_node, rr_context, me), 9, new uint[] { 3, 3 });
        }
        public async Task set_d5(List<MultiDimArray> value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "d5");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackListType<MultiDimArray>(rr_node, rr_context, "value", DataTypeUtil.VerifyArrayLength(value, 9, new uint[] { 3, 3 })));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<Dictionary<int, MultiDimArray>> get_d6(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "d6");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackMap<int, MultiDimArray>(rr_node, rr_context, me), 9, new uint[] { 3, 3 });
        }
        public async Task set_d6(Dictionary<int, MultiDimArray> value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "d6");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackMapType<int, MultiDimArray>(rr_node, rr_context, "value", DataTypeUtil.VerifyArrayLength(value, 9, new uint[] { 3, 3 })));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<vector3> get_testnamedarray1(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "testnamedarray1");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackNamedArrayFromArray<vector3>(rr_node, rr_context, me);
        }
        public async Task set_testnamedarray1(vector3 value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "testnamedarray1");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackNamedArrayToArray<vector3>(rr_node, rr_context, "value", ref value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<transform> get_testnamedarray2(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "testnamedarray2");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackNamedArrayFromArray<transform>(rr_node, rr_context, me);
        }
        public async Task set_testnamedarray2(transform value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "testnamedarray2");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackNamedArrayToArray<transform>(rr_node, rr_context, "value", ref value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<transform[]> get_testnamedarray3(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "testnamedarray3");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackNamedArray<transform>(rr_node, rr_context, me), 10, true);
        }
        public async Task set_testnamedarray3(transform[] value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "testnamedarray3");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackNamedArray<transform>(rr_node, rr_context, "value", DataTypeUtil.VerifyArrayLength(value, 10, true)));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<NamedMultiDimArray> get_testnamedarray4(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "testnamedarray4");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackNamedMultiDimArray<transform>(rr_node, rr_context, me);
        }
        public async Task set_testnamedarray4(NamedMultiDimArray value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "testnamedarray4");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackNamedMultiDimArray<transform>(rr_node, rr_context, "value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<NamedMultiDimArray> get_testnamedarray5(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "testnamedarray5");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackNamedMultiDimArray<transform>(rr_node, rr_context, me), 6, new uint[] { 3, 2 });
        }
        public async Task set_testnamedarray5(NamedMultiDimArray value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "testnamedarray5");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackNamedMultiDimArray<transform>(rr_node, rr_context, "value", DataTypeUtil.VerifyArrayLength(value, 6, new uint[] { 3, 2 })));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<CDouble> get_c1(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "c1");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return (MessageElementUtil.UnpackScalar<CDouble>(me));
        }
        public async Task set_c1(CDouble value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "c1");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackScalar<CDouble>("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<CDouble[]> get_c2(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "c2");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackArray<CDouble>(me);
        }
        public async Task set_c2(CDouble[] value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "c2");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackArray<CDouble>("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<MultiDimArray> get_c3(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "c3");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackMultiDimArray(rr_node, me);
        }
        public async Task set_c3(MultiDimArray value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "c3");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackMultiDimArray(rr_node, "value", (MultiDimArray)value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<List<CDouble>> get_c4(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "c4");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackList<CDouble>(rr_node, rr_context, me);
        }
        public async Task set_c4(List<CDouble> value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "c4");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackListType<CDouble>(rr_node, rr_context, "value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<List<CDouble[]>> get_c5(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "c5");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackList<CDouble[]>(rr_node, rr_context, me);
        }
        public async Task set_c5(List<CDouble[]> value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "c5");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackListType<CDouble[]>(rr_node, rr_context, "value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<List<MultiDimArray>> get_c6(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "c6");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackList<MultiDimArray>(rr_node, rr_context, me);
        }
        public async Task set_c6(List<MultiDimArray> value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "c6");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackListType<MultiDimArray>(rr_node, rr_context, "value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<CSingle> get_c7(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "c7");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return (MessageElementUtil.UnpackScalar<CSingle>(me));
        }
        public async Task set_c7(CSingle value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "c7");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackScalar<CSingle>("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<CSingle[]> get_c8(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "c8");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackArray<CSingle>(me);
        }
        public async Task set_c8(CSingle[] value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "c8");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackArray<CSingle>("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<MultiDimArray> get_c9(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "c9");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackMultiDimArray(rr_node, me);
        }
        public async Task set_c9(MultiDimArray value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "c9");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackMultiDimArray(rr_node, "value", (MultiDimArray)value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<List<CSingle>> get_c10(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "c10");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackList<CSingle>(rr_node, rr_context, me);
        }
        public async Task set_c10(List<CSingle> value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "c10");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackListType<CSingle>(rr_node, rr_context, "value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<List<CSingle[]>> get_c11(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "c11");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackList<CSingle[]>(rr_node, rr_context, me);
        }
        public async Task set_c11(List<CSingle[]> value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "c11");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackListType<CSingle[]>(rr_node, rr_context, "value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<List<MultiDimArray>> get_c12(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "c12");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackList<MultiDimArray>(rr_node, rr_context, me);
        }
        public async Task set_c12(List<MultiDimArray> value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "c12");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackListType<MultiDimArray>(rr_node, rr_context, "value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<bool> get_b1(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "b1");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return (MessageElementUtil.UnpackScalar<bool>(me));
        }
        public async Task set_b1(bool value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "b1");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackScalar<bool>("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<bool[]> get_b2(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "b2");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackArray<bool>(me);
        }
        public async Task set_b2(bool[] value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "b2");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackArray<bool>("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<MultiDimArray> get_b3(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "b3");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackMultiDimArray(rr_node, me);
        }
        public async Task set_b3(MultiDimArray value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "b3");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackMultiDimArray(rr_node, "value", (MultiDimArray)value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<List<bool>> get_b4(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "b4");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackList<bool>(rr_node, rr_context, me);
        }
        public async Task set_b4(List<bool> value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "b4");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackListType<bool>(rr_node, rr_context, "value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<List<bool[]>> get_b5(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "b5");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackList<bool[]>(rr_node, rr_context, me);
        }
        public async Task set_b5(List<bool[]> value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "b5");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackListType<bool[]>(rr_node, rr_context, "value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<List<MultiDimArray>> get_b6(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "b6");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackList<MultiDimArray>(rr_node, rr_context, me);
        }
        public async Task set_b6(List<MultiDimArray> value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "b6");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackListType<MultiDimArray>(rr_node, rr_context, "value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task testpod1_func1(testpod1 s, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry rr_m = new MessageEntry(MessageEntryType.FunctionCallReq, "testpod1_func1");
            MessageElementUtil.AddMessageElement(rr_m, MessageElementUtil.PackPodToArray<testpod1>(rr_node, rr_context, "s", ref s));
            MessageEntry rr_me = await ProcessRequest(rr_m, cancel).ConfigureAwait(false);
        }
        public async Task<testpod1> testpod1_func2(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry rr_m = new MessageEntry(MessageEntryType.FunctionCallReq, "testpod1_func2");
            MessageEntry rr_me = await ProcessRequest(rr_m, cancel).ConfigureAwait(false);
            return MessageElementUtil.UnpackPodFromArray<testpod1>(rr_node, rr_context, rr_me.FindElement("return"));
        }
        public async Task<Generator2<double>> gen_func1(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry rr_m = new MessageEntry(MessageEntryType.FunctionCallReq, "gen_func1");
            MessageEntry rr_me = await ProcessRequest(rr_m, cancel).ConfigureAwait(false);
            return new Generator2Client<double>("gen_func1", this, rr_me.FindElement("index").CastData<int[]>()[0]);
        }
        public async Task<Generator2<byte[]>> gen_func2(string name, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry rr_m = new MessageEntry(MessageEntryType.FunctionCallReq, "gen_func2");
            MessageElementUtil.AddMessageElement(rr_m, MessageElementUtil.PackString("name", name));
            MessageEntry rr_me = await ProcessRequest(rr_m, cancel).ConfigureAwait(false);
            return new Generator2Client<byte[]>("gen_func2", this, rr_me.FindElement("index").CastData<int[]>()[0]);
        }
        public async Task<Generator3<byte[]>> gen_func3(string name, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry rr_m = new MessageEntry(MessageEntryType.FunctionCallReq, "gen_func3");
            MessageElementUtil.AddMessageElement(rr_m, MessageElementUtil.PackString("name", name));
            MessageEntry rr_me = await ProcessRequest(rr_m, cancel).ConfigureAwait(false);
            return new Generator3Client<byte[]>("gen_func3", this, rr_me.FindElement("index").CastData<int[]>()[0]);
        }
        public async Task<Generator1<byte[], byte[]>> gen_func4(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry rr_m = new MessageEntry(MessageEntryType.FunctionCallReq, "gen_func4");
            MessageEntry rr_me = await ProcessRequest(rr_m, cancel).ConfigureAwait(false);
            return new Generator1Client<byte[], byte[]>("gen_func4", this, rr_me.FindElement("index").CastData<int[]>()[0]);
        }
        public async Task<Generator1<com.robotraconteur.testing.TestService1.teststruct2, com.robotraconteur.testing.TestService1.teststruct2>> gen_func5(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry rr_m = new MessageEntry(MessageEntryType.FunctionCallReq, "gen_func5");
            MessageEntry rr_me = await ProcessRequest(rr_m, cancel).ConfigureAwait(false);
            return new Generator1Client<com.robotraconteur.testing.TestService1.teststruct2, com.robotraconteur.testing.TestService1.teststruct2>("gen_func5", this, rr_me.FindElement("index").CastData<int[]>()[0]);
        }
        public async Task test_exception_params1(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry rr_m = new MessageEntry(MessageEntryType.FunctionCallReq, "test_exception_params1");
            MessageEntry rr_me = await ProcessRequest(rr_m, cancel).ConfigureAwait(false);
        }
        public async Task test_exception_params2(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry rr_m = new MessageEntry(MessageEntryType.FunctionCallReq, "test_exception_params2");
            MessageEntry rr_me = await ProcessRequest(rr_m, cancel).ConfigureAwait(false);
        }
        protected override void DispatchEvent(MessageEntry rr_m)
        {
            switch (rr_m.MemberName)
            {
                default:
                    break;
            }
        }
        public async Task<obj4> get_o4(CancellationToken cancel = default(CancellationToken))
        {
            return (obj4)await FindObjRefTyped("o4", "com.robotraconteur.testing.TestService3.obj4", cancel).ConfigureAwait(false);
        }
        public async Task<obj5> get_nolock_test(CancellationToken cancel = default(CancellationToken))
        {
            return (obj5)await FindObjRefTyped("nolock_test", "com.robotraconteur.testing.TestService3.obj5", cancel).ConfigureAwait(false);
        }
        public Pipe<int> unreliable1
        {
            get { return rr_unreliable1; }
            set { throw new InvalidOperationException(); }
        }
        public Pipe<int[]> p1
        {
            get { return rr_p1; }
            set { throw new InvalidOperationException(); }
        }
        public Pipe<int[]> p2
        {
            get { return rr_p2; }
            set { throw new InvalidOperationException(); }
        }
        public Pipe<MultiDimArray> p3
        {
            get { return rr_p3; }
            set { throw new InvalidOperationException(); }
        }
        public Wire<int> peekwire
        {
            get { return rr_peekwire; }
            set { throw new InvalidOperationException(); }
        }
        public Wire<int> pokewire
        {
            get { return rr_pokewire; }
            set { throw new InvalidOperationException(); }
        }
        public Wire<int[]> w1
        {
            get { return rr_w1; }
            set { throw new InvalidOperationException(); }
        }
        public Wire<int[]> w2
        {
            get { return rr_w2; }
            set { throw new InvalidOperationException(); }
        }
        public Wire<MultiDimArray> w3
        {
            get { return rr_w3; }
            set { throw new InvalidOperationException(); }
        }
        public ArrayMemory<double> readmem
        {
            get { return rr_readmem; }
        }
        public PodArrayMemory<testpod2> pod_m1
        {
            get { return rr_pod_m1; }
        }
        public PodMultiDimArrayMemory<testpod2> pod_m2
        {
            get { return rr_pod_m2; }
        }
        public NamedArrayMemory<transform> namedarray_m1
        {
            get { return rr_namedarray_m1; }
        }
        public NamedMultiDimArrayMemory<transform> namedarray_m2
        {
            get { return rr_namedarray_m2; }
        }
        public ArrayMemory<CDouble> c_m1
        {
            get { return rr_c_m1; }
        }
        public MultiDimArrayMemory<CDouble> c_m2
        {
            get { return rr_c_m2; }
        }
        public ArrayMemory<CDouble> c_m3
        {
            get { return rr_c_m3; }
        }
        public MultiDimArrayMemory<CDouble> c_m4
        {
            get { return rr_c_m4; }
        }
        public ArrayMemory<bool> c_m5
        {
            get { return rr_c_m5; }
        }
        public MultiDimArrayMemory<bool> c_m6
        {
            get { return rr_c_m6; }
        }
        protected override void DispatchPipeMessage(MessageEntry m)
        {
            switch (m.MemberName)
            {
                case "unreliable1":
                    this.rr_unreliable1.PipePacketReceived(m);
                    break;
                case "p1":
                    this.rr_p1.PipePacketReceived(m);
                    break;
                case "p2":
                    this.rr_p2.PipePacketReceived(m);
                    break;
                case "p3":
                    this.rr_p3.PipePacketReceived(m);
                    break;
                default:
                    throw new Exception();
            }
        }
        protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m)
        {
            string rr_ename = rr_m.MemberName;
            MessageEntry rr_mr = new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
            rr_mr.ServicePath = rr_m.ServicePath;
            rr_mr.RequestID = rr_m.RequestID;
            switch (rr_ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return rr_mr;
        }
        protected override void DispatchWireMessage(MessageEntry m)
        {
            switch (m.MemberName)
            {
                case "peekwire":
                    this.rr_peekwire.WirePacketReceived(m);
                    break;
                case "pokewire":
                    this.rr_pokewire.WirePacketReceived(m);
                    break;
                case "w1":
                    this.rr_w1.WirePacketReceived(m);
                    break;
                case "w2":
                    this.rr_w2.WirePacketReceived(m);
                    break;
                case "w3":
                    this.rr_w3.WirePacketReceived(m);
                    break;
                default:
                    throw new Exception();
            }
        }
    }
    public class obj1_stub : ServiceStub, obj1
    {
        public obj1_stub(string path, ClientContext c) : base(path, c)
        {
        }
        public async Task<double[]> get_d1(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "d1");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackArray<double>(me);
        }
        public async Task set_d1(double[] value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "d1");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackArray<double>("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        protected override void DispatchEvent(MessageEntry rr_m)
        {
            switch (rr_m.MemberName)
            {
                default:
                    break;
            }
        }
        protected override void DispatchPipeMessage(MessageEntry m)
        {
            switch (m.MemberName)
            {
                default:
                    throw new Exception();
            }
        }
        protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m)
        {
            string rr_ename = rr_m.MemberName;
            MessageEntry rr_mr = new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
            rr_mr.ServicePath = rr_m.ServicePath;
            rr_mr.RequestID = rr_m.RequestID;
            switch (rr_ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return rr_mr;
        }
        protected override void DispatchWireMessage(MessageEntry m)
        {
            switch (m.MemberName)
            {
                default:
                    throw new Exception();
            }
        }
    }
    public class obj2_stub : ServiceStub, obj2
    {
        public obj2_stub(string path, ClientContext c) : base(path, c)
        {
        }
        public async Task<double[]> get_d1(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "d1");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackArray<double>(me);
        }
        public async Task set_d1(double[] value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "d1");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackArray<double>("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        protected override void DispatchEvent(MessageEntry rr_m)
        {
            switch (rr_m.MemberName)
            {
                default:
                    break;
            }
        }
        protected override void DispatchPipeMessage(MessageEntry m)
        {
            switch (m.MemberName)
            {
                default:
                    throw new Exception();
            }
        }
        protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m)
        {
            string rr_ename = rr_m.MemberName;
            MessageEntry rr_mr = new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
            rr_mr.ServicePath = rr_m.ServicePath;
            rr_mr.RequestID = rr_m.RequestID;
            switch (rr_ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return rr_mr;
        }
        protected override void DispatchWireMessage(MessageEntry m)
        {
            switch (m.MemberName)
            {
                default:
                    throw new Exception();
            }
        }
    }
    public class obj3_stub : ServiceStub, obj3
    {
        public obj3_stub(string path, ClientContext c) : base(path, c)
        {
        }
        public async Task<double[]> get_d1(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "d1");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackArray<double>(me);
        }
        public async Task set_d1(double[] value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "d1");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackArray<double>("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        protected override void DispatchEvent(MessageEntry rr_m)
        {
            switch (rr_m.MemberName)
            {
                default:
                    break;
            }
        }
        protected override void DispatchPipeMessage(MessageEntry m)
        {
            switch (m.MemberName)
            {
                default:
                    throw new Exception();
            }
        }
        protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m)
        {
            string rr_ename = rr_m.MemberName;
            MessageEntry rr_mr = new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
            rr_mr.ServicePath = rr_m.ServicePath;
            rr_mr.RequestID = rr_m.RequestID;
            switch (rr_ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return rr_mr;
        }
        protected override void DispatchWireMessage(MessageEntry m)
        {
            switch (m.MemberName)
            {
                default:
                    throw new Exception();
            }
        }
    }
    public class obj4_stub : ServiceStub, obj4
    {
        public obj4_stub(string path, ClientContext c) : base(path, c)
        {
        }
        public async Task<string> get_s_ind(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "s_ind");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackString(me);
        }
        public async Task set_s_ind(string value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "s_ind");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackString("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<int> get_i_ind(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "i_ind");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return (MessageElementUtil.UnpackScalar<int>(me));
        }
        public async Task set_i_ind(int value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "i_ind");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackScalar<int>("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<string> get_data(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "data");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return MessageElementUtil.UnpackString(me);
        }
        public async Task set_data(string value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "data");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackString("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        protected override void DispatchEvent(MessageEntry rr_m)
        {
            switch (rr_m.MemberName)
            {
                default:
                    break;
            }
        }
        public async Task<com.robotraconteur.testing.TestService1.sub3> get_o3_1(string ind, CancellationToken cancel = default(CancellationToken))
        {
            return (com.robotraconteur.testing.TestService1.sub3)await FindObjRefTyped("o3_1", ind.ToString(), "com.robotraconteur.testing.TestService1.sub3", cancel).ConfigureAwait(false);
        }
        protected override void DispatchPipeMessage(MessageEntry m)
        {
            switch (m.MemberName)
            {
                default:
                    throw new Exception();
            }
        }
        protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m)
        {
            string rr_ename = rr_m.MemberName;
            MessageEntry rr_mr = new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
            rr_mr.ServicePath = rr_m.ServicePath;
            rr_mr.RequestID = rr_m.RequestID;
            switch (rr_ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return rr_mr;
        }
        protected override void DispatchWireMessage(MessageEntry m)
        {
            switch (m.MemberName)
            {
                default:
                    throw new Exception();
            }
        }
    }
    public class obj5_stub : ServiceStub, obj5
    {
        private Pipe<int> rr_q1;
        private Pipe<int> rr_q2;
        private Wire<int> rr_w1;
        private Wire<int> rr_w2;
        private ArrayMemory<int> rr_m1;
        private ArrayMemory<int> rr_m2;
        private ArrayMemory<int> rr_m3;
        public obj5_stub(string path, ClientContext c) : base(path, c)
        {
            rr_q1 = new PipeClient<int>("q1", this);
            rr_q2 = new PipeClient<int>("q2", this);
            rr_w1 = new WireClient<int>("w1", this);
            rr_w2 = new WireClient<int>("w2", this);
            rr_m1 = new ArrayMemoryClient<int>("m1", this, MemberDefinition_Direction.both);
            rr_m2 = new ArrayMemoryClient<int>("m2", this, MemberDefinition_Direction.both);
            rr_m3 = new ArrayMemoryClient<int>("m3", this, MemberDefinition_Direction.both);
        }
        public async Task<double> get_p1(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "p1");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return (MessageElementUtil.UnpackScalar<double>(me));
        }
        public async Task set_p1(double value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "p1");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackScalar<double>("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<double> get_p2(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "p2");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return (MessageElementUtil.UnpackScalar<double>(me));
        }
        public async Task set_p2(double value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "p2");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackScalar<double>("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<double> get_p3(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "p3");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return (MessageElementUtil.UnpackScalar<double>(me));
        }
        public async Task set_p3(double value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "p3");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackScalar<double>("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        public async Task<int> f1(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry rr_m = new MessageEntry(MessageEntryType.FunctionCallReq, "f1");
            MessageEntry rr_me = await ProcessRequest(rr_m, cancel).ConfigureAwait(false);
            return (MessageElementUtil.UnpackScalar<int>(rr_me.FindElement("return")));
        }
        public async Task<int> f2(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry rr_m = new MessageEntry(MessageEntryType.FunctionCallReq, "f2");
            MessageEntry rr_me = await ProcessRequest(rr_m, cancel).ConfigureAwait(false);
            return (MessageElementUtil.UnpackScalar<int>(rr_me.FindElement("return")));
        }
        protected override void DispatchEvent(MessageEntry rr_m)
        {
            switch (rr_m.MemberName)
            {
                default:
                    break;
            }
        }
        public Pipe<int> q1
        {
            get { return rr_q1; }
            set { throw new InvalidOperationException(); }
        }
        public Pipe<int> q2
        {
            get { return rr_q2; }
            set { throw new InvalidOperationException(); }
        }
        public Wire<int> w1
        {
            get { return rr_w1; }
            set { throw new InvalidOperationException(); }
        }
        public Wire<int> w2
        {
            get { return rr_w2; }
            set { throw new InvalidOperationException(); }
        }
        public ArrayMemory<int> m1
        {
            get { return rr_m1; }
        }
        public ArrayMemory<int> m2
        {
            get { return rr_m2; }
        }
        public ArrayMemory<int> m3
        {
            get { return rr_m3; }
        }
        protected override void DispatchPipeMessage(MessageEntry m)
        {
            switch (m.MemberName)
            {
                case "q1":
                    this.rr_q1.PipePacketReceived(m);
                    break;
                case "q2":
                    this.rr_q2.PipePacketReceived(m);
                    break;
                default:
                    throw new Exception();
            }
        }
        protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m)
        {
            string rr_ename = rr_m.MemberName;
            MessageEntry rr_mr = new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
            rr_mr.ServicePath = rr_m.ServicePath;
            rr_mr.RequestID = rr_m.RequestID;
            switch (rr_ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return rr_mr;
        }
        protected override void DispatchWireMessage(MessageEntry m)
        {
            switch (m.MemberName)
            {
                case "w1":
                    this.rr_w1.WirePacketReceived(m);
                    break;
                case "w2":
                    this.rr_w2.WirePacketReceived(m);
                    break;
                default:
                    throw new Exception();
            }
        }
    }
    public class testroot3_skel : ServiceSkel
    {
        protected testroot3 obj;
        public testroot3_skel(string p, testroot3 o, ServerContext c) : base(p, o, c) { obj = (testroot3)o; }
        public override void ReleaseCastObject()
        {
        }
        public override async Task<MessageEntry> CallGetProperty(MessageEntry m)
        {
            string ename = m.MemberName;
            MessageEntry mr = new MessageEntry(MessageEntryType.PropertyGetRes, ename);
            switch (ename)
            {
                case "readme":
                    {
                        int ret = await obj.get_readme().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackScalar<int>("value", ret));
                        break;
                    }
                case "writeme":
                    {
                        int ret = await obj.get_writeme().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackScalar<int>("value", ret));
                        break;
                    }
                case "unknown_modifier":
                    {
                        int ret = await obj.get_unknown_modifier().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackScalar<int>("value", ret));
                        break;
                    }
                case "testenum1_prop":
                    {
                        testenum1 ret = await obj.get_testenum1_prop().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackEnum<testenum1>("value", ret));
                        break;
                    }
                case "testpod1_prop":
                    {
                        testpod1 ret = await obj.get_testpod1_prop().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackPodToArray<testpod1>(rr_node, rr_context, "value", ref ret));
                        break;
                    }
                case "teststruct3_prop":
                    {
                        teststruct3 ret = await obj.get_teststruct3_prop().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "value", ret));
                        break;
                    }
                case "d1":
                    {
                        List<double[]> ret = await obj.get_d1().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackListType<double[]>(rr_node, rr_context, "value", DataTypeUtil.VerifyArrayLength(ret, 6, false)));
                        break;
                    }
                case "d2":
                    {
                        List<double[]> ret = await obj.get_d2().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackListType<double[]>(rr_node, rr_context, "value", DataTypeUtil.VerifyArrayLength(ret, 6, true)));
                        break;
                    }
                case "d3":
                    {
                        Dictionary<int, double[]> ret = await obj.get_d3().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackMapType<int, double[]>(rr_node, rr_context, "value", DataTypeUtil.VerifyArrayLength(ret, 6, false)));
                        break;
                    }
                case "d4":
                    {
                        Dictionary<int, double[]> ret = await obj.get_d4().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackMapType<int, double[]>(rr_node, rr_context, "value", DataTypeUtil.VerifyArrayLength(ret, 6, true)));
                        break;
                    }
                case "d5":
                    {
                        List<MultiDimArray> ret = await obj.get_d5().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackListType<MultiDimArray>(rr_node, rr_context, "value", DataTypeUtil.VerifyArrayLength(ret, 9, new uint[] { 3, 3 })));
                        break;
                    }
                case "d6":
                    {
                        Dictionary<int, MultiDimArray> ret = await obj.get_d6().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackMapType<int, MultiDimArray>(rr_node, rr_context, "value", DataTypeUtil.VerifyArrayLength(ret, 9, new uint[] { 3, 3 })));
                        break;
                    }
                case "testnamedarray1":
                    {
                        vector3 ret = await obj.get_testnamedarray1().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackNamedArrayToArray<vector3>(rr_node, rr_context, "value", ref ret));
                        break;
                    }
                case "testnamedarray2":
                    {
                        transform ret = await obj.get_testnamedarray2().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackNamedArrayToArray<transform>(rr_node, rr_context, "value", ref ret));
                        break;
                    }
                case "testnamedarray3":
                    {
                        transform[] ret = await obj.get_testnamedarray3().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackNamedArray<transform>(rr_node, rr_context, "value", DataTypeUtil.VerifyArrayLength(ret, 10, true)));
                        break;
                    }
                case "testnamedarray4":
                    {
                        NamedMultiDimArray ret = await obj.get_testnamedarray4().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackNamedMultiDimArray<transform>(rr_node, rr_context, "value", ret));
                        break;
                    }
                case "testnamedarray5":
                    {
                        NamedMultiDimArray ret = await obj.get_testnamedarray5().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackNamedMultiDimArray<transform>(rr_node, rr_context, "value", DataTypeUtil.VerifyArrayLength(ret, 6, new uint[] { 3, 2 })));
                        break;
                    }
                case "c1":
                    {
                        CDouble ret = await obj.get_c1().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackScalar<CDouble>("value", ret));
                        break;
                    }
                case "c2":
                    {
                        CDouble[] ret = await obj.get_c2().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackArray<CDouble>("value", ret));
                        break;
                    }
                case "c3":
                    {
                        MultiDimArray ret = await obj.get_c3().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackMultiDimArray(rr_node, "value", (MultiDimArray)ret));
                        break;
                    }
                case "c4":
                    {
                        List<CDouble> ret = await obj.get_c4().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackListType<CDouble>(rr_node, rr_context, "value", ret));
                        break;
                    }
                case "c5":
                    {
                        List<CDouble[]> ret = await obj.get_c5().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackListType<CDouble[]>(rr_node, rr_context, "value", ret));
                        break;
                    }
                case "c6":
                    {
                        List<MultiDimArray> ret = await obj.get_c6().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackListType<MultiDimArray>(rr_node, rr_context, "value", ret));
                        break;
                    }
                case "c7":
                    {
                        CSingle ret = await obj.get_c7().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackScalar<CSingle>("value", ret));
                        break;
                    }
                case "c8":
                    {
                        CSingle[] ret = await obj.get_c8().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackArray<CSingle>("value", ret));
                        break;
                    }
                case "c9":
                    {
                        MultiDimArray ret = await obj.get_c9().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackMultiDimArray(rr_node, "value", (MultiDimArray)ret));
                        break;
                    }
                case "c10":
                    {
                        List<CSingle> ret = await obj.get_c10().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackListType<CSingle>(rr_node, rr_context, "value", ret));
                        break;
                    }
                case "c11":
                    {
                        List<CSingle[]> ret = await obj.get_c11().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackListType<CSingle[]>(rr_node, rr_context, "value", ret));
                        break;
                    }
                case "c12":
                    {
                        List<MultiDimArray> ret = await obj.get_c12().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackListType<MultiDimArray>(rr_node, rr_context, "value", ret));
                        break;
                    }
                case "b1":
                    {
                        bool ret = await obj.get_b1().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackScalar<bool>("value", ret));
                        break;
                    }
                case "b2":
                    {
                        bool[] ret = await obj.get_b2().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackArray<bool>("value", ret));
                        break;
                    }
                case "b3":
                    {
                        MultiDimArray ret = await obj.get_b3().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackMultiDimArray(rr_node, "value", (MultiDimArray)ret));
                        break;
                    }
                case "b4":
                    {
                        List<bool> ret = await obj.get_b4().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackListType<bool>(rr_node, rr_context, "value", ret));
                        break;
                    }
                case "b5":
                    {
                        List<bool[]> ret = await obj.get_b5().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackListType<bool[]>(rr_node, rr_context, "value", ret));
                        break;
                    }
                case "b6":
                    {
                        List<MultiDimArray> ret = await obj.get_b6().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackListType<MultiDimArray>(rr_node, rr_context, "value", ret));
                        break;
                    }
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return mr;
        }
        public override async Task<MessageEntry> CallSetProperty(MessageEntry m)
        {
            string ename = m.MemberName;
            MessageElement me = m.FindElement("value");
            MessageEntry mr = new MessageEntry(MessageEntryType.PropertySetRes, ename);
            switch (ename)
            {
                case "readme":
                    {
                        await obj.set_readme((MessageElementUtil.UnpackScalar<int>(me))).ConfigureAwait(false);
                        break;
                    }
                case "writeme":
                    {
                        await obj.set_writeme((MessageElementUtil.UnpackScalar<int>(me))).ConfigureAwait(false);
                        break;
                    }
                case "unknown_modifier":
                    {
                        await obj.set_unknown_modifier((MessageElementUtil.UnpackScalar<int>(me))).ConfigureAwait(false);
                        break;
                    }
                case "testenum1_prop":
                    {
                        await obj.set_testenum1_prop(MessageElementUtil.UnpackEnum<testenum1>(me)).ConfigureAwait(false);
                        break;
                    }
                case "testpod1_prop":
                    {
                        await obj.set_testpod1_prop(MessageElementUtil.UnpackPodFromArray<testpod1>(rr_node, rr_context, me)).ConfigureAwait(false);
                        break;
                    }
                case "teststruct3_prop":
                    {
                        await obj.set_teststruct3_prop(MessageElementUtil.UnpackStructure<teststruct3>(rr_node, rr_context, me)).ConfigureAwait(false);
                        break;
                    }
                case "d1":
                    {
                        await obj.set_d1(DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackList<double[]>(rr_node, rr_context, me), 6, false)).ConfigureAwait(false);
                        break;
                    }
                case "d2":
                    {
                        await obj.set_d2(DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackList<double[]>(rr_node, rr_context, me), 6, true)).ConfigureAwait(false);
                        break;
                    }
                case "d3":
                    {
                        await obj.set_d3(DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackMap<int, double[]>(rr_node, rr_context, me), 6, false)).ConfigureAwait(false);
                        break;
                    }
                case "d4":
                    {
                        await obj.set_d4(DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackMap<int, double[]>(rr_node, rr_context, me), 6, true)).ConfigureAwait(false);
                        break;
                    }
                case "d5":
                    {
                        await obj.set_d5(DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackList<MultiDimArray>(rr_node, rr_context, me), 9, new uint[] { 3, 3 })).ConfigureAwait(false);
                        break;
                    }
                case "d6":
                    {
                        await obj.set_d6(DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackMap<int, MultiDimArray>(rr_node, rr_context, me), 9, new uint[] { 3, 3 })).ConfigureAwait(false);
                        break;
                    }
                case "testnamedarray1":
                    {
                        await obj.set_testnamedarray1(MessageElementUtil.UnpackNamedArrayFromArray<vector3>(rr_node, rr_context, me)).ConfigureAwait(false);
                        break;
                    }
                case "testnamedarray2":
                    {
                        await obj.set_testnamedarray2(MessageElementUtil.UnpackNamedArrayFromArray<transform>(rr_node, rr_context, me)).ConfigureAwait(false);
                        break;
                    }
                case "testnamedarray3":
                    {
                        await obj.set_testnamedarray3(DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackNamedArray<transform>(rr_node, rr_context, me), 10, true)).ConfigureAwait(false);
                        break;
                    }
                case "testnamedarray4":
                    {
                        await obj.set_testnamedarray4(MessageElementUtil.UnpackNamedMultiDimArray<transform>(rr_node, rr_context, me)).ConfigureAwait(false);
                        break;
                    }
                case "testnamedarray5":
                    {
                        await obj.set_testnamedarray5(DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackNamedMultiDimArray<transform>(rr_node, rr_context, me), 6, new uint[] { 3, 2 })).ConfigureAwait(false);
                        break;
                    }
                case "c1":
                    {
                        await obj.set_c1((MessageElementUtil.UnpackScalar<CDouble>(me))).ConfigureAwait(false);
                        break;
                    }
                case "c2":
                    {
                        await obj.set_c2(MessageElementUtil.UnpackArray<CDouble>(me)).ConfigureAwait(false);
                        break;
                    }
                case "c3":
                    {
                        await obj.set_c3(MessageElementUtil.UnpackMultiDimArray(rr_node, me)).ConfigureAwait(false);
                        break;
                    }
                case "c4":
                    {
                        await obj.set_c4(MessageElementUtil.UnpackList<CDouble>(rr_node, rr_context, me)).ConfigureAwait(false);
                        break;
                    }
                case "c5":
                    {
                        await obj.set_c5(MessageElementUtil.UnpackList<CDouble[]>(rr_node, rr_context, me)).ConfigureAwait(false);
                        break;
                    }
                case "c6":
                    {
                        await obj.set_c6(MessageElementUtil.UnpackList<MultiDimArray>(rr_node, rr_context, me)).ConfigureAwait(false);
                        break;
                    }
                case "c7":
                    {
                        await obj.set_c7((MessageElementUtil.UnpackScalar<CSingle>(me))).ConfigureAwait(false);
                        break;
                    }
                case "c8":
                    {
                        await obj.set_c8(MessageElementUtil.UnpackArray<CSingle>(me)).ConfigureAwait(false);
                        break;
                    }
                case "c9":
                    {
                        await obj.set_c9(MessageElementUtil.UnpackMultiDimArray(rr_node, me)).ConfigureAwait(false);
                        break;
                    }
                case "c10":
                    {
                        await obj.set_c10(MessageElementUtil.UnpackList<CSingle>(rr_node, rr_context, me)).ConfigureAwait(false);
                        break;
                    }
                case "c11":
                    {
                        await obj.set_c11(MessageElementUtil.UnpackList<CSingle[]>(rr_node, rr_context, me)).ConfigureAwait(false);
                        break;
                    }
                case "c12":
                    {
                        await obj.set_c12(MessageElementUtil.UnpackList<MultiDimArray>(rr_node, rr_context, me)).ConfigureAwait(false);
                        break;
                    }
                case "b1":
                    {
                        await obj.set_b1((MessageElementUtil.UnpackScalar<bool>(me))).ConfigureAwait(false);
                        break;
                    }
                case "b2":
                    {
                        await obj.set_b2(MessageElementUtil.UnpackArray<bool>(me)).ConfigureAwait(false);
                        break;
                    }
                case "b3":
                    {
                        await obj.set_b3(MessageElementUtil.UnpackMultiDimArray(rr_node, me)).ConfigureAwait(false);
                        break;
                    }
                case "b4":
                    {
                        await obj.set_b4(MessageElementUtil.UnpackList<bool>(rr_node, rr_context, me)).ConfigureAwait(false);
                        break;
                    }
                case "b5":
                    {
                        await obj.set_b5(MessageElementUtil.UnpackList<bool[]>(rr_node, rr_context, me)).ConfigureAwait(false);
                        break;
                    }
                case "b6":
                    {
                        await obj.set_b6(MessageElementUtil.UnpackList<MultiDimArray>(rr_node, rr_context, me)).ConfigureAwait(false);
                        break;
                    }
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return mr;
        }
        public override async Task<MessageEntry> CallFunction(MessageEntry rr_m)
        {
            string rr_ename = rr_m.MemberName;
            MessageEntry rr_mr = new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
            switch (rr_ename)
            {
                case "testpod1_func1":
                    {
                        testpod1 s = MessageElementUtil.UnpackPodFromArray<testpod1>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m, "s"));
                        await this.obj.testpod1_func1(s, default(CancellationToken)).ConfigureAwait(false);
                        rr_mr.AddElement("return", (int)0);
                        break;
                    }
                case "testpod1_func2":
                    {
                        testpod1 rr_ret = await this.obj.testpod1_func2(default(CancellationToken)).ConfigureAwait(false);
                        rr_mr.AddElement(MessageElementUtil.PackPodToArray<testpod1>(rr_node, rr_context, "return", ref rr_ret));
                        break;
                    }
                case "gen_func1":
                    {
                        var rr_ep = ServerEndpoint.CurrentEndpoint;
                        Generator2<double> rr_ret = await this.obj.gen_func1().ConfigureAwait(false);
                        lock (generators)
                        {
                            int rr_index = GetNewGeneratorIndex();
                            generators.Add(rr_index, new Generator2Server<double>(rr_ret, "gen_func1", rr_index, this, rr_ep));
                            rr_mr.AddElement("index", rr_index);
                        }
                        break;
                    }
                case "gen_func2":
                    {
                        string name = MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m, "name"));
                        var rr_ep = ServerEndpoint.CurrentEndpoint;
                        Generator2<byte[]> rr_ret = await this.obj.gen_func2(name).ConfigureAwait(false);
                        lock (generators)
                        {
                            int rr_index = GetNewGeneratorIndex();
                            generators.Add(rr_index, new Generator2Server<byte[]>(rr_ret, "gen_func2", rr_index, this, rr_ep));
                            rr_mr.AddElement("index", rr_index);
                        }
                        break;
                    }
                case "gen_func3":
                    {
                        string name = MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m, "name"));
                        var rr_ep = ServerEndpoint.CurrentEndpoint;
                        Generator3<byte[]> rr_ret = await this.obj.gen_func3(name).ConfigureAwait(false);
                        lock (generators)
                        {
                            int rr_index = GetNewGeneratorIndex();
                            generators.Add(rr_index, new Generator3Server<byte[]>(rr_ret, "gen_func3", rr_index, this, rr_ep));
                            rr_mr.AddElement("index", rr_index);
                        }
                        break;
                    }
                case "gen_func4":
                    {
                        var rr_ep = ServerEndpoint.CurrentEndpoint;
                        Generator1<byte[], byte[]> rr_ret = await this.obj.gen_func4().ConfigureAwait(false);
                        lock (generators)
                        {
                            int rr_index = GetNewGeneratorIndex();
                            generators.Add(rr_index, new Generator1Server<byte[], byte[]>(rr_ret, "gen_func4", rr_index, this, rr_ep));
                            rr_mr.AddElement("index", rr_index);
                        }
                        break;
                    }
                case "gen_func5":
                    {
                        var rr_ep = ServerEndpoint.CurrentEndpoint;
                        Generator1<com.robotraconteur.testing.TestService1.teststruct2, com.robotraconteur.testing.TestService1.teststruct2> rr_ret = await this.obj.gen_func5().ConfigureAwait(false);
                        lock (generators)
                        {
                            int rr_index = GetNewGeneratorIndex();
                            generators.Add(rr_index, new Generator1Server<com.robotraconteur.testing.TestService1.teststruct2, com.robotraconteur.testing.TestService1.teststruct2>(rr_ret, "gen_func5", rr_index, this, rr_ep));
                            rr_mr.AddElement("index", rr_index);
                        }
                        break;
                    }
                case "test_exception_params1":
                    {
                        await this.obj.test_exception_params1(default(CancellationToken)).ConfigureAwait(false);
                        rr_mr.AddElement("return", (int)0);
                        break;
                    }
                case "test_exception_params2":
                    {
                        await this.obj.test_exception_params2(default(CancellationToken)).ConfigureAwait(false);
                        rr_mr.AddElement("return", (int)0);
                        break;
                    }
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return rr_mr;
        }
        public override async Task<object> GetSubObj(string name, string ind)
        {
            switch (name)
            {
                case "o4":
                    {
                        return await obj.get_o4().ConfigureAwait(false);
                    }
                case "nolock_test":
                    {
                        return await obj.get_nolock_test().ConfigureAwait(false);
                    }
                default:
                    break;
            }
            throw new MemberNotFoundException("");
        }
        public override void RegisterEvents(object rrobj1)
        {
            obj = (testroot3)rrobj1;
        }
        public override void UnregisterEvents(object rrobj1)
        {
            obj = (testroot3)rrobj1;
        }
        public override object GetCallbackFunction(uint rr_endpoint, string rr_membername)
        {
            switch (rr_membername)
            {
                default:
                    break;
            }
            throw new MemberNotFoundException("Member not found");
        }
        private PipeServer<int> rr_unreliable1;
        private PipeServer<int[]> rr_p1;
        private PipeServer<int[]> rr_p2;
        private PipeServer<MultiDimArray> rr_p3;
        private WireServer<int> rr_peekwire;
        private WireServer<int> rr_pokewire;
        private WireServer<int[]> rr_w1;
        private WireServer<int[]> rr_w2;
        private WireServer<MultiDimArray> rr_w3;
        private bool rr_InitPipeServersRun = false;
        public override void InitPipeServers(object o)
        {
            if (this.rr_InitPipeServersRun) return;
            this.rr_InitPipeServersRun = true;
            testroot3 castobj = (testroot3)o;
            this.rr_unreliable1 = new PipeServer<int>("unreliable1", this);
            this.rr_p1 = new PipeServer<int[]>("p1", this);
            this.rr_p2 = new PipeServer<int[]>("p2", this);
            this.rr_p3 = new PipeServer<MultiDimArray>("p3", this);
            this.rr_peekwire = new WireServer<int>("peekwire", this);
            this.rr_pokewire = new WireServer<int>("pokewire", this);
            this.rr_w1 = new WireServer<int[]>("w1", this);
            this.rr_w2 = new WireServer<int[]>("w2", this);
            this.rr_w3 = new WireServer<MultiDimArray>("w3", this);
            castobj.unreliable1 = this.rr_unreliable1;
            castobj.p1 = this.rr_p1;
            castobj.p2 = this.rr_p2;
            castobj.p3 = this.rr_p3;
            castobj.peekwire = this.rr_peekwire;
            castobj.pokewire = this.rr_pokewire;
            castobj.w1 = this.rr_w1;
            castobj.w2 = this.rr_w2;
            castobj.w3 = this.rr_w3;
        }
        public override void InitCallbackServers(object rrobj1)
        {
            obj = (testroot3)rrobj1;
        }
        public override async Task<MessageEntry> CallPipeFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                case "unreliable1":
                    return await this.rr_unreliable1.PipeCommand(m, e).ConfigureAwait(false);
                case "p1":
                    return await this.rr_p1.PipeCommand(m, e).ConfigureAwait(false);
                case "p2":
                    return await this.rr_p2.PipeCommand(m, e).ConfigureAwait(false);
                case "p3":
                    return await this.rr_p3.PipeCommand(m, e).ConfigureAwait(false);
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override async Task<MessageEntry> CallWireFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                case "peekwire":
                    return await this.rr_peekwire.WireCommand(m, e).ConfigureAwait(false);
                case "pokewire":
                    return await this.rr_pokewire.WireCommand(m, e).ConfigureAwait(false);
                case "w1":
                    return await this.rr_w1.WireCommand(m, e).ConfigureAwait(false);
                case "w2":
                    return await this.rr_w2.WireCommand(m, e).ConfigureAwait(false);
                case "w3":
                    return await this.rr_w3.WireCommand(m, e).ConfigureAwait(false);
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
        {
            switch (m.MemberName)
            {
                case "unreliable1":
                    this.rr_unreliable1.PipePacketReceived(m, e);
                    break;
                case "p1":
                    this.rr_p1.PipePacketReceived(m, e);
                    break;
                case "p2":
                    this.rr_p2.PipePacketReceived(m, e);
                    break;
                case "p3":
                    this.rr_p3.PipePacketReceived(m, e);
                    break;
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override void DispatchWireMessage(MessageEntry m, Endpoint e)
        {
            switch (m.MemberName)
            {
                case "peekwire":
                    this.rr_peekwire.WirePacketReceived(m, e);
                    break;
                case "pokewire":
                    this.rr_pokewire.WirePacketReceived(m, e);
                    break;
                case "w1":
                    this.rr_w1.WirePacketReceived(m, e);
                    break;
                case "w2":
                    this.rr_w2.WirePacketReceived(m, e);
                    break;
                case "w3":
                    this.rr_w3.WirePacketReceived(m, e);
                    break;
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                case "readmem":
                    return await (new ArrayMemoryServiceSkel<double>("readmem", this, MemberDefinition_Direction.readonly_)).CallMemoryFunction(m, e, obj.readmem).ConfigureAwait(false);
                    break;
                case "pod_m1":
                    return await (new PodArrayMemoryServiceSkel<testpod2>("pod_m1", this, 111, MemberDefinition_Direction.both)).CallMemoryFunction(m, e, obj.pod_m1).ConfigureAwait(false);
                    break;
                case "pod_m2":
                    return await (new PodMultiDimArrayMemoryServiceSkel<testpod2>("pod_m2", this, 111, MemberDefinition_Direction.both)).CallMemoryFunction(m, e, obj.pod_m2).ConfigureAwait(false);
                    break;
                case "namedarray_m1":
                    return await (new NamedArrayMemoryServiceSkel<transform>("namedarray_m1", this, 7, MemberDefinition_Direction.both)).CallMemoryFunction(m, e, obj.namedarray_m1).ConfigureAwait(false);
                    break;
                case "namedarray_m2":
                    return await (new NamedMultiDimArrayMemoryServiceSkel<transform>("namedarray_m2", this, 7, MemberDefinition_Direction.both)).CallMemoryFunction(m, e, obj.namedarray_m2).ConfigureAwait(false);
                    break;
                case "c_m1":
                    return await (new ArrayMemoryServiceSkel<CDouble>("c_m1", this, MemberDefinition_Direction.both)).CallMemoryFunction(m, e, obj.c_m1).ConfigureAwait(false);
                    break;
                case "c_m2":
                    return await (new MultiDimArrayMemoryServiceSkel<CDouble>("c_m2", this, MemberDefinition_Direction.both)).CallMemoryFunction(m, e, obj.c_m2).ConfigureAwait(false);
                    break;
                case "c_m3":
                    return await (new ArrayMemoryServiceSkel<CDouble>("c_m3", this, MemberDefinition_Direction.both)).CallMemoryFunction(m, e, obj.c_m3).ConfigureAwait(false);
                    break;
                case "c_m4":
                    return await (new MultiDimArrayMemoryServiceSkel<CDouble>("c_m4", this, MemberDefinition_Direction.both)).CallMemoryFunction(m, e, obj.c_m4).ConfigureAwait(false);
                    break;
                case "c_m5":
                    return await (new ArrayMemoryServiceSkel<bool>("c_m5", this, MemberDefinition_Direction.both)).CallMemoryFunction(m, e, obj.c_m5).ConfigureAwait(false);
                    break;
                case "c_m6":
                    return await (new MultiDimArrayMemoryServiceSkel<bool>("c_m6", this, MemberDefinition_Direction.both)).CallMemoryFunction(m, e, obj.c_m6).ConfigureAwait(false);
                    break;
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override bool IsRequestNoLock(MessageEntry m)
        {
            return false;
        }
    }
    public class obj1_skel : ServiceSkel
    {
        protected obj1 obj;
        public obj1_skel(string p, obj1 o, ServerContext c) : base(p, o, c) { obj = (obj1)o; }
        public override void ReleaseCastObject()
        {
        }
        public override async Task<MessageEntry> CallGetProperty(MessageEntry m)
        {
            string ename = m.MemberName;
            MessageEntry mr = new MessageEntry(MessageEntryType.PropertyGetRes, ename);
            switch (ename)
            {
                case "d1":
                    {
                        double[] ret = await obj.get_d1().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackArray<double>("value", ret));
                        break;
                    }
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return mr;
        }
        public override async Task<MessageEntry> CallSetProperty(MessageEntry m)
        {
            string ename = m.MemberName;
            MessageElement me = m.FindElement("value");
            MessageEntry mr = new MessageEntry(MessageEntryType.PropertySetRes, ename);
            switch (ename)
            {
                case "d1":
                    {
                        await obj.set_d1(MessageElementUtil.UnpackArray<double>(me)).ConfigureAwait(false);
                        break;
                    }
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return mr;
        }
        public override async Task<MessageEntry> CallFunction(MessageEntry rr_m)
        {
            string rr_ename = rr_m.MemberName;
            MessageEntry rr_mr = new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
            switch (rr_ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return rr_mr;
        }
        public override async Task<object> GetSubObj(string name, string ind)
        {
            switch (name)
            {
                default:
                    break;
            }
            throw new MemberNotFoundException("");
        }
        public override void RegisterEvents(object rrobj1)
        {
            obj = (obj1)rrobj1;
        }
        public override void UnregisterEvents(object rrobj1)
        {
            obj = (obj1)rrobj1;
        }
        public override object GetCallbackFunction(uint rr_endpoint, string rr_membername)
        {
            switch (rr_membername)
            {
                default:
                    break;
            }
            throw new MemberNotFoundException("Member not found");
        }
        private bool rr_InitPipeServersRun = false;
        public override void InitPipeServers(object o)
        {
            if (this.rr_InitPipeServersRun) return;
            this.rr_InitPipeServersRun = true;
            obj1 castobj = (obj1)o;
        }
        public override void InitCallbackServers(object rrobj1)
        {
            obj = (obj1)rrobj1;
        }
        public override async Task<MessageEntry> CallPipeFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override async Task<MessageEntry> CallWireFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
        {
            switch (m.MemberName)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override void DispatchWireMessage(MessageEntry m, Endpoint e)
        {
            switch (m.MemberName)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override bool IsRequestNoLock(MessageEntry m)
        {
            return false;
        }
    }
    public class obj2_skel : ServiceSkel
    {
        protected obj2 obj;
        public obj2_skel(string p, obj2 o, ServerContext c) : base(p, o, c) { obj = (obj2)o; }
        public override void ReleaseCastObject()
        {
        }
        public override async Task<MessageEntry> CallGetProperty(MessageEntry m)
        {
            string ename = m.MemberName;
            MessageEntry mr = new MessageEntry(MessageEntryType.PropertyGetRes, ename);
            switch (ename)
            {
                case "d1":
                    {
                        double[] ret = await obj.get_d1().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackArray<double>("value", ret));
                        break;
                    }
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return mr;
        }
        public override async Task<MessageEntry> CallSetProperty(MessageEntry m)
        {
            string ename = m.MemberName;
            MessageElement me = m.FindElement("value");
            MessageEntry mr = new MessageEntry(MessageEntryType.PropertySetRes, ename);
            switch (ename)
            {
                case "d1":
                    {
                        await obj.set_d1(MessageElementUtil.UnpackArray<double>(me)).ConfigureAwait(false);
                        break;
                    }
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return mr;
        }
        public override async Task<MessageEntry> CallFunction(MessageEntry rr_m)
        {
            string rr_ename = rr_m.MemberName;
            MessageEntry rr_mr = new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
            switch (rr_ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return rr_mr;
        }
        public override async Task<object> GetSubObj(string name, string ind)
        {
            switch (name)
            {
                default:
                    break;
            }
            throw new MemberNotFoundException("");
        }
        public override void RegisterEvents(object rrobj1)
        {
            obj = (obj2)rrobj1;
        }
        public override void UnregisterEvents(object rrobj1)
        {
            obj = (obj2)rrobj1;
        }
        public override object GetCallbackFunction(uint rr_endpoint, string rr_membername)
        {
            switch (rr_membername)
            {
                default:
                    break;
            }
            throw new MemberNotFoundException("Member not found");
        }
        private bool rr_InitPipeServersRun = false;
        public override void InitPipeServers(object o)
        {
            if (this.rr_InitPipeServersRun) return;
            this.rr_InitPipeServersRun = true;
            obj2 castobj = (obj2)o;
        }
        public override void InitCallbackServers(object rrobj1)
        {
            obj = (obj2)rrobj1;
        }
        public override async Task<MessageEntry> CallPipeFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override async Task<MessageEntry> CallWireFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
        {
            switch (m.MemberName)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override void DispatchWireMessage(MessageEntry m, Endpoint e)
        {
            switch (m.MemberName)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override bool IsRequestNoLock(MessageEntry m)
        {
            return false;
        }
    }
    public class obj3_skel : ServiceSkel
    {
        protected obj3 obj;
        public obj3_skel(string p, obj3 o, ServerContext c) : base(p, o, c) { obj = (obj3)o; }
        public override void ReleaseCastObject()
        {
        }
        public override async Task<MessageEntry> CallGetProperty(MessageEntry m)
        {
            string ename = m.MemberName;
            MessageEntry mr = new MessageEntry(MessageEntryType.PropertyGetRes, ename);
            switch (ename)
            {
                case "d1":
                    {
                        double[] ret = await obj.get_d1().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackArray<double>("value", ret));
                        break;
                    }
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return mr;
        }
        public override async Task<MessageEntry> CallSetProperty(MessageEntry m)
        {
            string ename = m.MemberName;
            MessageElement me = m.FindElement("value");
            MessageEntry mr = new MessageEntry(MessageEntryType.PropertySetRes, ename);
            switch (ename)
            {
                case "d1":
                    {
                        await obj.set_d1(MessageElementUtil.UnpackArray<double>(me)).ConfigureAwait(false);
                        break;
                    }
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return mr;
        }
        public override async Task<MessageEntry> CallFunction(MessageEntry rr_m)
        {
            string rr_ename = rr_m.MemberName;
            MessageEntry rr_mr = new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
            switch (rr_ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return rr_mr;
        }
        public override async Task<object> GetSubObj(string name, string ind)
        {
            switch (name)
            {
                default:
                    break;
            }
            throw new MemberNotFoundException("");
        }
        public override void RegisterEvents(object rrobj1)
        {
            obj = (obj3)rrobj1;
        }
        public override void UnregisterEvents(object rrobj1)
        {
            obj = (obj3)rrobj1;
        }
        public override object GetCallbackFunction(uint rr_endpoint, string rr_membername)
        {
            switch (rr_membername)
            {
                default:
                    break;
            }
            throw new MemberNotFoundException("Member not found");
        }
        private bool rr_InitPipeServersRun = false;
        public override void InitPipeServers(object o)
        {
            if (this.rr_InitPipeServersRun) return;
            this.rr_InitPipeServersRun = true;
            obj3 castobj = (obj3)o;
        }
        public override void InitCallbackServers(object rrobj1)
        {
            obj = (obj3)rrobj1;
        }
        public override async Task<MessageEntry> CallPipeFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override async Task<MessageEntry> CallWireFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
        {
            switch (m.MemberName)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override void DispatchWireMessage(MessageEntry m, Endpoint e)
        {
            switch (m.MemberName)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override bool IsRequestNoLock(MessageEntry m)
        {
            return false;
        }
    }
    public class obj4_skel : ServiceSkel
    {
        protected obj4 obj;
        public obj4_skel(string p, obj4 o, ServerContext c) : base(p, o, c) { obj = (obj4)o; }
        public override void ReleaseCastObject()
        {
        }
        public override async Task<MessageEntry> CallGetProperty(MessageEntry m)
        {
            string ename = m.MemberName;
            MessageEntry mr = new MessageEntry(MessageEntryType.PropertyGetRes, ename);
            switch (ename)
            {
                case "s_ind":
                    {
                        string ret = await obj.get_s_ind().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackString("value", ret));
                        break;
                    }
                case "i_ind":
                    {
                        int ret = await obj.get_i_ind().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackScalar<int>("value", ret));
                        break;
                    }
                case "data":
                    {
                        string ret = await obj.get_data().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackString("value", ret));
                        break;
                    }
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return mr;
        }
        public override async Task<MessageEntry> CallSetProperty(MessageEntry m)
        {
            string ename = m.MemberName;
            MessageElement me = m.FindElement("value");
            MessageEntry mr = new MessageEntry(MessageEntryType.PropertySetRes, ename);
            switch (ename)
            {
                case "s_ind":
                    {
                        await obj.set_s_ind(MessageElementUtil.UnpackString(me)).ConfigureAwait(false);
                        break;
                    }
                case "i_ind":
                    {
                        await obj.set_i_ind((MessageElementUtil.UnpackScalar<int>(me))).ConfigureAwait(false);
                        break;
                    }
                case "data":
                    {
                        await obj.set_data(MessageElementUtil.UnpackString(me)).ConfigureAwait(false);
                        break;
                    }
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return mr;
        }
        public override async Task<MessageEntry> CallFunction(MessageEntry rr_m)
        {
            string rr_ename = rr_m.MemberName;
            MessageEntry rr_mr = new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
            switch (rr_ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return rr_mr;
        }
        public override async Task<object> GetSubObj(string name, string ind)
        {
            switch (name)
            {
                case "o3_1":
                    {
                        return await obj.get_o3_1(ind).ConfigureAwait(false);
                    }
                default:
                    break;
            }
            throw new MemberNotFoundException("");
        }
        public override void RegisterEvents(object rrobj1)
        {
            obj = (obj4)rrobj1;
        }
        public override void UnregisterEvents(object rrobj1)
        {
            obj = (obj4)rrobj1;
        }
        public override object GetCallbackFunction(uint rr_endpoint, string rr_membername)
        {
            switch (rr_membername)
            {
                default:
                    break;
            }
            throw new MemberNotFoundException("Member not found");
        }
        private bool rr_InitPipeServersRun = false;
        public override void InitPipeServers(object o)
        {
            if (this.rr_InitPipeServersRun) return;
            this.rr_InitPipeServersRun = true;
            obj4 castobj = (obj4)o;
        }
        public override void InitCallbackServers(object rrobj1)
        {
            obj = (obj4)rrobj1;
        }
        public override async Task<MessageEntry> CallPipeFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override async Task<MessageEntry> CallWireFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
        {
            switch (m.MemberName)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override void DispatchWireMessage(MessageEntry m, Endpoint e)
        {
            switch (m.MemberName)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override bool IsRequestNoLock(MessageEntry m)
        {
            return false;
        }
    }
    public class obj5_skel : ServiceSkel
    {
        protected obj5 obj;
        public obj5_skel(string p, obj5 o, ServerContext c) : base(p, o, c) { obj = (obj5)o; }
        public override void ReleaseCastObject()
        {
        }
        public override async Task<MessageEntry> CallGetProperty(MessageEntry m)
        {
            string ename = m.MemberName;
            MessageEntry mr = new MessageEntry(MessageEntryType.PropertyGetRes, ename);
            switch (ename)
            {
                case "p1":
                    {
                        double ret = await obj.get_p1().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackScalar<double>("value", ret));
                        break;
                    }
                case "p2":
                    {
                        double ret = await obj.get_p2().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackScalar<double>("value", ret));
                        break;
                    }
                case "p3":
                    {
                        double ret = await obj.get_p3().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackScalar<double>("value", ret));
                        break;
                    }
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return mr;
        }
        public override async Task<MessageEntry> CallSetProperty(MessageEntry m)
        {
            string ename = m.MemberName;
            MessageElement me = m.FindElement("value");
            MessageEntry mr = new MessageEntry(MessageEntryType.PropertySetRes, ename);
            switch (ename)
            {
                case "p1":
                    {
                        await obj.set_p1((MessageElementUtil.UnpackScalar<double>(me))).ConfigureAwait(false);
                        break;
                    }
                case "p2":
                    {
                        await obj.set_p2((MessageElementUtil.UnpackScalar<double>(me))).ConfigureAwait(false);
                        break;
                    }
                case "p3":
                    {
                        await obj.set_p3((MessageElementUtil.UnpackScalar<double>(me))).ConfigureAwait(false);
                        break;
                    }
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return mr;
        }
        public override async Task<MessageEntry> CallFunction(MessageEntry rr_m)
        {
            string rr_ename = rr_m.MemberName;
            MessageEntry rr_mr = new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
            switch (rr_ename)
            {
                case "f1":
                    {
                        int rr_ret = await this.obj.f1(default(CancellationToken)).ConfigureAwait(false);
                        rr_mr.AddElement(MessageElementUtil.PackScalar<int>("return", rr_ret));
                        break;
                    }
                case "f2":
                    {
                        int rr_ret = await this.obj.f2(default(CancellationToken)).ConfigureAwait(false);
                        rr_mr.AddElement(MessageElementUtil.PackScalar<int>("return", rr_ret));
                        break;
                    }
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return rr_mr;
        }
        public override async Task<object> GetSubObj(string name, string ind)
        {
            switch (name)
            {
                default:
                    break;
            }
            throw new MemberNotFoundException("");
        }
        public override void RegisterEvents(object rrobj1)
        {
            obj = (obj5)rrobj1;
        }
        public override void UnregisterEvents(object rrobj1)
        {
            obj = (obj5)rrobj1;
        }
        public override object GetCallbackFunction(uint rr_endpoint, string rr_membername)
        {
            switch (rr_membername)
            {
                default:
                    break;
            }
            throw new MemberNotFoundException("Member not found");
        }
        private PipeServer<int> rr_q1;
        private PipeServer<int> rr_q2;
        private WireServer<int> rr_w1;
        private WireServer<int> rr_w2;
        private bool rr_InitPipeServersRun = false;
        public override void InitPipeServers(object o)
        {
            if (this.rr_InitPipeServersRun) return;
            this.rr_InitPipeServersRun = true;
            obj5 castobj = (obj5)o;
            this.rr_q1 = new PipeServer<int>("q1", this);
            this.rr_q2 = new PipeServer<int>("q2", this);
            this.rr_w1 = new WireServer<int>("w1", this);
            this.rr_w2 = new WireServer<int>("w2", this);
            castobj.q1 = this.rr_q1;
            castobj.q2 = this.rr_q2;
            castobj.w1 = this.rr_w1;
            castobj.w2 = this.rr_w2;
        }
        public override void InitCallbackServers(object rrobj1)
        {
            obj = (obj5)rrobj1;
        }
        public override async Task<MessageEntry> CallPipeFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                case "q1":
                    return await this.rr_q1.PipeCommand(m, e).ConfigureAwait(false);
                case "q2":
                    return await this.rr_q2.PipeCommand(m, e).ConfigureAwait(false);
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override async Task<MessageEntry> CallWireFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                case "w1":
                    return await this.rr_w1.WireCommand(m, e).ConfigureAwait(false);
                case "w2":
                    return await this.rr_w2.WireCommand(m, e).ConfigureAwait(false);
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
        {
            switch (m.MemberName)
            {
                case "q1":
                    this.rr_q1.PipePacketReceived(m, e);
                    break;
                case "q2":
                    this.rr_q2.PipePacketReceived(m, e);
                    break;
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override void DispatchWireMessage(MessageEntry m, Endpoint e)
        {
            switch (m.MemberName)
            {
                case "w1":
                    this.rr_w1.WirePacketReceived(m, e);
                    break;
                case "w2":
                    this.rr_w2.WirePacketReceived(m, e);
                    break;
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                case "m1":
                    return await (new ArrayMemoryServiceSkel<int>("m1", this, MemberDefinition_Direction.both)).CallMemoryFunction(m, e, obj.m1).ConfigureAwait(false);
                    break;
                case "m2":
                    return await (new ArrayMemoryServiceSkel<int>("m2", this, MemberDefinition_Direction.both)).CallMemoryFunction(m, e, obj.m2).ConfigureAwait(false);
                    break;
                case "m3":
                    return await (new ArrayMemoryServiceSkel<int>("m3", this, MemberDefinition_Direction.both)).CallMemoryFunction(m, e, obj.m3).ConfigureAwait(false);
                    break;
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override bool IsRequestNoLock(MessageEntry m)
        {
            if (m.MemberName == "p2") return true;
            if (m.MemberName == "p3" && m.EntryType == MessageEntryType.PropertyGetReq) return true;
            if (m.MemberName == "f2") return true;
            if (m.MemberName == "q2") return true;
            if (m.MemberName == "w2") return true;
            if (m.MemberName == "m2") return true;
            if (m.MemberName == "m3" && (m.EntryType == MessageEntryType.MemoryRead || m.EntryType == MessageEntryType.MemoryGetParam)) return true;
            return false;
        }
    }
    public class testroot3_default_impl : testroot3
    {
        protected PipeBroadcaster<int> rrvar_unreliable1;
        protected WireBroadcaster<int> rrvar_peekwire;
        protected WireUnicastReceiver<int> rrvar_pokewire;
        public virtual Task<int> get_readme(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_readme(int value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<int> get_writeme(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_writeme(int value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<int> get_unknown_modifier(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_unknown_modifier(int value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<testenum1> get_testenum1_prop(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_testenum1_prop(testenum1 value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<testpod1> get_testpod1_prop(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_testpod1_prop(testpod1 value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<teststruct3> get_teststruct3_prop(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_teststruct3_prop(teststruct3 value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<List<double[]>> get_d1(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_d1(List<double[]> value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<List<double[]>> get_d2(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_d2(List<double[]> value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<Dictionary<int, double[]>> get_d3(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_d3(Dictionary<int, double[]> value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<Dictionary<int, double[]>> get_d4(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_d4(Dictionary<int, double[]> value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<List<MultiDimArray>> get_d5(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_d5(List<MultiDimArray> value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<Dictionary<int, MultiDimArray>> get_d6(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_d6(Dictionary<int, MultiDimArray> value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<vector3> get_testnamedarray1(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_testnamedarray1(vector3 value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<transform> get_testnamedarray2(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_testnamedarray2(transform value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<transform[]> get_testnamedarray3(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_testnamedarray3(transform[] value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<NamedMultiDimArray> get_testnamedarray4(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_testnamedarray4(NamedMultiDimArray value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<NamedMultiDimArray> get_testnamedarray5(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_testnamedarray5(NamedMultiDimArray value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<CDouble> get_c1(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_c1(CDouble value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<CDouble[]> get_c2(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_c2(CDouble[] value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<MultiDimArray> get_c3(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_c3(MultiDimArray value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<List<CDouble>> get_c4(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_c4(List<CDouble> value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<List<CDouble[]>> get_c5(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_c5(List<CDouble[]> value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<List<MultiDimArray>> get_c6(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_c6(List<MultiDimArray> value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<CSingle> get_c7(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_c7(CSingle value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<CSingle[]> get_c8(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_c8(CSingle[] value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<MultiDimArray> get_c9(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_c9(MultiDimArray value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<List<CSingle>> get_c10(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_c10(List<CSingle> value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<List<CSingle[]>> get_c11(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_c11(List<CSingle[]> value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<List<MultiDimArray>> get_c12(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_c12(List<MultiDimArray> value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<bool> get_b1(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_b1(bool value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<bool[]> get_b2(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_b2(bool[] value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<MultiDimArray> get_b3(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_b3(MultiDimArray value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<List<bool>> get_b4(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_b4(List<bool> value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<List<bool[]>> get_b5(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_b5(List<bool[]> value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<List<MultiDimArray>> get_b6(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_b6(List<MultiDimArray> value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task testpod1_func1(testpod1 s, CancellationToken rr_cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<testpod1> testpod1_func2(CancellationToken rr_cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<Generator2<double>> gen_func1(CancellationToken rr_cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<Generator2<byte[]>> gen_func2(string name, CancellationToken rr_cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<Generator3<byte[]>> gen_func3(string name, CancellationToken rr_cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<Generator1<byte[], byte[]>> gen_func4(CancellationToken rr_cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<Generator1<com.robotraconteur.testing.TestService1.teststruct2, com.robotraconteur.testing.TestService1.teststruct2>> gen_func5(CancellationToken rr_cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task test_exception_params1(CancellationToken rr_cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task test_exception_params2(CancellationToken rr_cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<obj4> get_o4(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<obj5> get_nolock_test(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Pipe<int> unreliable1
        {
            get { return rrvar_unreliable1.Pipe; }
            set
            {
                if (rrvar_unreliable1 != null) throw new InvalidOperationException("Pipe already set");
                rrvar_unreliable1 = new PipeBroadcaster<int>(value);
            }
        }
        public virtual Pipe<int[]> p1
        {
            get { throw new NotImplementedException(); }
            set { throw new InvalidOperationException(); }
        }
        public virtual Pipe<int[]> p2
        {
            get { throw new NotImplementedException(); }
            set { throw new InvalidOperationException(); }
        }
        public virtual Pipe<MultiDimArray> p3
        {
            get { throw new NotImplementedException(); }
            set { throw new InvalidOperationException(); }
        }
        public virtual Wire<int> peekwire
        {
            get { return rrvar_peekwire.Wire; }
            set
            {
                if (rrvar_peekwire != null) throw new InvalidOperationException("Pipe already set");
                rrvar_peekwire = new WireBroadcaster<int>(value);
            }
        }
        public virtual Wire<int> pokewire
        {
            get { return rrvar_pokewire.Wire; }
            set
            {
                if (rrvar_pokewire != null) throw new InvalidOperationException("Pipe already set");
                rrvar_pokewire = new WireUnicastReceiver<int>(value);
            }
        }
        public virtual Wire<int[]> w1
        {
            get { throw new NotImplementedException(); }
            set { throw new NotImplementedException(); }
        }
        public virtual Wire<int[]> w2
        {
            get { throw new NotImplementedException(); }
            set { throw new NotImplementedException(); }
        }
        public virtual Wire<MultiDimArray> w3
        {
            get { throw new NotImplementedException(); }
            set { throw new NotImplementedException(); }
        }
        public virtual ArrayMemory<double> readmem
        {
            get { throw new NotImplementedException(); }
        }
        public virtual PodArrayMemory<testpod2> pod_m1
        {
            get { throw new NotImplementedException(); }
        }
        public virtual PodMultiDimArrayMemory<testpod2> pod_m2
        {
            get { throw new NotImplementedException(); }
        }
        public virtual NamedArrayMemory<transform> namedarray_m1
        {
            get { throw new NotImplementedException(); }
        }
        public virtual NamedMultiDimArrayMemory<transform> namedarray_m2
        {
            get { throw new NotImplementedException(); }
        }
        public virtual ArrayMemory<CDouble> c_m1
        {
            get { throw new NotImplementedException(); }
        }
        public virtual MultiDimArrayMemory<CDouble> c_m2
        {
            get { throw new NotImplementedException(); }
        }
        public virtual ArrayMemory<CDouble> c_m3
        {
            get { throw new NotImplementedException(); }
        }
        public virtual MultiDimArrayMemory<CDouble> c_m4
        {
            get { throw new NotImplementedException(); }
        }
        public virtual ArrayMemory<bool> c_m5
        {
            get { throw new NotImplementedException(); }
        }
        public virtual MultiDimArrayMemory<bool> c_m6
        {
            get { throw new NotImplementedException(); }
        }
    }
    public class obj1_default_impl : obj1
    {
        public virtual Task<double[]> get_d1(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_d1(double[] value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
    }
    public class obj2_default_impl : obj2
    {
        public virtual Task<double[]> get_d1(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_d1(double[] value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
    }
    public class obj3_default_impl : obj3
    {
        public virtual Task<double[]> get_d1(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_d1(double[] value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
    }
    public class obj4_default_impl : obj4
    {
        public virtual Task<string> get_s_ind(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_s_ind(string value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<int> get_i_ind(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_i_ind(int value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<string> get_data(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_data(string value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<com.robotraconteur.testing.TestService1.sub3> get_o3_1(string ind, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
    }
    public class obj5_default_impl : obj5
    {
        protected PipeBroadcaster<int> rrvar_q1;
        protected PipeBroadcaster<int> rrvar_q2;
        protected WireBroadcaster<int> rrvar_w1;
        protected WireBroadcaster<int> rrvar_w2;
        public virtual Task<double> get_p1(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_p1(double value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<double> get_p2(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_p2(double value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<double> get_p3(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_p3(double value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<int> f1(CancellationToken rr_cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<int> f2(CancellationToken rr_cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Pipe<int> q1
        {
            get { return rrvar_q1.Pipe; }
            set
            {
                if (rrvar_q1 != null) throw new InvalidOperationException("Pipe already set");
                rrvar_q1 = new PipeBroadcaster<int>(value);
            }
        }
        public virtual Pipe<int> q2
        {
            get { return rrvar_q2.Pipe; }
            set
            {
                if (rrvar_q2 != null) throw new InvalidOperationException("Pipe already set");
                rrvar_q2 = new PipeBroadcaster<int>(value);
            }
        }
        public virtual Wire<int> w1
        {
            get { return rrvar_w1.Wire; }
            set
            {
                if (rrvar_w1 != null) throw new InvalidOperationException("Pipe already set");
                rrvar_w1 = new WireBroadcaster<int>(value);
            }
        }
        public virtual Wire<int> w2
        {
            get { return rrvar_w2.Wire; }
            set
            {
                if (rrvar_w2 != null) throw new InvalidOperationException("Pipe already set");
                rrvar_w2 = new WireBroadcaster<int>(value);
            }
        }
        public virtual ArrayMemory<int> m1
        {
            get { throw new NotImplementedException(); }
        }
        public virtual ArrayMemory<int> m2
        {
            get { throw new NotImplementedException(); }
        }
        public virtual ArrayMemory<int> m3
        {
            get { throw new NotImplementedException(); }
        }
    }
    public static class RRExtensions
    {
        public static double[] GetNumericArray(this vector3[] s)
        {
            var a = new ArraySegment<double>(new double[3 * s.Length]);
            s.GetNumericArray(ref a);
            return a.Array;
        }
        public static void GetNumericArray(this vector3[] s, ref ArraySegment<double> a)
        {
            if (a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
            for (int i = 0; i < s.Length; i++)
            {
                var a1 = new ArraySegment<double>(a.Array, a.Offset + 3 * i, 3);
                s[i].GetNumericArray(ref a1);
            }
        }
        public static void AssignFromNumericArray(this vector3[] s, ref ArraySegment<double> a)
        {
            if (a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
            for (int i = 0; i < s.Length; i++)
            {
                var a1 = new ArraySegment<double>(a.Array, a.Offset + 3 * i, 3);
                s[i].AssignFromNumericArray(ref a1);
            }
        }
        public static double[] GetNumericArray(this quaternion[] s)
        {
            var a = new ArraySegment<double>(new double[4 * s.Length]);
            s.GetNumericArray(ref a);
            return a.Array;
        }
        public static void GetNumericArray(this quaternion[] s, ref ArraySegment<double> a)
        {
            if (a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
            for (int i = 0; i < s.Length; i++)
            {
                var a1 = new ArraySegment<double>(a.Array, a.Offset + 4 * i, 4);
                s[i].GetNumericArray(ref a1);
            }
        }
        public static void AssignFromNumericArray(this quaternion[] s, ref ArraySegment<double> a)
        {
            if (a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
            for (int i = 0; i < s.Length; i++)
            {
                var a1 = new ArraySegment<double>(a.Array, a.Offset + 4 * i, 4);
                s[i].AssignFromNumericArray(ref a1);
            }
        }
        public static double[] GetNumericArray(this transform[] s)
        {
            var a = new ArraySegment<double>(new double[7 * s.Length]);
            s.GetNumericArray(ref a);
            return a.Array;
        }
        public static void GetNumericArray(this transform[] s, ref ArraySegment<double> a)
        {
            if (a.Count < 7 * s.Length) throw new ArgumentException("ArraySegment invalid length");
            for (int i = 0; i < s.Length; i++)
            {
                var a1 = new ArraySegment<double>(a.Array, a.Offset + 7 * i, 7);
                s[i].GetNumericArray(ref a1);
            }
        }
        public static void AssignFromNumericArray(this transform[] s, ref ArraySegment<double> a)
        {
            if (a.Count < 7 * s.Length) throw new ArgumentException("ArraySegment invalid length");
            for (int i = 0; i < s.Length; i++)
            {
                var a1 = new ArraySegment<double>(a.Array, a.Offset + 7 * i, 7);
                s[i].AssignFromNumericArray(ref a1);
            }
        }
        public static byte[] GetNumericArray(this pixel[] s)
        {
            var a = new ArraySegment<byte>(new byte[3 * s.Length]);
            s.GetNumericArray(ref a);
            return a.Array;
        }
        public static void GetNumericArray(this pixel[] s, ref ArraySegment<byte> a)
        {
            if (a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
            for (int i = 0; i < s.Length; i++)
            {
                var a1 = new ArraySegment<byte>(a.Array, a.Offset + 3 * i, 3);
                s[i].GetNumericArray(ref a1);
            }
        }
        public static void AssignFromNumericArray(this pixel[] s, ref ArraySegment<byte> a)
        {
            if (a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
            for (int i = 0; i < s.Length; i++)
            {
                var a1 = new ArraySegment<byte>(a.Array, a.Offset + 3 * i, 3);
                s[i].AssignFromNumericArray(ref a1);
            }
        }
        public static byte[] GetNumericArray(this pixel2[] s)
        {
            var a = new ArraySegment<byte>(new byte[31 * s.Length]);
            s.GetNumericArray(ref a);
            return a.Array;
        }
        public static void GetNumericArray(this pixel2[] s, ref ArraySegment<byte> a)
        {
            if (a.Count < 31 * s.Length) throw new ArgumentException("ArraySegment invalid length");
            for (int i = 0; i < s.Length; i++)
            {
                var a1 = new ArraySegment<byte>(a.Array, a.Offset + 31 * i, 31);
                s[i].GetNumericArray(ref a1);
            }
        }
        public static void AssignFromNumericArray(this pixel2[] s, ref ArraySegment<byte> a)
        {
            if (a.Count < 31 * s.Length) throw new ArgumentException("ArraySegment invalid length");
            for (int i = 0; i < s.Length; i++)
            {
                var a1 = new ArraySegment<byte>(a.Array, a.Offset + 31 * i, 31);
                s[i].AssignFromNumericArray(ref a1);
            }
        }
    }
}

namespace experimental.sub_test
{
    [RobotRaconteurServiceObjectInterface("experimental.sub_test.testobj")]
    public interface testobj
    {
        Task<double> add_two_numbers(double a, double b, CancellationToken rr_cancel = default(CancellationToken));
    }

}

namespace experimental.sub_test
{
    public class experimental__sub_testFactory : ServiceFactory
    {
        public override string DefString()
        {
            const string s = "service experimental.sub_test\n\nobject testobj\nfunction double add_two_numbers(double a, double b)\nend\n";
            return s;
        }
        public override string GetServiceName() { return "experimental.sub_test"; }
        public experimental__sub_testFactory() : this(null, null) { }
        public experimental__sub_testFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node, context)
        {
        }
        public override IStructureStub FindStructureStub(string objecttype)
        {
            throw new DataTypeException("Cannot find appropriate structure stub");
        }
        public override IPodStub FindPodStub(string objecttype)
        {
            throw new DataTypeException("Cannot find appropriate pod stub");
        }
        public override INamedArrayStub FindNamedArrayStub(string objecttype)
        {
            throw new DataTypeException("Cannot find appropriate pod stub");
        }
        public override ServiceStub CreateStub(string objecttype, string path, ClientContext context)
        {
            string objshort;
            if (CompareNamespace(objecttype, out objshort))
            {
                switch (objshort)
                {
                    case "testobj":
                        return new testobj_stub(path, context);
                    default:
                        break;
                }
            }
            else
            {
                return base.CreateStub(objecttype, path, context);
            }
            throw new ServiceException("Could not create stub");
        }
        public override ServiceSkel CreateSkel(string path, object obj, ServerContext context)
        {
            string objtype = ServiceDefinitionUtil.FindObjectRRType(obj);
            string objshort;
            if (CompareNamespace(objtype, out objshort))
            {
                switch (objshort)
                {
                    case "testobj":
                        return new testobj_skel(path, (testobj)obj, context);
                    default:
                        break;
                }
            }
            else
            {
                return base.CreateSkel(path, obj, context);
            }
            throw new ServiceException("Could not create skel");
        }
        public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
        {
            if (rr_exp == null) return rr_exp;
            string rr_type = rr_exp.Error;
            if (!rr_type.Contains(".")) return rr_exp;
            string rr_stype;
            if (CompareNamespace(rr_type, out rr_stype))
            {
            }
            else
            {
                return base.DownCastException(rr_exp);
            }
            return rr_exp;
        }
    }

    public class testobj_stub : ServiceStub, testobj
    {
        public testobj_stub(string path, ClientContext c) : base(path, c)
        {
        }
        public async Task<double> add_two_numbers(double a, double b, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry rr_m = new MessageEntry(MessageEntryType.FunctionCallReq, "add_two_numbers");
            MessageElementUtil.AddMessageElement(rr_m, MessageElementUtil.PackScalar<double>("a", a));
            MessageElementUtil.AddMessageElement(rr_m, MessageElementUtil.PackScalar<double>("b", b));
            MessageEntry rr_me = await ProcessRequest(rr_m, cancel).ConfigureAwait(false);
            return (MessageElementUtil.UnpackScalar<double>(rr_me.FindElement("return")));
        }
        protected override void DispatchEvent(MessageEntry rr_m)
        {
            switch (rr_m.MemberName)
            {
                default:
                    break;
            }
        }
        protected override void DispatchPipeMessage(MessageEntry m)
        {
            switch (m.MemberName)
            {
                default:
                    throw new Exception();
            }
        }
        protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m)
        {
            string rr_ename = rr_m.MemberName;
            MessageEntry rr_mr = new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
            rr_mr.ServicePath = rr_m.ServicePath;
            rr_mr.RequestID = rr_m.RequestID;
            switch (rr_ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return rr_mr;
        }
        protected override void DispatchWireMessage(MessageEntry m)
        {
            switch (m.MemberName)
            {
                default:
                    throw new Exception();
            }
        }
    }
    public class testobj_skel : ServiceSkel
    {
        protected testobj obj;
        public testobj_skel(string p, testobj o, ServerContext c) : base(p, o, c) { obj = (testobj)o; }
        public override void ReleaseCastObject()
        {
        }
        public override async Task<MessageEntry> CallGetProperty(MessageEntry m)
        {
            string ename = m.MemberName;
            MessageEntry mr = new MessageEntry(MessageEntryType.PropertyGetRes, ename);
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return mr;
        }
        public override async Task<MessageEntry> CallSetProperty(MessageEntry m)
        {
            string ename = m.MemberName;
            MessageElement me = m.FindElement("value");
            MessageEntry mr = new MessageEntry(MessageEntryType.PropertySetRes, ename);
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return mr;
        }
        public override async Task<MessageEntry> CallFunction(MessageEntry rr_m)
        {
            string rr_ename = rr_m.MemberName;
            MessageEntry rr_mr = new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
            switch (rr_ename)
            {
                case "add_two_numbers":
                    {
                        double a = (MessageElementUtil.UnpackScalar<double>(MessageElementUtil.FindElement(rr_m, "a")));
                        double b = (MessageElementUtil.UnpackScalar<double>(MessageElementUtil.FindElement(rr_m, "b")));
                        double rr_ret = await this.obj.add_two_numbers(a, b, default(CancellationToken)).ConfigureAwait(false);
                        rr_mr.AddElement(MessageElementUtil.PackScalar<double>("return", rr_ret));
                        break;
                    }
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return rr_mr;
        }
        public override async Task<object> GetSubObj(string name, string ind)
        {
            switch (name)
            {
                default:
                    break;
            }
            throw new MemberNotFoundException("");
        }
        public override void RegisterEvents(object rrobj1)
        {
            obj = (testobj)rrobj1;
        }
        public override void UnregisterEvents(object rrobj1)
        {
            obj = (testobj)rrobj1;
        }
        public override object GetCallbackFunction(uint rr_endpoint, string rr_membername)
        {
            switch (rr_membername)
            {
                default:
                    break;
            }
            throw new MemberNotFoundException("Member not found");
        }
        private bool rr_InitPipeServersRun = false;
        public override void InitPipeServers(object o)
        {
            if (this.rr_InitPipeServersRun) return;
            this.rr_InitPipeServersRun = true;
            testobj castobj = (testobj)o;
        }
        public override void InitCallbackServers(object rrobj1)
        {
            obj = (testobj)rrobj1;
        }
        public override async Task<MessageEntry> CallPipeFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override async Task<MessageEntry> CallWireFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
        {
            switch (m.MemberName)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override void DispatchWireMessage(MessageEntry m, Endpoint e)
        {
            switch (m.MemberName)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override bool IsRequestNoLock(MessageEntry m)
        {
            return false;
        }
    }
    public class testobj_default_impl : testobj
    {
        public virtual Task<double> add_two_numbers(double a, double b, CancellationToken rr_cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
    }
    public static class RRExtensions
    {
    }
}

namespace experimental.testing.subtestfilter
{
    [RobotRaconteurServiceObjectInterface("experimental.testing.subtestfilter.sub_testroot")]
    public interface sub_testroot
    {
        Task<double> get_d1(CancellationToken cancel = default(CancellationToken));
        Task set_d1(double value, CancellationToken cancel = default(CancellationToken));
    }

    [RobotRaconteurServiceObjectInterface("experimental.testing.subtestfilter.sub_testroot2")]
    public interface sub_testroot2
    {
        Task<double> get_d1(CancellationToken cancel = default(CancellationToken));
        Task set_d1(double value, CancellationToken cancel = default(CancellationToken));
    }

}

namespace experimental.testing.subtestfilter
{
    public class experimental__testing__subtestfilterFactory : ServiceFactory
    {
        public override string DefString()
        {
            const string s = "service experimental.testing.subtestfilter\n\nobject sub_testroot\nproperty double d1\nend\n\nobject sub_testroot2\nproperty double d1\nend\n";
            return s;
        }
        public override string GetServiceName() { return "experimental.testing.subtestfilter"; }
        public experimental__testing__subtestfilterFactory() : this(null, null) { }
        public experimental__testing__subtestfilterFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node, context)
        {
        }
        public override IStructureStub FindStructureStub(string objecttype)
        {
            throw new DataTypeException("Cannot find appropriate structure stub");
        }
        public override IPodStub FindPodStub(string objecttype)
        {
            throw new DataTypeException("Cannot find appropriate pod stub");
        }
        public override INamedArrayStub FindNamedArrayStub(string objecttype)
        {
            throw new DataTypeException("Cannot find appropriate pod stub");
        }
        public override ServiceStub CreateStub(string objecttype, string path, ClientContext context)
        {
            string objshort;
            if (CompareNamespace(objecttype, out objshort))
            {
                switch (objshort)
                {
                    case "sub_testroot":
                        return new sub_testroot_stub(path, context);
                    case "sub_testroot2":
                        return new sub_testroot2_stub(path, context);
                    default:
                        break;
                }
            }
            else
            {
                return base.CreateStub(objecttype, path, context);
            }
            throw new ServiceException("Could not create stub");
        }
        public override ServiceSkel CreateSkel(string path, object obj, ServerContext context)
        {
            string objtype = ServiceDefinitionUtil.FindObjectRRType(obj);
            string objshort;
            if (CompareNamespace(objtype, out objshort))
            {
                switch (objshort)
                {
                    case "sub_testroot":
                        return new sub_testroot_skel(path, (sub_testroot)obj, context);
                    case "sub_testroot2":
                        return new sub_testroot2_skel(path, (sub_testroot2)obj, context);
                    default:
                        break;
                }
            }
            else
            {
                return base.CreateSkel(path, obj, context);
            }
            throw new ServiceException("Could not create skel");
        }
        public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
        {
            if (rr_exp == null) return rr_exp;
            string rr_type = rr_exp.Error;
            if (!rr_type.Contains(".")) return rr_exp;
            string rr_stype;
            if (CompareNamespace(rr_type, out rr_stype))
            {
            }
            else
            {
                return base.DownCastException(rr_exp);
            }
            return rr_exp;
        }
    }

    public class sub_testroot_stub : ServiceStub, sub_testroot
    {
        public sub_testroot_stub(string path, ClientContext c) : base(path, c)
        {
        }
        public async Task<double> get_d1(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "d1");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return (MessageElementUtil.UnpackScalar<double>(me));
        }
        public async Task set_d1(double value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "d1");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackScalar<double>("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        protected override void DispatchEvent(MessageEntry rr_m)
        {
            switch (rr_m.MemberName)
            {
                default:
                    break;
            }
        }
        protected override void DispatchPipeMessage(MessageEntry m)
        {
            switch (m.MemberName)
            {
                default:
                    throw new Exception();
            }
        }
        protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m)
        {
            string rr_ename = rr_m.MemberName;
            MessageEntry rr_mr = new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
            rr_mr.ServicePath = rr_m.ServicePath;
            rr_mr.RequestID = rr_m.RequestID;
            switch (rr_ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return rr_mr;
        }
        protected override void DispatchWireMessage(MessageEntry m)
        {
            switch (m.MemberName)
            {
                default:
                    throw new Exception();
            }
        }
    }
    public class sub_testroot2_stub : ServiceStub, sub_testroot2
    {
        public sub_testroot2_stub(string path, ClientContext c) : base(path, c)
        {
        }
        public async Task<double> get_d1(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "d1");
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
            MessageElement me = mr.FindElement("value");
            return (MessageElementUtil.UnpackScalar<double>(me));
        }
        public async Task set_d1(double value, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry m = new MessageEntry(MessageEntryType.PropertySetReq, "d1");
            MessageElementUtil.AddMessageElement(m, MessageElementUtil.PackScalar<double>("value", value));
            MessageEntry mr = await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
        protected override void DispatchEvent(MessageEntry rr_m)
        {
            switch (rr_m.MemberName)
            {
                default:
                    break;
            }
        }
        protected override void DispatchPipeMessage(MessageEntry m)
        {
            switch (m.MemberName)
            {
                default:
                    throw new Exception();
            }
        }
        protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m)
        {
            string rr_ename = rr_m.MemberName;
            MessageEntry rr_mr = new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
            rr_mr.ServicePath = rr_m.ServicePath;
            rr_mr.RequestID = rr_m.RequestID;
            switch (rr_ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return rr_mr;
        }
        protected override void DispatchWireMessage(MessageEntry m)
        {
            switch (m.MemberName)
            {
                default:
                    throw new Exception();
            }
        }
    }
    public class sub_testroot_skel : ServiceSkel
    {
        protected sub_testroot obj;
        public sub_testroot_skel(string p, sub_testroot o, ServerContext c) : base(p, o, c) { obj = (sub_testroot)o; }
        public override void ReleaseCastObject()
        {
        }
        public override async Task<MessageEntry> CallGetProperty(MessageEntry m)
        {
            string ename = m.MemberName;
            MessageEntry mr = new MessageEntry(MessageEntryType.PropertyGetRes, ename);
            switch (ename)
            {
                case "d1":
                    {
                        double ret = await obj.get_d1().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackScalar<double>("value", ret));
                        break;
                    }
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return mr;
        }
        public override async Task<MessageEntry> CallSetProperty(MessageEntry m)
        {
            string ename = m.MemberName;
            MessageElement me = m.FindElement("value");
            MessageEntry mr = new MessageEntry(MessageEntryType.PropertySetRes, ename);
            switch (ename)
            {
                case "d1":
                    {
                        await obj.set_d1((MessageElementUtil.UnpackScalar<double>(me))).ConfigureAwait(false);
                        break;
                    }
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return mr;
        }
        public override async Task<MessageEntry> CallFunction(MessageEntry rr_m)
        {
            string rr_ename = rr_m.MemberName;
            MessageEntry rr_mr = new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
            switch (rr_ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return rr_mr;
        }
        public override async Task<object> GetSubObj(string name, string ind)
        {
            switch (name)
            {
                default:
                    break;
            }
            throw new MemberNotFoundException("");
        }
        public override void RegisterEvents(object rrobj1)
        {
            obj = (sub_testroot)rrobj1;
        }
        public override void UnregisterEvents(object rrobj1)
        {
            obj = (sub_testroot)rrobj1;
        }
        public override object GetCallbackFunction(uint rr_endpoint, string rr_membername)
        {
            switch (rr_membername)
            {
                default:
                    break;
            }
            throw new MemberNotFoundException("Member not found");
        }
        private bool rr_InitPipeServersRun = false;
        public override void InitPipeServers(object o)
        {
            if (this.rr_InitPipeServersRun) return;
            this.rr_InitPipeServersRun = true;
            sub_testroot castobj = (sub_testroot)o;
        }
        public override void InitCallbackServers(object rrobj1)
        {
            obj = (sub_testroot)rrobj1;
        }
        public override async Task<MessageEntry> CallPipeFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override async Task<MessageEntry> CallWireFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
        {
            switch (m.MemberName)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override void DispatchWireMessage(MessageEntry m, Endpoint e)
        {
            switch (m.MemberName)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override bool IsRequestNoLock(MessageEntry m)
        {
            return false;
        }
    }
    public class sub_testroot2_skel : ServiceSkel
    {
        protected sub_testroot2 obj;
        public sub_testroot2_skel(string p, sub_testroot2 o, ServerContext c) : base(p, o, c) { obj = (sub_testroot2)o; }
        public override void ReleaseCastObject()
        {
        }
        public override async Task<MessageEntry> CallGetProperty(MessageEntry m)
        {
            string ename = m.MemberName;
            MessageEntry mr = new MessageEntry(MessageEntryType.PropertyGetRes, ename);
            switch (ename)
            {
                case "d1":
                    {
                        double ret = await obj.get_d1().ConfigureAwait(false);
                        mr.AddElement(MessageElementUtil.PackScalar<double>("value", ret));
                        break;
                    }
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return mr;
        }
        public override async Task<MessageEntry> CallSetProperty(MessageEntry m)
        {
            string ename = m.MemberName;
            MessageElement me = m.FindElement("value");
            MessageEntry mr = new MessageEntry(MessageEntryType.PropertySetRes, ename);
            switch (ename)
            {
                case "d1":
                    {
                        await obj.set_d1((MessageElementUtil.UnpackScalar<double>(me))).ConfigureAwait(false);
                        break;
                    }
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return mr;
        }
        public override async Task<MessageEntry> CallFunction(MessageEntry rr_m)
        {
            string rr_ename = rr_m.MemberName;
            MessageEntry rr_mr = new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
            switch (rr_ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return rr_mr;
        }
        public override async Task<object> GetSubObj(string name, string ind)
        {
            switch (name)
            {
                default:
                    break;
            }
            throw new MemberNotFoundException("");
        }
        public override void RegisterEvents(object rrobj1)
        {
            obj = (sub_testroot2)rrobj1;
        }
        public override void UnregisterEvents(object rrobj1)
        {
            obj = (sub_testroot2)rrobj1;
        }
        public override object GetCallbackFunction(uint rr_endpoint, string rr_membername)
        {
            switch (rr_membername)
            {
                default:
                    break;
            }
            throw new MemberNotFoundException("Member not found");
        }
        private bool rr_InitPipeServersRun = false;
        public override void InitPipeServers(object o)
        {
            if (this.rr_InitPipeServersRun) return;
            this.rr_InitPipeServersRun = true;
            sub_testroot2 castobj = (sub_testroot2)o;
        }
        public override void InitCallbackServers(object rrobj1)
        {
            obj = (sub_testroot2)rrobj1;
        }
        public override async Task<MessageEntry> CallPipeFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override async Task<MessageEntry> CallWireFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
        {
            switch (m.MemberName)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override void DispatchWireMessage(MessageEntry m, Endpoint e)
        {
            switch (m.MemberName)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override bool IsRequestNoLock(MessageEntry m)
        {
            return false;
        }
    }
    public class sub_testroot_default_impl : sub_testroot
    {
        public virtual Task<double> get_d1(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_d1(double value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
    }
    public class sub_testroot2_default_impl : sub_testroot2
    {
        public virtual Task<double> get_d1(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task set_d1(double value, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
    }
    public static class RRExtensions
    {
    }
}

namespace experimental.pipe_sub_test
{
    [RobotRaconteurServiceObjectInterface("experimental.pipe_sub_test.testobj")]
    public interface testobj
    {
        Task<testobj2> get_subobj(CancellationToken rr_cancel = default(CancellationToken));
        Pipe<double> testpipe1 { get; set; }
        Pipe<double> testpipe2 { get; set; }
    }

    [RobotRaconteurServiceObjectInterface("experimental.pipe_sub_test.testobj2")]
    public interface testobj2
    {
        Pipe<double> testpipe3 { get; set; }
    }

}

namespace experimental.pipe_sub_test
{
    public class experimental__pipe_sub_testFactory : ServiceFactory
    {
        public override string DefString()
        {
            const string s = "service experimental.pipe_sub_test\n\nstdver 0.10\n\nobject testobj\npipe double testpipe1 [readonly]\npipe double testpipe2\nobjref testobj2 subobj\nend\n\nobject testobj2\npipe double testpipe3 [readonly]\nend\n";
            return s;
        }
        public override string GetServiceName() { return "experimental.pipe_sub_test"; }
        public experimental__pipe_sub_testFactory() : this(null, null) { }
        public experimental__pipe_sub_testFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node, context)
        {
        }
        public override IStructureStub FindStructureStub(string objecttype)
        {
            throw new DataTypeException("Cannot find appropriate structure stub");
        }
        public override IPodStub FindPodStub(string objecttype)
        {
            throw new DataTypeException("Cannot find appropriate pod stub");
        }
        public override INamedArrayStub FindNamedArrayStub(string objecttype)
        {
            throw new DataTypeException("Cannot find appropriate pod stub");
        }
        public override ServiceStub CreateStub(string objecttype, string path, ClientContext context)
        {
            string objshort;
            if (CompareNamespace(objecttype, out objshort))
            {
                switch (objshort)
                {
                    case "testobj":
                        return new testobj_stub(path, context);
                    case "testobj2":
                        return new testobj2_stub(path, context);
                    default:
                        break;
                }
            }
            else
            {
                return base.CreateStub(objecttype, path, context);
            }
            throw new ServiceException("Could not create stub");
        }
        public override ServiceSkel CreateSkel(string path, object obj, ServerContext context)
        {
            string objtype = ServiceDefinitionUtil.FindObjectRRType(obj);
            string objshort;
            if (CompareNamespace(objtype, out objshort))
            {
                switch (objshort)
                {
                    case "testobj":
                        return new testobj_skel(path, (testobj)obj, context);
                    case "testobj2":
                        return new testobj2_skel(path, (testobj2)obj, context);
                    default:
                        break;
                }
            }
            else
            {
                return base.CreateSkel(path, obj, context);
            }
            throw new ServiceException("Could not create skel");
        }
        public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
        {
            if (rr_exp == null) return rr_exp;
            string rr_type = rr_exp.Error;
            if (!rr_type.Contains(".")) return rr_exp;
            string rr_stype;
            if (CompareNamespace(rr_type, out rr_stype))
            {
            }
            else
            {
                return base.DownCastException(rr_exp);
            }
            return rr_exp;
        }
    }

    public class testobj_stub : ServiceStub, testobj
    {
        private Pipe<double> rr_testpipe1;
        private Pipe<double> rr_testpipe2;
        public testobj_stub(string path, ClientContext c) : base(path, c)
        {
            rr_testpipe1 = new PipeClient<double>("testpipe1", this);
            rr_testpipe2 = new PipeClient<double>("testpipe2", this);
        }
        protected override void DispatchEvent(MessageEntry rr_m)
        {
            switch (rr_m.MemberName)
            {
                default:
                    break;
            }
        }
        public async Task<testobj2> get_subobj(CancellationToken cancel = default(CancellationToken))
        {
            return (testobj2)await FindObjRefTyped("subobj", "experimental.pipe_sub_test.testobj2", cancel).ConfigureAwait(false);
        }
        public Pipe<double> testpipe1
        {
            get { return rr_testpipe1; }
            set { throw new InvalidOperationException(); }
        }
        public Pipe<double> testpipe2
        {
            get { return rr_testpipe2; }
            set { throw new InvalidOperationException(); }
        }
        protected override void DispatchPipeMessage(MessageEntry m)
        {
            switch (m.MemberName)
            {
                case "testpipe1":
                    this.rr_testpipe1.PipePacketReceived(m);
                    break;
                case "testpipe2":
                    this.rr_testpipe2.PipePacketReceived(m);
                    break;
                default:
                    throw new Exception();
            }
        }
        protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m)
        {
            string rr_ename = rr_m.MemberName;
            MessageEntry rr_mr = new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
            rr_mr.ServicePath = rr_m.ServicePath;
            rr_mr.RequestID = rr_m.RequestID;
            switch (rr_ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return rr_mr;
        }
        protected override void DispatchWireMessage(MessageEntry m)
        {
            switch (m.MemberName)
            {
                default:
                    throw new Exception();
            }
        }
    }
    public class testobj2_stub : ServiceStub, testobj2
    {
        private Pipe<double> rr_testpipe3;
        public testobj2_stub(string path, ClientContext c) : base(path, c)
        {
            rr_testpipe3 = new PipeClient<double>("testpipe3", this);
        }
        protected override void DispatchEvent(MessageEntry rr_m)
        {
            switch (rr_m.MemberName)
            {
                default:
                    break;
            }
        }
        public Pipe<double> testpipe3
        {
            get { return rr_testpipe3; }
            set { throw new InvalidOperationException(); }
        }
        protected override void DispatchPipeMessage(MessageEntry m)
        {
            switch (m.MemberName)
            {
                case "testpipe3":
                    this.rr_testpipe3.PipePacketReceived(m);
                    break;
                default:
                    throw new Exception();
            }
        }
        protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m)
        {
            string rr_ename = rr_m.MemberName;
            MessageEntry rr_mr = new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
            rr_mr.ServicePath = rr_m.ServicePath;
            rr_mr.RequestID = rr_m.RequestID;
            switch (rr_ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return rr_mr;
        }
        protected override void DispatchWireMessage(MessageEntry m)
        {
            switch (m.MemberName)
            {
                default:
                    throw new Exception();
            }
        }
    }
    public class testobj_skel : ServiceSkel
    {
        protected testobj obj;
        public testobj_skel(string p, testobj o, ServerContext c) : base(p, o, c) { obj = (testobj)o; }
        public override void ReleaseCastObject()
        {
        }
        public override async Task<MessageEntry> CallGetProperty(MessageEntry m)
        {
            string ename = m.MemberName;
            MessageEntry mr = new MessageEntry(MessageEntryType.PropertyGetRes, ename);
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return mr;
        }
        public override async Task<MessageEntry> CallSetProperty(MessageEntry m)
        {
            string ename = m.MemberName;
            MessageElement me = m.FindElement("value");
            MessageEntry mr = new MessageEntry(MessageEntryType.PropertySetRes, ename);
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return mr;
        }
        public override async Task<MessageEntry> CallFunction(MessageEntry rr_m)
        {
            string rr_ename = rr_m.MemberName;
            MessageEntry rr_mr = new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
            switch (rr_ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return rr_mr;
        }
        public override async Task<object> GetSubObj(string name, string ind)
        {
            switch (name)
            {
                case "subobj":
                    {
                        return await obj.get_subobj().ConfigureAwait(false);
                    }
                default:
                    break;
            }
            throw new MemberNotFoundException("");
        }
        public override void RegisterEvents(object rrobj1)
        {
            obj = (testobj)rrobj1;
        }
        public override void UnregisterEvents(object rrobj1)
        {
            obj = (testobj)rrobj1;
        }
        public override object GetCallbackFunction(uint rr_endpoint, string rr_membername)
        {
            switch (rr_membername)
            {
                default:
                    break;
            }
            throw new MemberNotFoundException("Member not found");
        }
        private PipeServer<double> rr_testpipe1;
        private PipeServer<double> rr_testpipe2;
        private bool rr_InitPipeServersRun = false;
        public override void InitPipeServers(object o)
        {
            if (this.rr_InitPipeServersRun) return;
            this.rr_InitPipeServersRun = true;
            testobj castobj = (testobj)o;
            this.rr_testpipe1 = new PipeServer<double>("testpipe1", this);
            this.rr_testpipe2 = new PipeServer<double>("testpipe2", this);
            castobj.testpipe1 = this.rr_testpipe1;
            castobj.testpipe2 = this.rr_testpipe2;
        }
        public override void InitCallbackServers(object rrobj1)
        {
            obj = (testobj)rrobj1;
        }
        public override async Task<MessageEntry> CallPipeFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                case "testpipe1":
                    return await this.rr_testpipe1.PipeCommand(m, e).ConfigureAwait(false);
                case "testpipe2":
                    return await this.rr_testpipe2.PipeCommand(m, e).ConfigureAwait(false);
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override async Task<MessageEntry> CallWireFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
        {
            switch (m.MemberName)
            {
                case "testpipe1":
                    this.rr_testpipe1.PipePacketReceived(m, e);
                    break;
                case "testpipe2":
                    this.rr_testpipe2.PipePacketReceived(m, e);
                    break;
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override void DispatchWireMessage(MessageEntry m, Endpoint e)
        {
            switch (m.MemberName)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override bool IsRequestNoLock(MessageEntry m)
        {
            return false;
        }
    }
    public class testobj2_skel : ServiceSkel
    {
        protected testobj2 obj;
        public testobj2_skel(string p, testobj2 o, ServerContext c) : base(p, o, c) { obj = (testobj2)o; }
        public override void ReleaseCastObject()
        {
        }
        public override async Task<MessageEntry> CallGetProperty(MessageEntry m)
        {
            string ename = m.MemberName;
            MessageEntry mr = new MessageEntry(MessageEntryType.PropertyGetRes, ename);
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return mr;
        }
        public override async Task<MessageEntry> CallSetProperty(MessageEntry m)
        {
            string ename = m.MemberName;
            MessageElement me = m.FindElement("value");
            MessageEntry mr = new MessageEntry(MessageEntryType.PropertySetRes, ename);
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return mr;
        }
        public override async Task<MessageEntry> CallFunction(MessageEntry rr_m)
        {
            string rr_ename = rr_m.MemberName;
            MessageEntry rr_mr = new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
            switch (rr_ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return rr_mr;
        }
        public override async Task<object> GetSubObj(string name, string ind)
        {
            switch (name)
            {
                default:
                    break;
            }
            throw new MemberNotFoundException("");
        }
        public override void RegisterEvents(object rrobj1)
        {
            obj = (testobj2)rrobj1;
        }
        public override void UnregisterEvents(object rrobj1)
        {
            obj = (testobj2)rrobj1;
        }
        public override object GetCallbackFunction(uint rr_endpoint, string rr_membername)
        {
            switch (rr_membername)
            {
                default:
                    break;
            }
            throw new MemberNotFoundException("Member not found");
        }
        private PipeServer<double> rr_testpipe3;
        private bool rr_InitPipeServersRun = false;
        public override void InitPipeServers(object o)
        {
            if (this.rr_InitPipeServersRun) return;
            this.rr_InitPipeServersRun = true;
            testobj2 castobj = (testobj2)o;
            this.rr_testpipe3 = new PipeServer<double>("testpipe3", this);
            castobj.testpipe3 = this.rr_testpipe3;
        }
        public override void InitCallbackServers(object rrobj1)
        {
            obj = (testobj2)rrobj1;
        }
        public override async Task<MessageEntry> CallPipeFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                case "testpipe3":
                    return await this.rr_testpipe3.PipeCommand(m, e).ConfigureAwait(false);
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override async Task<MessageEntry> CallWireFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
        {
            switch (m.MemberName)
            {
                case "testpipe3":
                    this.rr_testpipe3.PipePacketReceived(m, e);
                    break;
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override void DispatchWireMessage(MessageEntry m, Endpoint e)
        {
            switch (m.MemberName)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override bool IsRequestNoLock(MessageEntry m)
        {
            return false;
        }
    }
    public class testobj_default_impl : testobj
    {
        protected PipeBroadcaster<double> rrvar_testpipe1;
        public virtual Task<testobj2> get_subobj(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Pipe<double> testpipe1
        {
            get { return rrvar_testpipe1.Pipe; }
            set
            {
                if (rrvar_testpipe1 != null) throw new InvalidOperationException("Pipe already set");
                rrvar_testpipe1 = new PipeBroadcaster<double>(value);
            }
        }
        public virtual Pipe<double> testpipe2
        {
            get { throw new NotImplementedException(); }
            set { throw new InvalidOperationException(); }
        }
    }
    public class testobj2_default_impl : testobj2
    {
        protected PipeBroadcaster<double> rrvar_testpipe3;
        public virtual Pipe<double> testpipe3
        {
            get { return rrvar_testpipe3.Pipe; }
            set
            {
                if (rrvar_testpipe3 != null) throw new InvalidOperationException("Pipe already set");
                rrvar_testpipe3 = new PipeBroadcaster<double>(value);
            }
        }
    }
    public static class RRExtensions
    {
    }
}

namespace experimental.wire_sub_test
{
    [RobotRaconteurServiceObjectInterface("experimental.wire_sub_test.testobj")]
    public interface testobj
    {
        Task<testobj2> get_subobj(CancellationToken rr_cancel = default(CancellationToken));
        Wire<double> testwire1 { get; set; }
        Wire<double> testwire2 { get; set; }
    }

    [RobotRaconteurServiceObjectInterface("experimental.wire_sub_test.testobj2")]
    public interface testobj2
    {
        Wire<double> testwire3 { get; set; }
    }

}

namespace experimental.wire_sub_test
{
    public class experimental__wire_sub_testFactory : ServiceFactory
    {
        public override string DefString()
        {
            const string s = "service experimental.wire_sub_test\n\nstdver 0.10\n\nobject testobj\nwire double testwire1 [readonly]\nwire double testwire2 [writeonly]\nobjref testobj2 subobj\nend\n\nobject testobj2\nwire double testwire3 [readonly]\nend\n";
            return s;
        }
        public override string GetServiceName() { return "experimental.wire_sub_test"; }
        public experimental__wire_sub_testFactory() : this(null, null) { }
        public experimental__wire_sub_testFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node, context)
        {
        }
        public override IStructureStub FindStructureStub(string objecttype)
        {
            throw new DataTypeException("Cannot find appropriate structure stub");
        }
        public override IPodStub FindPodStub(string objecttype)
        {
            throw new DataTypeException("Cannot find appropriate pod stub");
        }
        public override INamedArrayStub FindNamedArrayStub(string objecttype)
        {
            throw new DataTypeException("Cannot find appropriate pod stub");
        }
        public override ServiceStub CreateStub(string objecttype, string path, ClientContext context)
        {
            string objshort;
            if (CompareNamespace(objecttype, out objshort))
            {
                switch (objshort)
                {
                    case "testobj":
                        return new testobj_stub(path, context);
                    case "testobj2":
                        return new testobj2_stub(path, context);
                    default:
                        break;
                }
            }
            else
            {
                return base.CreateStub(objecttype, path, context);
            }
            throw new ServiceException("Could not create stub");
        }
        public override ServiceSkel CreateSkel(string path, object obj, ServerContext context)
        {
            string objtype = ServiceDefinitionUtil.FindObjectRRType(obj);
            string objshort;
            if (CompareNamespace(objtype, out objshort))
            {
                switch (objshort)
                {
                    case "testobj":
                        return new testobj_skel(path, (testobj)obj, context);
                    case "testobj2":
                        return new testobj2_skel(path, (testobj2)obj, context);
                    default:
                        break;
                }
            }
            else
            {
                return base.CreateSkel(path, obj, context);
            }
            throw new ServiceException("Could not create skel");
        }
        public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
        {
            if (rr_exp == null) return rr_exp;
            string rr_type = rr_exp.Error;
            if (!rr_type.Contains(".")) return rr_exp;
            string rr_stype;
            if (CompareNamespace(rr_type, out rr_stype))
            {
            }
            else
            {
                return base.DownCastException(rr_exp);
            }
            return rr_exp;
        }
    }

    public class testobj_stub : ServiceStub, testobj
    {
        private Wire<double> rr_testwire1;
        private Wire<double> rr_testwire2;
        public testobj_stub(string path, ClientContext c) : base(path, c)
        {
            rr_testwire1 = new WireClient<double>("testwire1", this);
            rr_testwire2 = new WireClient<double>("testwire2", this);
        }
        protected override void DispatchEvent(MessageEntry rr_m)
        {
            switch (rr_m.MemberName)
            {
                default:
                    break;
            }
        }
        public async Task<testobj2> get_subobj(CancellationToken cancel = default(CancellationToken))
        {
            return (testobj2)await FindObjRefTyped("subobj", "experimental.wire_sub_test.testobj2", cancel).ConfigureAwait(false);
        }
        public Wire<double> testwire1
        {
            get { return rr_testwire1; }
            set { throw new InvalidOperationException(); }
        }
        public Wire<double> testwire2
        {
            get { return rr_testwire2; }
            set { throw new InvalidOperationException(); }
        }
        protected override void DispatchPipeMessage(MessageEntry m)
        {
            switch (m.MemberName)
            {
                default:
                    throw new Exception();
            }
        }
        protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m)
        {
            string rr_ename = rr_m.MemberName;
            MessageEntry rr_mr = new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
            rr_mr.ServicePath = rr_m.ServicePath;
            rr_mr.RequestID = rr_m.RequestID;
            switch (rr_ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return rr_mr;
        }
        protected override void DispatchWireMessage(MessageEntry m)
        {
            switch (m.MemberName)
            {
                case "testwire1":
                    this.rr_testwire1.WirePacketReceived(m);
                    break;
                case "testwire2":
                    this.rr_testwire2.WirePacketReceived(m);
                    break;
                default:
                    throw new Exception();
            }
        }
    }
    public class testobj2_stub : ServiceStub, testobj2
    {
        private Wire<double> rr_testwire3;
        public testobj2_stub(string path, ClientContext c) : base(path, c)
        {
            rr_testwire3 = new WireClient<double>("testwire3", this);
        }
        protected override void DispatchEvent(MessageEntry rr_m)
        {
            switch (rr_m.MemberName)
            {
                default:
                    break;
            }
        }
        public Wire<double> testwire3
        {
            get { return rr_testwire3; }
            set { throw new InvalidOperationException(); }
        }
        protected override void DispatchPipeMessage(MessageEntry m)
        {
            switch (m.MemberName)
            {
                default:
                    throw new Exception();
            }
        }
        protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m)
        {
            string rr_ename = rr_m.MemberName;
            MessageEntry rr_mr = new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
            rr_mr.ServicePath = rr_m.ServicePath;
            rr_mr.RequestID = rr_m.RequestID;
            switch (rr_ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return rr_mr;
        }
        protected override void DispatchWireMessage(MessageEntry m)
        {
            switch (m.MemberName)
            {
                case "testwire3":
                    this.rr_testwire3.WirePacketReceived(m);
                    break;
                default:
                    throw new Exception();
            }
        }
    }
    public class testobj_skel : ServiceSkel
    {
        protected testobj obj;
        public testobj_skel(string p, testobj o, ServerContext c) : base(p, o, c) { obj = (testobj)o; }
        public override void ReleaseCastObject()
        {
        }
        public override async Task<MessageEntry> CallGetProperty(MessageEntry m)
        {
            string ename = m.MemberName;
            MessageEntry mr = new MessageEntry(MessageEntryType.PropertyGetRes, ename);
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return mr;
        }
        public override async Task<MessageEntry> CallSetProperty(MessageEntry m)
        {
            string ename = m.MemberName;
            MessageElement me = m.FindElement("value");
            MessageEntry mr = new MessageEntry(MessageEntryType.PropertySetRes, ename);
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return mr;
        }
        public override async Task<MessageEntry> CallFunction(MessageEntry rr_m)
        {
            string rr_ename = rr_m.MemberName;
            MessageEntry rr_mr = new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
            switch (rr_ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return rr_mr;
        }
        public override async Task<object> GetSubObj(string name, string ind)
        {
            switch (name)
            {
                case "subobj":
                    {
                        return await obj.get_subobj().ConfigureAwait(false);
                    }
                default:
                    break;
            }
            throw new MemberNotFoundException("");
        }
        public override void RegisterEvents(object rrobj1)
        {
            obj = (testobj)rrobj1;
        }
        public override void UnregisterEvents(object rrobj1)
        {
            obj = (testobj)rrobj1;
        }
        public override object GetCallbackFunction(uint rr_endpoint, string rr_membername)
        {
            switch (rr_membername)
            {
                default:
                    break;
            }
            throw new MemberNotFoundException("Member not found");
        }
        private WireServer<double> rr_testwire1;
        private WireServer<double> rr_testwire2;
        private bool rr_InitPipeServersRun = false;
        public override void InitPipeServers(object o)
        {
            if (this.rr_InitPipeServersRun) return;
            this.rr_InitPipeServersRun = true;
            testobj castobj = (testobj)o;
            this.rr_testwire1 = new WireServer<double>("testwire1", this);
            this.rr_testwire2 = new WireServer<double>("testwire2", this);
            castobj.testwire1 = this.rr_testwire1;
            castobj.testwire2 = this.rr_testwire2;
        }
        public override void InitCallbackServers(object rrobj1)
        {
            obj = (testobj)rrobj1;
        }
        public override async Task<MessageEntry> CallPipeFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override async Task<MessageEntry> CallWireFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                case "testwire1":
                    return await this.rr_testwire1.WireCommand(m, e).ConfigureAwait(false);
                case "testwire2":
                    return await this.rr_testwire2.WireCommand(m, e).ConfigureAwait(false);
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
        {
            switch (m.MemberName)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override void DispatchWireMessage(MessageEntry m, Endpoint e)
        {
            switch (m.MemberName)
            {
                case "testwire1":
                    this.rr_testwire1.WirePacketReceived(m, e);
                    break;
                case "testwire2":
                    this.rr_testwire2.WirePacketReceived(m, e);
                    break;
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override bool IsRequestNoLock(MessageEntry m)
        {
            return false;
        }
    }
    public class testobj2_skel : ServiceSkel
    {
        protected testobj2 obj;
        public testobj2_skel(string p, testobj2 o, ServerContext c) : base(p, o, c) { obj = (testobj2)o; }
        public override void ReleaseCastObject()
        {
        }
        public override async Task<MessageEntry> CallGetProperty(MessageEntry m)
        {
            string ename = m.MemberName;
            MessageEntry mr = new MessageEntry(MessageEntryType.PropertyGetRes, ename);
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return mr;
        }
        public override async Task<MessageEntry> CallSetProperty(MessageEntry m)
        {
            string ename = m.MemberName;
            MessageElement me = m.FindElement("value");
            MessageEntry mr = new MessageEntry(MessageEntryType.PropertySetRes, ename);
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return mr;
        }
        public override async Task<MessageEntry> CallFunction(MessageEntry rr_m)
        {
            string rr_ename = rr_m.MemberName;
            MessageEntry rr_mr = new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
            switch (rr_ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return rr_mr;
        }
        public override async Task<object> GetSubObj(string name, string ind)
        {
            switch (name)
            {
                default:
                    break;
            }
            throw new MemberNotFoundException("");
        }
        public override void RegisterEvents(object rrobj1)
        {
            obj = (testobj2)rrobj1;
        }
        public override void UnregisterEvents(object rrobj1)
        {
            obj = (testobj2)rrobj1;
        }
        public override object GetCallbackFunction(uint rr_endpoint, string rr_membername)
        {
            switch (rr_membername)
            {
                default:
                    break;
            }
            throw new MemberNotFoundException("Member not found");
        }
        private WireServer<double> rr_testwire3;
        private bool rr_InitPipeServersRun = false;
        public override void InitPipeServers(object o)
        {
            if (this.rr_InitPipeServersRun) return;
            this.rr_InitPipeServersRun = true;
            testobj2 castobj = (testobj2)o;
            this.rr_testwire3 = new WireServer<double>("testwire3", this);
            castobj.testwire3 = this.rr_testwire3;
        }
        public override void InitCallbackServers(object rrobj1)
        {
            obj = (testobj2)rrobj1;
        }
        public override async Task<MessageEntry> CallPipeFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override async Task<MessageEntry> CallWireFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                case "testwire3":
                    return await this.rr_testwire3.WireCommand(m, e).ConfigureAwait(false);
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
        {
            switch (m.MemberName)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override void DispatchWireMessage(MessageEntry m, Endpoint e)
        {
            switch (m.MemberName)
            {
                case "testwire3":
                    this.rr_testwire3.WirePacketReceived(m, e);
                    break;
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override bool IsRequestNoLock(MessageEntry m)
        {
            return false;
        }
    }
    public class testobj_default_impl : testobj
    {
        protected WireBroadcaster<double> rrvar_testwire1;
        protected WireUnicastReceiver<double> rrvar_testwire2;
        public virtual Task<testobj2> get_subobj(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Wire<double> testwire1
        {
            get { return rrvar_testwire1.Wire; }
            set
            {
                if (rrvar_testwire1 != null) throw new InvalidOperationException("Pipe already set");
                rrvar_testwire1 = new WireBroadcaster<double>(value);
            }
        }
        public virtual Wire<double> testwire2
        {
            get { return rrvar_testwire2.Wire; }
            set
            {
                if (rrvar_testwire2 != null) throw new InvalidOperationException("Pipe already set");
                rrvar_testwire2 = new WireUnicastReceiver<double>(value);
            }
        }
    }
    public class testobj2_default_impl : testobj2
    {
        protected WireBroadcaster<double> rrvar_testwire3;
        public virtual Wire<double> testwire3
        {
            get { return rrvar_testwire3.Wire; }
            set
            {
                if (rrvar_testwire3 != null) throw new InvalidOperationException("Pipe already set");
                rrvar_testwire3 = new WireBroadcaster<double>(value);
            }
        }
    }
    public static class RRExtensions
    {
    }
}

namespace experimental.subobject_sub_test
{
    [RobotRaconteurServiceObjectInterface("experimental.subobject_sub_test.testobj")]
    public interface testobj
    {
        Task<string> getf_service_path(CancellationToken rr_cancel = default(CancellationToken));
        Task<testobj2> get_subobj2(CancellationToken rr_cancel = default(CancellationToken));
    }

    [RobotRaconteurServiceObjectInterface("experimental.subobject_sub_test.testobj2")]
    public interface testobj2
    {
        Task<string> getf_service_path(CancellationToken rr_cancel = default(CancellationToken));
        Task<testobj3> get_subobj3_1(CancellationToken rr_cancel = default(CancellationToken));
        Task<testobj3> get_subobj3_2(int ind, CancellationToken rr_cancel = default(CancellationToken));
        Task<testobj3> get_subobj3_3(string ind, CancellationToken rr_cancel = default(CancellationToken));
    }

    [RobotRaconteurServiceObjectInterface("experimental.subobject_sub_test.testobj3")]
    public interface testobj3
    {
        Task<double> add_two_numbers(double a, double b, CancellationToken rr_cancel = default(CancellationToken));
        Task<string> getf_service_path(CancellationToken rr_cancel = default(CancellationToken));
    }

}

namespace experimental.subobject_sub_test
{
    public class experimental__subobject_sub_testFactory : ServiceFactory
    {
        public override string DefString()
        {
            const string s = "service experimental.subobject_sub_test\n\nobject testobj\nobjref testobj2 subobj2\nfunction string getf_service_path()\nend\n\nobject testobj2\nobjref testobj3 subobj3_1\nobjref testobj3[] subobj3_2\nobjref testobj3{string} subobj3_3\nfunction string getf_service_path()\nend\n\nobject testobj3\nfunction double add_two_numbers(double a, double b)\nfunction string getf_service_path()\nend\n\n";
            return s;
        }
        public override string GetServiceName() { return "experimental.subobject_sub_test"; }
        public experimental__subobject_sub_testFactory() : this(null, null) { }
        public experimental__subobject_sub_testFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node, context)
        {
        }
        public override IStructureStub FindStructureStub(string objecttype)
        {
            throw new DataTypeException("Cannot find appropriate structure stub");
        }
        public override IPodStub FindPodStub(string objecttype)
        {
            throw new DataTypeException("Cannot find appropriate pod stub");
        }
        public override INamedArrayStub FindNamedArrayStub(string objecttype)
        {
            throw new DataTypeException("Cannot find appropriate pod stub");
        }
        public override ServiceStub CreateStub(string objecttype, string path, ClientContext context)
        {
            string objshort;
            if (CompareNamespace(objecttype, out objshort))
            {
                switch (objshort)
                {
                    case "testobj":
                        return new testobj_stub(path, context);
                    case "testobj2":
                        return new testobj2_stub(path, context);
                    case "testobj3":
                        return new testobj3_stub(path, context);
                    default:
                        break;
                }
            }
            else
            {
                return base.CreateStub(objecttype, path, context);
            }
            throw new ServiceException("Could not create stub");
        }
        public override ServiceSkel CreateSkel(string path, object obj, ServerContext context)
        {
            string objtype = ServiceDefinitionUtil.FindObjectRRType(obj);
            string objshort;
            if (CompareNamespace(objtype, out objshort))
            {
                switch (objshort)
                {
                    case "testobj":
                        return new testobj_skel(path, (testobj)obj, context);
                    case "testobj2":
                        return new testobj2_skel(path, (testobj2)obj, context);
                    case "testobj3":
                        return new testobj3_skel(path, (testobj3)obj, context);
                    default:
                        break;
                }
            }
            else
            {
                return base.CreateSkel(path, obj, context);
            }
            throw new ServiceException("Could not create skel");
        }
        public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
        {
            if (rr_exp == null) return rr_exp;
            string rr_type = rr_exp.Error;
            if (!rr_type.Contains(".")) return rr_exp;
            string rr_stype;
            if (CompareNamespace(rr_type, out rr_stype))
            {
            }
            else
            {
                return base.DownCastException(rr_exp);
            }
            return rr_exp;
        }
    }

    public class testobj_stub : ServiceStub, testobj
    {
        public testobj_stub(string path, ClientContext c) : base(path, c)
        {
        }
        public async Task<string> getf_service_path(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry rr_m = new MessageEntry(MessageEntryType.FunctionCallReq, "getf_service_path");
            MessageEntry rr_me = await ProcessRequest(rr_m, cancel).ConfigureAwait(false);
            return MessageElementUtil.UnpackString(rr_me.FindElement("return"));
        }
        protected override void DispatchEvent(MessageEntry rr_m)
        {
            switch (rr_m.MemberName)
            {
                default:
                    break;
            }
        }
        public async Task<testobj2> get_subobj2(CancellationToken cancel = default(CancellationToken))
        {
            return (testobj2)await FindObjRefTyped("subobj2", "experimental.subobject_sub_test.testobj2", cancel).ConfigureAwait(false);
        }
        protected override void DispatchPipeMessage(MessageEntry m)
        {
            switch (m.MemberName)
            {
                default:
                    throw new Exception();
            }
        }
        protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m)
        {
            string rr_ename = rr_m.MemberName;
            MessageEntry rr_mr = new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
            rr_mr.ServicePath = rr_m.ServicePath;
            rr_mr.RequestID = rr_m.RequestID;
            switch (rr_ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return rr_mr;
        }
        protected override void DispatchWireMessage(MessageEntry m)
        {
            switch (m.MemberName)
            {
                default:
                    throw new Exception();
            }
        }
    }
    public class testobj2_stub : ServiceStub, testobj2
    {
        public testobj2_stub(string path, ClientContext c) : base(path, c)
        {
        }
        public async Task<string> getf_service_path(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry rr_m = new MessageEntry(MessageEntryType.FunctionCallReq, "getf_service_path");
            MessageEntry rr_me = await ProcessRequest(rr_m, cancel).ConfigureAwait(false);
            return MessageElementUtil.UnpackString(rr_me.FindElement("return"));
        }
        protected override void DispatchEvent(MessageEntry rr_m)
        {
            switch (rr_m.MemberName)
            {
                default:
                    break;
            }
        }
        public async Task<testobj3> get_subobj3_1(CancellationToken cancel = default(CancellationToken))
        {
            return (testobj3)await FindObjRefTyped("subobj3_1", "experimental.subobject_sub_test.testobj3", cancel).ConfigureAwait(false);
        }
        public async Task<testobj3> get_subobj3_2(int ind, CancellationToken cancel = default(CancellationToken))
        {
            return (testobj3)await FindObjRefTyped("subobj3_2", ind.ToString(), "experimental.subobject_sub_test.testobj3", cancel).ConfigureAwait(false);
        }
        public async Task<testobj3> get_subobj3_3(string ind, CancellationToken cancel = default(CancellationToken))
        {
            return (testobj3)await FindObjRefTyped("subobj3_3", ind.ToString(), "experimental.subobject_sub_test.testobj3", cancel).ConfigureAwait(false);
        }
        protected override void DispatchPipeMessage(MessageEntry m)
        {
            switch (m.MemberName)
            {
                default:
                    throw new Exception();
            }
        }
        protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m)
        {
            string rr_ename = rr_m.MemberName;
            MessageEntry rr_mr = new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
            rr_mr.ServicePath = rr_m.ServicePath;
            rr_mr.RequestID = rr_m.RequestID;
            switch (rr_ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return rr_mr;
        }
        protected override void DispatchWireMessage(MessageEntry m)
        {
            switch (m.MemberName)
            {
                default:
                    throw new Exception();
            }
        }
    }
    public class testobj3_stub : ServiceStub, testobj3
    {
        public testobj3_stub(string path, ClientContext c) : base(path, c)
        {
        }
        public async Task<double> add_two_numbers(double a, double b, CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry rr_m = new MessageEntry(MessageEntryType.FunctionCallReq, "add_two_numbers");
            MessageElementUtil.AddMessageElement(rr_m, MessageElementUtil.PackScalar<double>("a", a));
            MessageElementUtil.AddMessageElement(rr_m, MessageElementUtil.PackScalar<double>("b", b));
            MessageEntry rr_me = await ProcessRequest(rr_m, cancel).ConfigureAwait(false);
            return (MessageElementUtil.UnpackScalar<double>(rr_me.FindElement("return")));
        }
        public async Task<string> getf_service_path(CancellationToken cancel = default(CancellationToken))
        {
            MessageEntry rr_m = new MessageEntry(MessageEntryType.FunctionCallReq, "getf_service_path");
            MessageEntry rr_me = await ProcessRequest(rr_m, cancel).ConfigureAwait(false);
            return MessageElementUtil.UnpackString(rr_me.FindElement("return"));
        }
        protected override void DispatchEvent(MessageEntry rr_m)
        {
            switch (rr_m.MemberName)
            {
                default:
                    break;
            }
        }
        protected override void DispatchPipeMessage(MessageEntry m)
        {
            switch (m.MemberName)
            {
                default:
                    throw new Exception();
            }
        }
        protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m)
        {
            string rr_ename = rr_m.MemberName;
            MessageEntry rr_mr = new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
            rr_mr.ServicePath = rr_m.ServicePath;
            rr_mr.RequestID = rr_m.RequestID;
            switch (rr_ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return rr_mr;
        }
        protected override void DispatchWireMessage(MessageEntry m)
        {
            switch (m.MemberName)
            {
                default:
                    throw new Exception();
            }
        }
    }
    public class testobj_skel : ServiceSkel
    {
        protected testobj obj;
        public testobj_skel(string p, testobj o, ServerContext c) : base(p, o, c) { obj = (testobj)o; }
        public override void ReleaseCastObject()
        {
        }
        public override async Task<MessageEntry> CallGetProperty(MessageEntry m)
        {
            string ename = m.MemberName;
            MessageEntry mr = new MessageEntry(MessageEntryType.PropertyGetRes, ename);
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return mr;
        }
        public override async Task<MessageEntry> CallSetProperty(MessageEntry m)
        {
            string ename = m.MemberName;
            MessageElement me = m.FindElement("value");
            MessageEntry mr = new MessageEntry(MessageEntryType.PropertySetRes, ename);
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return mr;
        }
        public override async Task<MessageEntry> CallFunction(MessageEntry rr_m)
        {
            string rr_ename = rr_m.MemberName;
            MessageEntry rr_mr = new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
            switch (rr_ename)
            {
                case "getf_service_path":
                    {
                        string rr_ret = await this.obj.getf_service_path(default(CancellationToken)).ConfigureAwait(false);
                        rr_mr.AddElement(MessageElementUtil.PackString("return", rr_ret));
                        break;
                    }
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return rr_mr;
        }
        public override async Task<object> GetSubObj(string name, string ind)
        {
            switch (name)
            {
                case "subobj2":
                    {
                        return await obj.get_subobj2().ConfigureAwait(false);
                    }
                default:
                    break;
            }
            throw new MemberNotFoundException("");
        }
        public override void RegisterEvents(object rrobj1)
        {
            obj = (testobj)rrobj1;
        }
        public override void UnregisterEvents(object rrobj1)
        {
            obj = (testobj)rrobj1;
        }
        public override object GetCallbackFunction(uint rr_endpoint, string rr_membername)
        {
            switch (rr_membername)
            {
                default:
                    break;
            }
            throw new MemberNotFoundException("Member not found");
        }
        private bool rr_InitPipeServersRun = false;
        public override void InitPipeServers(object o)
        {
            if (this.rr_InitPipeServersRun) return;
            this.rr_InitPipeServersRun = true;
            testobj castobj = (testobj)o;
        }
        public override void InitCallbackServers(object rrobj1)
        {
            obj = (testobj)rrobj1;
        }
        public override async Task<MessageEntry> CallPipeFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override async Task<MessageEntry> CallWireFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
        {
            switch (m.MemberName)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override void DispatchWireMessage(MessageEntry m, Endpoint e)
        {
            switch (m.MemberName)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override bool IsRequestNoLock(MessageEntry m)
        {
            return false;
        }
    }
    public class testobj2_skel : ServiceSkel
    {
        protected testobj2 obj;
        public testobj2_skel(string p, testobj2 o, ServerContext c) : base(p, o, c) { obj = (testobj2)o; }
        public override void ReleaseCastObject()
        {
        }
        public override async Task<MessageEntry> CallGetProperty(MessageEntry m)
        {
            string ename = m.MemberName;
            MessageEntry mr = new MessageEntry(MessageEntryType.PropertyGetRes, ename);
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return mr;
        }
        public override async Task<MessageEntry> CallSetProperty(MessageEntry m)
        {
            string ename = m.MemberName;
            MessageElement me = m.FindElement("value");
            MessageEntry mr = new MessageEntry(MessageEntryType.PropertySetRes, ename);
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return mr;
        }
        public override async Task<MessageEntry> CallFunction(MessageEntry rr_m)
        {
            string rr_ename = rr_m.MemberName;
            MessageEntry rr_mr = new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
            switch (rr_ename)
            {
                case "getf_service_path":
                    {
                        string rr_ret = await this.obj.getf_service_path(default(CancellationToken)).ConfigureAwait(false);
                        rr_mr.AddElement(MessageElementUtil.PackString("return", rr_ret));
                        break;
                    }
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return rr_mr;
        }
        public override async Task<object> GetSubObj(string name, string ind)
        {
            switch (name)
            {
                case "subobj3_1":
                    {
                        return await obj.get_subobj3_1().ConfigureAwait(false);
                    }
                case "subobj3_2":
                    {
                        return await obj.get_subobj3_2(Int32.Parse(ind)).ConfigureAwait(false);
                    }
                case "subobj3_3":
                    {
                        return await obj.get_subobj3_3(ind).ConfigureAwait(false);
                    }
                default:
                    break;
            }
            throw new MemberNotFoundException("");
        }
        public override void RegisterEvents(object rrobj1)
        {
            obj = (testobj2)rrobj1;
        }
        public override void UnregisterEvents(object rrobj1)
        {
            obj = (testobj2)rrobj1;
        }
        public override object GetCallbackFunction(uint rr_endpoint, string rr_membername)
        {
            switch (rr_membername)
            {
                default:
                    break;
            }
            throw new MemberNotFoundException("Member not found");
        }
        private bool rr_InitPipeServersRun = false;
        public override void InitPipeServers(object o)
        {
            if (this.rr_InitPipeServersRun) return;
            this.rr_InitPipeServersRun = true;
            testobj2 castobj = (testobj2)o;
        }
        public override void InitCallbackServers(object rrobj1)
        {
            obj = (testobj2)rrobj1;
        }
        public override async Task<MessageEntry> CallPipeFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override async Task<MessageEntry> CallWireFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
        {
            switch (m.MemberName)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override void DispatchWireMessage(MessageEntry m, Endpoint e)
        {
            switch (m.MemberName)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override bool IsRequestNoLock(MessageEntry m)
        {
            return false;
        }
    }
    public class testobj3_skel : ServiceSkel
    {
        protected testobj3 obj;
        public testobj3_skel(string p, testobj3 o, ServerContext c) : base(p, o, c) { obj = (testobj3)o; }
        public override void ReleaseCastObject()
        {
        }
        public override async Task<MessageEntry> CallGetProperty(MessageEntry m)
        {
            string ename = m.MemberName;
            MessageEntry mr = new MessageEntry(MessageEntryType.PropertyGetRes, ename);
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return mr;
        }
        public override async Task<MessageEntry> CallSetProperty(MessageEntry m)
        {
            string ename = m.MemberName;
            MessageElement me = m.FindElement("value");
            MessageEntry mr = new MessageEntry(MessageEntryType.PropertySetRes, ename);
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return mr;
        }
        public override async Task<MessageEntry> CallFunction(MessageEntry rr_m)
        {
            string rr_ename = rr_m.MemberName;
            MessageEntry rr_mr = new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
            switch (rr_ename)
            {
                case "add_two_numbers":
                    {
                        double a = (MessageElementUtil.UnpackScalar<double>(MessageElementUtil.FindElement(rr_m, "a")));
                        double b = (MessageElementUtil.UnpackScalar<double>(MessageElementUtil.FindElement(rr_m, "b")));
                        double rr_ret = await this.obj.add_two_numbers(a, b, default(CancellationToken)).ConfigureAwait(false);
                        rr_mr.AddElement(MessageElementUtil.PackScalar<double>("return", rr_ret));
                        break;
                    }
                case "getf_service_path":
                    {
                        string rr_ret = await this.obj.getf_service_path(default(CancellationToken)).ConfigureAwait(false);
                        rr_mr.AddElement(MessageElementUtil.PackString("return", rr_ret));
                        break;
                    }
                default:
                    throw new MemberNotFoundException("Member not found");
            }
            return rr_mr;
        }
        public override async Task<object> GetSubObj(string name, string ind)
        {
            switch (name)
            {
                default:
                    break;
            }
            throw new MemberNotFoundException("");
        }
        public override void RegisterEvents(object rrobj1)
        {
            obj = (testobj3)rrobj1;
        }
        public override void UnregisterEvents(object rrobj1)
        {
            obj = (testobj3)rrobj1;
        }
        public override object GetCallbackFunction(uint rr_endpoint, string rr_membername)
        {
            switch (rr_membername)
            {
                default:
                    break;
            }
            throw new MemberNotFoundException("Member not found");
        }
        private bool rr_InitPipeServersRun = false;
        public override void InitPipeServers(object o)
        {
            if (this.rr_InitPipeServersRun) return;
            this.rr_InitPipeServersRun = true;
            testobj3 castobj = (testobj3)o;
        }
        public override void InitCallbackServers(object rrobj1)
        {
            obj = (testobj3)rrobj1;
        }
        public override async Task<MessageEntry> CallPipeFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override async Task<MessageEntry> CallWireFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
        {
            switch (m.MemberName)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override void DispatchWireMessage(MessageEntry m, Endpoint e)
        {
            switch (m.MemberName)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m, Endpoint e)
        {
            string ename = m.MemberName;
            switch (ename)
            {
                default:
                    throw new MemberNotFoundException("Member not found");
            }
        }
        public override bool IsRequestNoLock(MessageEntry m)
        {
            return false;
        }
    }
    public class testobj_default_impl : testobj
    {
        public virtual Task<string> getf_service_path(CancellationToken rr_cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<testobj2> get_subobj2(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
    }
    public class testobj2_default_impl : testobj2
    {
        public virtual Task<string> getf_service_path(CancellationToken rr_cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<testobj3> get_subobj3_1(CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<testobj3> get_subobj3_2(int ind, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<testobj3> get_subobj3_3(string ind, CancellationToken cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
    }
    public class testobj3_default_impl : testobj3
    {
        public virtual Task<double> add_two_numbers(double a, double b, CancellationToken rr_cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
        public virtual Task<string> getf_service_path(CancellationToken rr_cancel = default(CancellationToken))
        {
            throw new NotImplementedException();
        }
    }
    public static class RRExtensions
    {
    }
}

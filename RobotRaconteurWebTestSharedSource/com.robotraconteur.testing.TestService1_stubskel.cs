//This file is automatically generated. DO NOT EDIT!
using System;
using RobotRaconteurWeb;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
#pragma warning disable 0108

namespace com.robotraconteur.testing.TestService1
{
public class com__robotraconteur__testing__TestService1Factory : ServiceFactory
{
    public override string DefString()
{
    const string s="#This is the standard test service for RobotRaconteur\n#It is not meant to be exhaustive, rather it tests the\n#most common operations.\n\n#Each of the members defined has a specified behavior.\n#Refer to the reference implementation for details\n#on these behaviors.  New implementations of\n#Robot Raconteur should test against the reference\n#client and server to determine compatibilty.\n\nservice com.robotraconteur.testing.TestService1\n\noption version 0.8\n\nimport com.robotraconteur.testing.TestService2\n\nexception testexception1\nexception testexception2\n\nstruct teststruct1\nfield double[] dat1\nfield string str2\nfield string{int32} vec3\nfield string{string} dict4\nfield string{list} list5\nfield teststruct2 struct1\nfield teststruct2{string} dstruct2\nfield teststruct2{list} lstruct3\nfield double[*] multidimarray\n\nfield varvalue var3\n\nend struct\n\nstruct teststruct2\nfield double[] mydat\n\nend struct\n\nobject testroot\nimplements com.robotraconteur.testing.TestService2.baseobj\n\noption constant double[] doubleconst {3.4, 4.8, 14372.8}\noption constant string strconst \"This is a constant\"\n\n#Properties to test the serialization of different data types\n\n#numbers\n\nproperty double d1\nproperty double[] d2\nproperty double[16] d3\nproperty double[16-] d4\nproperty double[*] d5\nproperty double[3,3] d6\n\nproperty single s1\nproperty single[] s2\n\nproperty int8 i8_1\nproperty int8[] i8_2\n\nproperty uint8 u8_1\nproperty uint8[] u8_2\nproperty uint8[*] u8_3\n\nproperty int16 i16_1\nproperty int16[] i16_2\n\nproperty uint16 u16_1\nproperty uint16[] u16_2\n\nproperty int32 i32_1\nproperty int32[] i32_2\nproperty int32[] i32_huge\n\nproperty uint32 u32_1\nproperty uint32[] u32_2\n\nproperty int64 i64_1\nproperty int64[] i64_2\n\nproperty uint64 u64_1\nproperty uint64[] u64_2\n\n#strings\nproperty string str1\n\n#structs\nproperty teststruct1 struct1\nproperty teststruct2 struct2\n\n#indexed sets\nproperty double{int32} is_d1\nproperty double{string} is_d2\nproperty double[]{int32} is_d3\nproperty double[]{string} is_d4\nproperty double[*]{int32} is_d5\nproperty double[*]{string} is_d6\n\nproperty string{int32} is_str1\nproperty string{string} is_str2\n\nproperty teststruct2{int32} is_struct1\nproperty teststruct2{string} is_struct2\nproperty com.robotraconteur.testing.TestService2.ostruct2 struct3\n\n#lists\nproperty double{list} list_d1\nproperty double[]{list} list_d3\nproperty double[*]{list} list_d5\n\nproperty string{list} list_str1\nproperty teststruct2{list} list_struct1\n\n#varvalue\nproperty varvalue var1\nproperty varvalue{int32} var2\nproperty varvalue var_num\nproperty varvalue var_str\nproperty varvalue var_struct\nproperty varvalue var_vector\nproperty varvalue var_dictionary\nproperty varvalue var_list\nproperty varvalue var_multidimarray\n\n#Throw an error to test error transmission\nproperty double errtest\nproperty teststruct1 nulltest\n\n#functions\nfunction void func1()\nfunction void func2(double d1, double d2)\nfunction double func3(double d1, double d2)\nfunction int32 meaning_of_life()\nfunction void func_errtest()\nfunction void func_errtest1()\nfunction void func_errtest2()\nfunction void func_errtest3()\n\n#events\n\nevent ev1()\nevent ev2(double d1, teststruct2 s2 )\n\n#objrefs\n\nobjref sub1 o1\nobjref sub1[] o2\nobjref sub1{int32} o3\nobjref sub1{string} o4\nobjref com.robotraconteur.testing.TestService2.subobj o5\n\nobjref varobject o6\n\nfunction void o6_op(int32 op)\n\n#pipes\n\npipe double[] p1\n\n#option pipe p2 unreliable\npipe teststruct2 p2\nfunction void pipe_check_error()\n\npipe double broadcastpipe\n\n#callbacks\ncallback void cb1()\ncallback void cb2(double d1, double d2)\ncallback double cb3(double d1, double d2)\ncallback int32 cb_meaning_of_life()\ncallback void cb_errtest()\n\nfunction void test_callbacks()\n\n#wires\n\nwire double[] w1\nwire teststruct2 w2\nwire int32[*] w3\n\nwire double broadcastwire\n\n#memory\n\nmemory double[] m1\nmemory double[*] m2\nmemory uint8[*] m3\n\nend object\n\nobject sub1\nproperty double[] d1\nproperty double[*] d2\n\nobjref sub2 o2_1\nobjref sub2{int32} o2_2\nobjref sub2{string} o2_3\n\nproperty string s_ind\nproperty int32 i_ind\n\nend object\n\nobject sub2\n\nproperty string s_ind\nproperty int32 i_ind\n\nproperty string data\nobjref sub3{string} o3_1\nend object\n\nobject sub3\nproperty string ind\nproperty string data2\nproperty double data3\nfunction double add(double d)\nend object\n\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.testing.TestService1";}
    public teststruct1_stub teststruct1_stubentry;
    public teststruct2_stub teststruct2_stubentry;
    public com__robotraconteur__testing__TestService1Factory() : this(null,null) {}
    public com__robotraconteur__testing__TestService1Factory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    teststruct1_stubentry=new teststruct1_stub(this,this.node,this.context);
    teststruct2_stubentry=new teststruct2_stub(this,this.node,this.context);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="teststruct1")
    return teststruct1_stubentry;
    if (objecttype=="teststruct2")
    return teststruct2_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "testroot":
    return new testroot_stub(path, context);
    case "sub1":
    return new sub1_stub(path, context);
    case "sub2":
    return new sub2_stub(path, context);
    case "sub3":
    return new sub3_stub(path, context);
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "testroot":
    return new testroot_skel(path,(testroot)obj,context);
    case "sub1":
    return new sub1_skel(path,(sub1)obj,context);
    case "sub2":
    return new sub2_skel(path,(sub2)obj,context);
    case "sub3":
    return new sub3_skel(path,(sub3)obj,context);
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    if (rr_stype=="testexception1") return new testexception1(rr_exp.Message);
    if (rr_stype=="testexception2") return new testexception2(rr_exp.Message);
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class teststruct1_stub : IStructureStub {
    public teststruct1_stub(com__robotraconteur__testing__TestService1Factory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__testing__TestService1Factory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementNestedElementList PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    teststruct1 s = (teststruct1)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("dat1",s.dat1));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("str2",s.str2));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<int,string>(rr_node, rr_context, "vec3",s.vec3));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,string>(rr_node, rr_context, "dict4",s.dict4));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<string>(rr_node, rr_context, "list5",s.list5));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "struct1",s.struct1));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,teststruct2>(rr_node, rr_context, "dstruct2",s.dstruct2));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<teststruct2>(rr_node, rr_context, "lstruct3",s.lstruct3));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMultiDimArray(rr_node, "multidimarray",(MultiDimArray)s.multidimarray));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackVarType(rr_node, rr_context, "var3",s.var3));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.testing.TestService1.teststruct1",m);
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    teststruct1 s=new teststruct1();
    s.dat1 =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"dat1"));
    s.str2 =MessageElementUtil.UnpackString(MessageElement.FindElement(m.Elements,"str2"));
    s.vec3 =MessageElementUtil.UnpackMap<int,string>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"vec3"));
    s.dict4 =MessageElementUtil.UnpackMap<string,string>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"dict4"));
    s.list5 =MessageElementUtil.UnpackList<string>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"list5"));
    s.struct1 =MessageElementUtil.UnpackStructure<teststruct2>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"struct1"));
    s.dstruct2 =MessageElementUtil.UnpackMap<string,teststruct2>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"dstruct2"));
    s.lstruct3 =MessageElementUtil.UnpackList<teststruct2>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"lstruct3"));
    s.multidimarray =MessageElementUtil.UnpackMultiDimArray(rr_node, MessageElement.FindElement(m.Elements,"multidimarray"));
    s.var3 =MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElement.FindElement(m.Elements,"var3"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class teststruct2_stub : IStructureStub {
    public teststruct2_stub(com__robotraconteur__testing__TestService1Factory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__testing__TestService1Factory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementNestedElementList PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    teststruct2 s = (teststruct2)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("mydat",s.mydat));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.testing.TestService1.teststruct2",m);
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    teststruct2 s=new teststruct2();
    s.mydat =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"mydat"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class testroot_stub : ServiceStub , testroot {
    private CallbackClient<Func<CancellationToken, Task>> rr_cb1;
    private CallbackClient<Func<double, double, CancellationToken, Task>> rr_cb2;
    private CallbackClient<Func<double, double, CancellationToken, Task<double>>> rr_cb3;
    private CallbackClient<Func<CancellationToken, Task<int>>> rr_cb_meaning_of_life;
    private CallbackClient<Func<CancellationToken, Task>> rr_cb_errtest;
    private Pipe<double[]> rr_p1;
    private Pipe<teststruct2> rr_p2;
    private Pipe<double> rr_broadcastpipe;
    private Wire<double[]> rr_w1;
    private Wire<teststruct2> rr_w2;
    private Wire<MultiDimArray> rr_w3;
    private Wire<double> rr_broadcastwire;
    private ArrayMemory<double> rr_m1;
    private MultiDimArrayMemory<double> rr_m2;
    private MultiDimArrayMemory<byte> rr_m3;
    public testroot_stub(string path, ClientContext c) : base(path, c) {
    rr_cb1=new CallbackClient<Func<CancellationToken, Task>>("cb1");
    rr_cb2=new CallbackClient<Func<double, double, CancellationToken, Task>>("cb2");
    rr_cb3=new CallbackClient<Func<double, double, CancellationToken, Task<double>>>("cb3");
    rr_cb_meaning_of_life=new CallbackClient<Func<CancellationToken, Task<int>>>("cb_meaning_of_life");
    rr_cb_errtest=new CallbackClient<Func<CancellationToken, Task>>("cb_errtest");
    rr_p1=new PipeClient<double[]>("p1", this);
    rr_p2=new PipeClient<teststruct2>("p2", this);
    rr_broadcastpipe=new PipeClient<double>("broadcastpipe", this);
    rr_w1=new WireClient<double[]>("w1", this);
    rr_w2=new WireClient<teststruct2>("w2", this);
    rr_w3=new WireClient<MultiDimArray>("w3", this);
    rr_broadcastwire=new WireClient<double>("broadcastwire", this);
    rr_m1=new ArrayMemoryClient<double>("m1",this, MemberDefinition_Direction.both);
    rr_m2=new MultiDimArrayMemoryClient<double>("m2",this,MemberDefinition_Direction.both);
    rr_m3=new MultiDimArrayMemoryClient<byte>("m3",this,MemberDefinition_Direction.both);
    }
    public async Task<double> get_d1(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "d1");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<double>(me));
        }
    public async Task set_d1(double value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"d1");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<double[]> get_d2(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "d2");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackArray<double>(me);
        }
    public async Task set_d2(double[] value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"d2");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<double[]> get_d3(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "d3");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackArray<double>(me), 16, false);
        }
    public async Task set_d3(double[] value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"d3");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("value",DataTypeUtil.VerifyArrayLength(value, 16, false)));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<double[]> get_d4(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "d4");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackArray<double>(me), 16, true);
        }
    public async Task set_d4(double[] value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"d4");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("value",DataTypeUtil.VerifyArrayLength(value, 16, true)));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<MultiDimArray> get_d5(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "d5");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackMultiDimArray(rr_node, me);
        }
    public async Task set_d5(MultiDimArray value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"d5");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMultiDimArray(rr_node, "value",(MultiDimArray)value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<MultiDimArray> get_d6(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "d6");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackMultiDimArray(rr_node, me),9,new uint[] {3, 3});
        }
    public async Task set_d6(MultiDimArray value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"d6");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMultiDimArray(rr_node, "value",(MultiDimArray)DataTypeUtil.VerifyArrayLength(value,9,new uint[] {3, 3})));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<float> get_s1(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "s1");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<float>(me));
        }
    public async Task set_s1(float value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"s1");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<float>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<float[]> get_s2(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "s2");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackArray<float>(me);
        }
    public async Task set_s2(float[] value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"s2");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<float>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<sbyte> get_i8_1(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "i8_1");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<sbyte>(me));
        }
    public async Task set_i8_1(sbyte value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"i8_1");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<sbyte>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<sbyte[]> get_i8_2(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "i8_2");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackArray<sbyte>(me);
        }
    public async Task set_i8_2(sbyte[] value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"i8_2");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<sbyte>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<byte> get_u8_1(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "u8_1");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<byte>(me));
        }
    public async Task set_u8_1(byte value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"u8_1");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<byte>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<byte[]> get_u8_2(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "u8_2");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackArray<byte>(me);
        }
    public async Task set_u8_2(byte[] value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"u8_2");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<byte>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<MultiDimArray> get_u8_3(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "u8_3");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackMultiDimArray(rr_node, me);
        }
    public async Task set_u8_3(MultiDimArray value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"u8_3");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMultiDimArray(rr_node, "value",(MultiDimArray)value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<short> get_i16_1(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "i16_1");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<short>(me));
        }
    public async Task set_i16_1(short value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"i16_1");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<short>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<short[]> get_i16_2(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "i16_2");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackArray<short>(me);
        }
    public async Task set_i16_2(short[] value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"i16_2");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<short>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<ushort> get_u16_1(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "u16_1");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<ushort>(me));
        }
    public async Task set_u16_1(ushort value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"u16_1");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<ushort>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<ushort[]> get_u16_2(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "u16_2");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackArray<ushort>(me);
        }
    public async Task set_u16_2(ushort[] value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"u16_2");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<ushort>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<int> get_i32_1(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "i32_1");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<int>(me));
        }
    public async Task set_i32_1(int value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"i32_1");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<int>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<int[]> get_i32_2(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "i32_2");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackArray<int>(me);
        }
    public async Task set_i32_2(int[] value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"i32_2");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<int>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<int[]> get_i32_huge(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "i32_huge");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackArray<int>(me);
        }
    public async Task set_i32_huge(int[] value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"i32_huge");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<int>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<uint> get_u32_1(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "u32_1");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<uint>(me));
        }
    public async Task set_u32_1(uint value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"u32_1");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<uint[]> get_u32_2(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "u32_2");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackArray<uint>(me);
        }
    public async Task set_u32_2(uint[] value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"u32_2");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<uint>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<long> get_i64_1(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "i64_1");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<long>(me));
        }
    public async Task set_i64_1(long value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"i64_1");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<long>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<long[]> get_i64_2(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "i64_2");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackArray<long>(me);
        }
    public async Task set_i64_2(long[] value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"i64_2");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<long>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<ulong> get_u64_1(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "u64_1");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<ulong>(me));
        }
    public async Task set_u64_1(ulong value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"u64_1");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<ulong>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<ulong[]> get_u64_2(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "u64_2");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackArray<ulong>(me);
        }
    public async Task set_u64_2(ulong[] value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"u64_2");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<ulong>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<string> get_str1(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "str1");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_str1(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"str1");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<teststruct1> get_struct1(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "struct1");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackStructure<teststruct1>(rr_node, rr_context, me);
        }
    public async Task set_struct1(teststruct1 value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"struct1");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<teststruct2> get_struct2(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "struct2");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackStructure<teststruct2>(rr_node, rr_context, me);
        }
    public async Task set_struct2(teststruct2 value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"struct2");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<Dictionary<int,double>> get_is_d1(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "is_d1");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackMap<int,double>(rr_node, rr_context, me);
        }
    public async Task set_is_d1(Dictionary<int,double> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"is_d1");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<int,double>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<Dictionary<string,double>> get_is_d2(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "is_d2");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackMap<string,double>(rr_node, rr_context, me);
        }
    public async Task set_is_d2(Dictionary<string,double> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"is_d2");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,double>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<Dictionary<int,double[]>> get_is_d3(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "is_d3");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackMap<int,double[]>(rr_node, rr_context, me);
        }
    public async Task set_is_d3(Dictionary<int,double[]> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"is_d3");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<int,double[]>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<Dictionary<string,double[]>> get_is_d4(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "is_d4");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackMap<string,double[]>(rr_node, rr_context, me);
        }
    public async Task set_is_d4(Dictionary<string,double[]> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"is_d4");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,double[]>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<Dictionary<int,MultiDimArray>> get_is_d5(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "is_d5");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackMap<int,MultiDimArray>(rr_node, rr_context, me);
        }
    public async Task set_is_d5(Dictionary<int,MultiDimArray> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"is_d5");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<int,MultiDimArray>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<Dictionary<string,MultiDimArray>> get_is_d6(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "is_d6");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackMap<string,MultiDimArray>(rr_node, rr_context, me);
        }
    public async Task set_is_d6(Dictionary<string,MultiDimArray> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"is_d6");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,MultiDimArray>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<Dictionary<int,string>> get_is_str1(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "is_str1");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackMap<int,string>(rr_node, rr_context, me);
        }
    public async Task set_is_str1(Dictionary<int,string> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"is_str1");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<int,string>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<Dictionary<string,string>> get_is_str2(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "is_str2");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackMap<string,string>(rr_node, rr_context, me);
        }
    public async Task set_is_str2(Dictionary<string,string> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"is_str2");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,string>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<Dictionary<int,teststruct2>> get_is_struct1(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "is_struct1");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackMap<int,teststruct2>(rr_node, rr_context, me);
        }
    public async Task set_is_struct1(Dictionary<int,teststruct2> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"is_struct1");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<int,teststruct2>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<Dictionary<string,teststruct2>> get_is_struct2(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "is_struct2");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackMap<string,teststruct2>(rr_node, rr_context, me);
        }
    public async Task set_is_struct2(Dictionary<string,teststruct2> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"is_struct2");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,teststruct2>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<com.robotraconteur.testing.TestService2.ostruct2> get_struct3(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "struct3");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackStructure<com.robotraconteur.testing.TestService2.ostruct2>(rr_node, rr_context, me);
        }
    public async Task set_struct3(com.robotraconteur.testing.TestService2.ostruct2 value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"struct3");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<List<double>> get_list_d1(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "list_d1");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackList<double>(rr_node, rr_context, me);
        }
    public async Task set_list_d1(List<double> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"list_d1");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<double>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<List<double[]>> get_list_d3(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "list_d3");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackList<double[]>(rr_node, rr_context, me);
        }
    public async Task set_list_d3(List<double[]> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"list_d3");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<double[]>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<List<MultiDimArray>> get_list_d5(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "list_d5");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackList<MultiDimArray>(rr_node, rr_context, me);
        }
    public async Task set_list_d5(List<MultiDimArray> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"list_d5");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<MultiDimArray>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<List<string>> get_list_str1(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "list_str1");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackList<string>(rr_node, rr_context, me);
        }
    public async Task set_list_str1(List<string> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"list_str1");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<string>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<List<teststruct2>> get_list_struct1(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "list_struct1");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackList<teststruct2>(rr_node, rr_context, me);
        }
    public async Task set_list_struct1(List<teststruct2> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"list_struct1");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<teststruct2>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<object> get_var1(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "var1");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackVarType(rr_node, rr_context, me);
        }
    public async Task set_var1(object value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"var1");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackVarType(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<Dictionary<int,object>> get_var2(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "var2");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackMap<int,object>(rr_node, rr_context, me);
        }
    public async Task set_var2(Dictionary<int,object> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"var2");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<int,object>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<object> get_var_num(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "var_num");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackVarType(rr_node, rr_context, me);
        }
    public async Task set_var_num(object value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"var_num");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackVarType(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<object> get_var_str(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "var_str");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackVarType(rr_node, rr_context, me);
        }
    public async Task set_var_str(object value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"var_str");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackVarType(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<object> get_var_struct(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "var_struct");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackVarType(rr_node, rr_context, me);
        }
    public async Task set_var_struct(object value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"var_struct");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackVarType(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<object> get_var_vector(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "var_vector");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackVarType(rr_node, rr_context, me);
        }
    public async Task set_var_vector(object value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"var_vector");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackVarType(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<object> get_var_dictionary(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "var_dictionary");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackVarType(rr_node, rr_context, me);
        }
    public async Task set_var_dictionary(object value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"var_dictionary");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackVarType(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<object> get_var_list(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "var_list");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackVarType(rr_node, rr_context, me);
        }
    public async Task set_var_list(object value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"var_list");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackVarType(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<object> get_var_multidimarray(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "var_multidimarray");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackVarType(rr_node, rr_context, me);
        }
    public async Task set_var_multidimarray(object value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"var_multidimarray");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackVarType(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<double> get_errtest(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "errtest");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<double>(me));
        }
    public async Task set_errtest(double value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"errtest");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<teststruct1> get_nulltest(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "nulltest");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackStructure<teststruct1>(rr_node, rr_context, me);
        }
    public async Task set_nulltest(teststruct1 value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"nulltest");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task func1(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"func1");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel).ConfigureAwait(false);
    }
    public async Task func2(double d1, double d2, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"func2");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackScalar<double>("d1",d1));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackScalar<double>("d2",d2));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel).ConfigureAwait(false);
    }
    public async Task<double> func3(double d1, double d2, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"func3");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackScalar<double>("d1",d1));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackScalar<double>("d2",d2));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel).ConfigureAwait(false);
    return (MessageElementUtil.UnpackScalar<double>(rr_me.FindElement("return")));
    }
    public async Task<int> meaning_of_life(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"meaning_of_life");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel).ConfigureAwait(false);
    return (MessageElementUtil.UnpackScalar<int>(rr_me.FindElement("return")));
    }
    public async Task func_errtest(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"func_errtest");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel).ConfigureAwait(false);
    }
    public async Task func_errtest1(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"func_errtest1");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel).ConfigureAwait(false);
    }
    public async Task func_errtest2(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"func_errtest2");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel).ConfigureAwait(false);
    }
    public async Task func_errtest3(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"func_errtest3");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel).ConfigureAwait(false);
    }
    public async Task o6_op(int op, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"o6_op");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackScalar<int>("op",op));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel).ConfigureAwait(false);
    }
    public async Task pipe_check_error(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"pipe_check_error");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel).ConfigureAwait(false);
    }
    public async Task test_callbacks(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"test_callbacks");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel).ConfigureAwait(false);
    }
    public event Action ev1;
    public event Action<double, teststruct2> ev2;
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    case "ev1":
    {
    if (ev1 != null) { 
    ev1();
    }
    return;
    }
    case "ev2":
    {
    if (ev2 != null) { 
    double d1=(MessageElementUtil.UnpackScalar<double>(rr_m.FindElement("d1")));
    teststruct2 s2=MessageElementUtil.UnpackStructure<teststruct2>(rr_node, rr_context, rr_m.FindElement("s2"));
    ev2(d1, s2);
    }
    return;
    }
    default:
    break;
    }
    }
    public async Task<sub1> get_o1(CancellationToken cancel=default(CancellationToken)) {
    return (sub1)await FindObjRefTyped("o1","com.robotraconteur.testing.TestService1.sub1",cancel).ConfigureAwait(false);
    }
    public async Task<sub1> get_o2(int ind, CancellationToken cancel=default(CancellationToken)) {
    return (sub1)await FindObjRefTyped("o2",ind.ToString(),"com.robotraconteur.testing.TestService1.sub1",cancel).ConfigureAwait(false);
    }
    public async Task<sub1> get_o3(int ind, CancellationToken cancel=default(CancellationToken)) {
    return (sub1)await FindObjRefTyped("o3",ind.ToString(),"com.robotraconteur.testing.TestService1.sub1",cancel).ConfigureAwait(false);
    }
    public async Task<sub1> get_o4(string ind, CancellationToken cancel=default(CancellationToken)) {
    return (sub1)await FindObjRefTyped("o4",ind.ToString(),"com.robotraconteur.testing.TestService1.sub1",cancel).ConfigureAwait(false);
    }
    public async Task<com.robotraconteur.testing.TestService2.subobj> get_o5(CancellationToken cancel=default(CancellationToken)) {
    return (com.robotraconteur.testing.TestService2.subobj)await FindObjRefTyped("o5","com.robotraconteur.testing.TestService2.subobj",cancel).ConfigureAwait(false);
    }
    public async Task<object> get_o6(CancellationToken cancel=default(CancellationToken)) {
    return (object)await FindObjRef("o6", cancel).ConfigureAwait(false);
    }
    public Pipe<double[]> p1 {
    get { return rr_p1;  }
    set { throw new InvalidOperationException();}
    }
    public Pipe<teststruct2> p2 {
    get { return rr_p2;  }
    set { throw new InvalidOperationException();}
    }
    public Pipe<double> broadcastpipe {
    get { return rr_broadcastpipe;  }
    set { throw new InvalidOperationException();}
    }
    public Callback<Func<CancellationToken, Task>> cb1 {
    get { return rr_cb1;  }
    set { throw new InvalidOperationException();}
    }
    public Callback<Func<double, double, CancellationToken, Task>> cb2 {
    get { return rr_cb2;  }
    set { throw new InvalidOperationException();}
    }
    public Callback<Func<double, double, CancellationToken, Task<double>>> cb3 {
    get { return rr_cb3;  }
    set { throw new InvalidOperationException();}
    }
    public Callback<Func<CancellationToken, Task<int>>> cb_meaning_of_life {
    get { return rr_cb_meaning_of_life;  }
    set { throw new InvalidOperationException();}
    }
    public Callback<Func<CancellationToken, Task>> cb_errtest {
    get { return rr_cb_errtest;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<double[]> w1 {
    get { return rr_w1;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<teststruct2> w2 {
    get { return rr_w2;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<MultiDimArray> w3 {
    get { return rr_w3;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<double> broadcastwire {
    get { return rr_broadcastwire;  }
    set { throw new InvalidOperationException();}
    }
    public ArrayMemory<double> m1 { 
    get { return rr_m1; }
    }
    public MultiDimArrayMemory<double> m2 {
    get { return rr_m2; }
    }
    public MultiDimArrayMemory<byte> m3 {
    get { return rr_m3; }
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "p1":
    this.rr_p1.PipePacketReceived(m);
    break;
    case "p2":
    this.rr_p2.PipePacketReceived(m);
    break;
    case "broadcastpipe":
    this.rr_broadcastpipe.PipePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    case "cb1": {
    await this.cb1.Function(default(CancellationToken)).ConfigureAwait(false);
    MessageElementUtil.AddMessageElement(rr_mr,MessageElementUtil.PackScalar<int>("return",0));
    break;
    }
    case "cb2": {
    double d1=(MessageElementUtil.UnpackScalar<double>(rr_m.FindElement("d1")));
    double d2=(MessageElementUtil.UnpackScalar<double>(rr_m.FindElement("d2")));
    await this.cb2.Function(d1, d2, default(CancellationToken)).ConfigureAwait(false);
    MessageElementUtil.AddMessageElement(rr_mr,MessageElementUtil.PackScalar<int>("return",0));
    break;
    }
    case "cb3": {
    double d1=(MessageElementUtil.UnpackScalar<double>(rr_m.FindElement("d1")));
    double d2=(MessageElementUtil.UnpackScalar<double>(rr_m.FindElement("d2")));
    var rr_ret=await cb3.Function(d1, d2, default(CancellationToken)).ConfigureAwait(false);
    MessageElementUtil.AddMessageElement(rr_mr,MessageElementUtil.PackScalar<double>("return",rr_ret));
    break;
    }
    case "cb_meaning_of_life": {
    var rr_ret=await cb_meaning_of_life.Function(default(CancellationToken)).ConfigureAwait(false);
    MessageElementUtil.AddMessageElement(rr_mr,MessageElementUtil.PackScalar<int>("return",rr_ret));
    break;
    }
    case "cb_errtest": {
    await this.cb_errtest.Function(default(CancellationToken)).ConfigureAwait(false);
    MessageElementUtil.AddMessageElement(rr_mr,MessageElementUtil.PackScalar<int>("return",0));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "w1":
    this.rr_w1.WirePacketReceived(m);
    break;
    case "w2":
    this.rr_w2.WirePacketReceived(m);
    break;
    case "w3":
    this.rr_w3.WirePacketReceived(m);
    break;
    case "broadcastwire":
    this.rr_broadcastwire.WirePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
}
public class sub1_stub : ServiceStub , sub1 {
    public sub1_stub(string path, ClientContext c) : base(path, c) {
    }
    public async Task<double[]> get_d1(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "d1");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackArray<double>(me);
        }
    public async Task set_d1(double[] value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"d1");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<MultiDimArray> get_d2(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "d2");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackMultiDimArray(rr_node, me);
        }
    public async Task set_d2(MultiDimArray value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"d2");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMultiDimArray(rr_node, "value",(MultiDimArray)value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<string> get_s_ind(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "s_ind");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_s_ind(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"s_ind");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<int> get_i_ind(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "i_ind");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<int>(me));
        }
    public async Task set_i_ind(int value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"i_ind");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<int>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public async Task<sub2> get_o2_1(CancellationToken cancel=default(CancellationToken)) {
    return (sub2)await FindObjRefTyped("o2_1","com.robotraconteur.testing.TestService1.sub2",cancel).ConfigureAwait(false);
    }
    public async Task<sub2> get_o2_2(int ind, CancellationToken cancel=default(CancellationToken)) {
    return (sub2)await FindObjRefTyped("o2_2",ind.ToString(),"com.robotraconteur.testing.TestService1.sub2",cancel).ConfigureAwait(false);
    }
    public async Task<sub2> get_o2_3(string ind, CancellationToken cancel=default(CancellationToken)) {
    return (sub2)await FindObjRefTyped("o2_3",ind.ToString(),"com.robotraconteur.testing.TestService1.sub2",cancel).ConfigureAwait(false);
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
}
public class sub2_stub : ServiceStub , sub2 {
    public sub2_stub(string path, ClientContext c) : base(path, c) {
    }
    public async Task<string> get_s_ind(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "s_ind");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_s_ind(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"s_ind");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<int> get_i_ind(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "i_ind");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<int>(me));
        }
    public async Task set_i_ind(int value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"i_ind");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<int>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<string> get_data(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "data");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_data(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"data");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public async Task<sub3> get_o3_1(string ind, CancellationToken cancel=default(CancellationToken)) {
    return (sub3)await FindObjRefTyped("o3_1",ind.ToString(),"com.robotraconteur.testing.TestService1.sub3",cancel).ConfigureAwait(false);
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
}
public class sub3_stub : ServiceStub , sub3 {
    public sub3_stub(string path, ClientContext c) : base(path, c) {
    }
    public async Task<string> get_ind(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "ind");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_ind(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"ind");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<string> get_data2(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "data2");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackString(me);
        }
    public async Task set_data2(string value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"data2");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<double> get_data3(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "data3");
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<double>(me));
        }
    public async Task set_data3(double value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"data3");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel).ConfigureAwait(false);
        }
    public async Task<double> add(double d, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"add");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackScalar<double>("d",d));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel).ConfigureAwait(false);
    return (MessageElementUtil.UnpackScalar<double>(rr_me.FindElement("return")));
    }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
}
public class testroot_skel : ServiceSkel {
    protected testroot obj;
    public testroot_skel(string p,testroot o,ServerContext c) : base(p,o,c) { obj=(testroot)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "d1":
    {
    double ret=await obj.get_d1().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackScalar<double>("value",ret));
    break;
    }
    case "d2":
    {
    double[] ret=await obj.get_d2().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackArray<double>("value",ret));
    break;
    }
    case "d3":
    {
    double[] ret=await obj.get_d3().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackArray<double>("value",DataTypeUtil.VerifyArrayLength(ret, 16, false)));
    break;
    }
    case "d4":
    {
    double[] ret=await obj.get_d4().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackArray<double>("value",DataTypeUtil.VerifyArrayLength(ret, 16, true)));
    break;
    }
    case "d5":
    {
    MultiDimArray ret=await obj.get_d5().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackMultiDimArray(rr_node, "value",(MultiDimArray)ret));
    break;
    }
    case "d6":
    {
    MultiDimArray ret=await obj.get_d6().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackMultiDimArray(rr_node, "value",(MultiDimArray)DataTypeUtil.VerifyArrayLength(ret,9,new uint[] {3, 3})));
    break;
    }
    case "s1":
    {
    float ret=await obj.get_s1().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackScalar<float>("value",ret));
    break;
    }
    case "s2":
    {
    float[] ret=await obj.get_s2().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackArray<float>("value",ret));
    break;
    }
    case "i8_1":
    {
    sbyte ret=await obj.get_i8_1().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackScalar<sbyte>("value",ret));
    break;
    }
    case "i8_2":
    {
    sbyte[] ret=await obj.get_i8_2().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackArray<sbyte>("value",ret));
    break;
    }
    case "u8_1":
    {
    byte ret=await obj.get_u8_1().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackScalar<byte>("value",ret));
    break;
    }
    case "u8_2":
    {
    byte[] ret=await obj.get_u8_2().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackArray<byte>("value",ret));
    break;
    }
    case "u8_3":
    {
    MultiDimArray ret=await obj.get_u8_3().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackMultiDimArray(rr_node, "value",(MultiDimArray)ret));
    break;
    }
    case "i16_1":
    {
    short ret=await obj.get_i16_1().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackScalar<short>("value",ret));
    break;
    }
    case "i16_2":
    {
    short[] ret=await obj.get_i16_2().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackArray<short>("value",ret));
    break;
    }
    case "u16_1":
    {
    ushort ret=await obj.get_u16_1().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackScalar<ushort>("value",ret));
    break;
    }
    case "u16_2":
    {
    ushort[] ret=await obj.get_u16_2().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackArray<ushort>("value",ret));
    break;
    }
    case "i32_1":
    {
    int ret=await obj.get_i32_1().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackScalar<int>("value",ret));
    break;
    }
    case "i32_2":
    {
    int[] ret=await obj.get_i32_2().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackArray<int>("value",ret));
    break;
    }
    case "i32_huge":
    {
    int[] ret=await obj.get_i32_huge().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackArray<int>("value",ret));
    break;
    }
    case "u32_1":
    {
    uint ret=await obj.get_u32_1().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackScalar<uint>("value",ret));
    break;
    }
    case "u32_2":
    {
    uint[] ret=await obj.get_u32_2().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackArray<uint>("value",ret));
    break;
    }
    case "i64_1":
    {
    long ret=await obj.get_i64_1().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackScalar<long>("value",ret));
    break;
    }
    case "i64_2":
    {
    long[] ret=await obj.get_i64_2().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackArray<long>("value",ret));
    break;
    }
    case "u64_1":
    {
    ulong ret=await obj.get_u64_1().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackScalar<ulong>("value",ret));
    break;
    }
    case "u64_2":
    {
    ulong[] ret=await obj.get_u64_2().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackArray<ulong>("value",ret));
    break;
    }
    case "str1":
    {
    string ret=await obj.get_str1().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "struct1":
    {
    teststruct1 ret=await obj.get_struct1().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "value",ret));
    break;
    }
    case "struct2":
    {
    teststruct2 ret=await obj.get_struct2().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "value",ret));
    break;
    }
    case "is_d1":
    {
    Dictionary<int,double> ret=await obj.get_is_d1().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackMapType<int,double>(rr_node, rr_context, "value",ret));
    break;
    }
    case "is_d2":
    {
    Dictionary<string,double> ret=await obj.get_is_d2().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackMapType<string,double>(rr_node, rr_context, "value",ret));
    break;
    }
    case "is_d3":
    {
    Dictionary<int,double[]> ret=await obj.get_is_d3().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackMapType<int,double[]>(rr_node, rr_context, "value",ret));
    break;
    }
    case "is_d4":
    {
    Dictionary<string,double[]> ret=await obj.get_is_d4().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackMapType<string,double[]>(rr_node, rr_context, "value",ret));
    break;
    }
    case "is_d5":
    {
    Dictionary<int,MultiDimArray> ret=await obj.get_is_d5().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackMapType<int,MultiDimArray>(rr_node, rr_context, "value",ret));
    break;
    }
    case "is_d6":
    {
    Dictionary<string,MultiDimArray> ret=await obj.get_is_d6().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackMapType<string,MultiDimArray>(rr_node, rr_context, "value",ret));
    break;
    }
    case "is_str1":
    {
    Dictionary<int,string> ret=await obj.get_is_str1().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackMapType<int,string>(rr_node, rr_context, "value",ret));
    break;
    }
    case "is_str2":
    {
    Dictionary<string,string> ret=await obj.get_is_str2().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackMapType<string,string>(rr_node, rr_context, "value",ret));
    break;
    }
    case "is_struct1":
    {
    Dictionary<int,teststruct2> ret=await obj.get_is_struct1().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackMapType<int,teststruct2>(rr_node, rr_context, "value",ret));
    break;
    }
    case "is_struct2":
    {
    Dictionary<string,teststruct2> ret=await obj.get_is_struct2().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackMapType<string,teststruct2>(rr_node, rr_context, "value",ret));
    break;
    }
    case "struct3":
    {
    com.robotraconteur.testing.TestService2.ostruct2 ret=await obj.get_struct3().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "value",ret));
    break;
    }
    case "list_d1":
    {
    List<double> ret=await obj.get_list_d1().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackListType<double>(rr_node, rr_context, "value",ret));
    break;
    }
    case "list_d3":
    {
    List<double[]> ret=await obj.get_list_d3().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackListType<double[]>(rr_node, rr_context, "value",ret));
    break;
    }
    case "list_d5":
    {
    List<MultiDimArray> ret=await obj.get_list_d5().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackListType<MultiDimArray>(rr_node, rr_context, "value",ret));
    break;
    }
    case "list_str1":
    {
    List<string> ret=await obj.get_list_str1().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackListType<string>(rr_node, rr_context, "value",ret));
    break;
    }
    case "list_struct1":
    {
    List<teststruct2> ret=await obj.get_list_struct1().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackListType<teststruct2>(rr_node, rr_context, "value",ret));
    break;
    }
    case "var1":
    {
    object ret=await obj.get_var1().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackVarType(rr_node, rr_context, "value",ret));
    break;
    }
    case "var2":
    {
    Dictionary<int,object> ret=await obj.get_var2().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackMapType<int,object>(rr_node, rr_context, "value",ret));
    break;
    }
    case "var_num":
    {
    object ret=await obj.get_var_num().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackVarType(rr_node, rr_context, "value",ret));
    break;
    }
    case "var_str":
    {
    object ret=await obj.get_var_str().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackVarType(rr_node, rr_context, "value",ret));
    break;
    }
    case "var_struct":
    {
    object ret=await obj.get_var_struct().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackVarType(rr_node, rr_context, "value",ret));
    break;
    }
    case "var_vector":
    {
    object ret=await obj.get_var_vector().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackVarType(rr_node, rr_context, "value",ret));
    break;
    }
    case "var_dictionary":
    {
    object ret=await obj.get_var_dictionary().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackVarType(rr_node, rr_context, "value",ret));
    break;
    }
    case "var_list":
    {
    object ret=await obj.get_var_list().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackVarType(rr_node, rr_context, "value",ret));
    break;
    }
    case "var_multidimarray":
    {
    object ret=await obj.get_var_multidimarray().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackVarType(rr_node, rr_context, "value",ret));
    break;
    }
    case "errtest":
    {
    double ret=await obj.get_errtest().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackScalar<double>("value",ret));
    break;
    }
    case "nulltest":
    {
    teststruct1 ret=await obj.get_nulltest().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "d1":
    {
    await obj.set_d1((MessageElementUtil.UnpackScalar<double>(me))).ConfigureAwait(false);
    break;
    }
    case "d2":
    {
    await obj.set_d2(MessageElementUtil.UnpackArray<double>(me)).ConfigureAwait(false);
    break;
    }
    case "d3":
    {
    await obj.set_d3(DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackArray<double>(me), 16, false)).ConfigureAwait(false);
    break;
    }
    case "d4":
    {
    await obj.set_d4(DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackArray<double>(me), 16, true)).ConfigureAwait(false);
    break;
    }
    case "d5":
    {
    await obj.set_d5(MessageElementUtil.UnpackMultiDimArray(rr_node, me)).ConfigureAwait(false);
    break;
    }
    case "d6":
    {
    await obj.set_d6(DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackMultiDimArray(rr_node, me),9,new uint[] {3, 3})).ConfigureAwait(false);
    break;
    }
    case "s1":
    {
    await obj.set_s1((MessageElementUtil.UnpackScalar<float>(me))).ConfigureAwait(false);
    break;
    }
    case "s2":
    {
    await obj.set_s2(MessageElementUtil.UnpackArray<float>(me)).ConfigureAwait(false);
    break;
    }
    case "i8_1":
    {
    await obj.set_i8_1((MessageElementUtil.UnpackScalar<sbyte>(me))).ConfigureAwait(false);
    break;
    }
    case "i8_2":
    {
    await obj.set_i8_2(MessageElementUtil.UnpackArray<sbyte>(me)).ConfigureAwait(false);
    break;
    }
    case "u8_1":
    {
    await obj.set_u8_1((MessageElementUtil.UnpackScalar<byte>(me))).ConfigureAwait(false);
    break;
    }
    case "u8_2":
    {
    await obj.set_u8_2(MessageElementUtil.UnpackArray<byte>(me)).ConfigureAwait(false);
    break;
    }
    case "u8_3":
    {
    await obj.set_u8_3(MessageElementUtil.UnpackMultiDimArray(rr_node, me)).ConfigureAwait(false);
    break;
    }
    case "i16_1":
    {
    await obj.set_i16_1((MessageElementUtil.UnpackScalar<short>(me))).ConfigureAwait(false);
    break;
    }
    case "i16_2":
    {
    await obj.set_i16_2(MessageElementUtil.UnpackArray<short>(me)).ConfigureAwait(false);
    break;
    }
    case "u16_1":
    {
    await obj.set_u16_1((MessageElementUtil.UnpackScalar<ushort>(me))).ConfigureAwait(false);
    break;
    }
    case "u16_2":
    {
    await obj.set_u16_2(MessageElementUtil.UnpackArray<ushort>(me)).ConfigureAwait(false);
    break;
    }
    case "i32_1":
    {
    await obj.set_i32_1((MessageElementUtil.UnpackScalar<int>(me))).ConfigureAwait(false);
    break;
    }
    case "i32_2":
    {
    await obj.set_i32_2(MessageElementUtil.UnpackArray<int>(me)).ConfigureAwait(false);
    break;
    }
    case "i32_huge":
    {
    await obj.set_i32_huge(MessageElementUtil.UnpackArray<int>(me)).ConfigureAwait(false);
    break;
    }
    case "u32_1":
    {
    await obj.set_u32_1((MessageElementUtil.UnpackScalar<uint>(me))).ConfigureAwait(false);
    break;
    }
    case "u32_2":
    {
    await obj.set_u32_2(MessageElementUtil.UnpackArray<uint>(me)).ConfigureAwait(false);
    break;
    }
    case "i64_1":
    {
    await obj.set_i64_1((MessageElementUtil.UnpackScalar<long>(me))).ConfigureAwait(false);
    break;
    }
    case "i64_2":
    {
    await obj.set_i64_2(MessageElementUtil.UnpackArray<long>(me)).ConfigureAwait(false);
    break;
    }
    case "u64_1":
    {
    await obj.set_u64_1((MessageElementUtil.UnpackScalar<ulong>(me))).ConfigureAwait(false);
    break;
    }
    case "u64_2":
    {
    await obj.set_u64_2(MessageElementUtil.UnpackArray<ulong>(me)).ConfigureAwait(false);
    break;
    }
    case "str1":
    {
    await obj.set_str1(MessageElementUtil.UnpackString(me)).ConfigureAwait(false);
    break;
    }
    case "struct1":
    {
    await obj.set_struct1(MessageElementUtil.UnpackStructure<teststruct1>(rr_node, rr_context, me)).ConfigureAwait(false);
    break;
    }
    case "struct2":
    {
    await obj.set_struct2(MessageElementUtil.UnpackStructure<teststruct2>(rr_node, rr_context, me)).ConfigureAwait(false);
    break;
    }
    case "is_d1":
    {
    await obj.set_is_d1(MessageElementUtil.UnpackMap<int,double>(rr_node, rr_context, me)).ConfigureAwait(false);
    break;
    }
    case "is_d2":
    {
    await obj.set_is_d2(MessageElementUtil.UnpackMap<string,double>(rr_node, rr_context, me)).ConfigureAwait(false);
    break;
    }
    case "is_d3":
    {
    await obj.set_is_d3(MessageElementUtil.UnpackMap<int,double[]>(rr_node, rr_context, me)).ConfigureAwait(false);
    break;
    }
    case "is_d4":
    {
    await obj.set_is_d4(MessageElementUtil.UnpackMap<string,double[]>(rr_node, rr_context, me)).ConfigureAwait(false);
    break;
    }
    case "is_d5":
    {
    await obj.set_is_d5(MessageElementUtil.UnpackMap<int,MultiDimArray>(rr_node, rr_context, me)).ConfigureAwait(false);
    break;
    }
    case "is_d6":
    {
    await obj.set_is_d6(MessageElementUtil.UnpackMap<string,MultiDimArray>(rr_node, rr_context, me)).ConfigureAwait(false);
    break;
    }
    case "is_str1":
    {
    await obj.set_is_str1(MessageElementUtil.UnpackMap<int,string>(rr_node, rr_context, me)).ConfigureAwait(false);
    break;
    }
    case "is_str2":
    {
    await obj.set_is_str2(MessageElementUtil.UnpackMap<string,string>(rr_node, rr_context, me)).ConfigureAwait(false);
    break;
    }
    case "is_struct1":
    {
    await obj.set_is_struct1(MessageElementUtil.UnpackMap<int,teststruct2>(rr_node, rr_context, me)).ConfigureAwait(false);
    break;
    }
    case "is_struct2":
    {
    await obj.set_is_struct2(MessageElementUtil.UnpackMap<string,teststruct2>(rr_node, rr_context, me)).ConfigureAwait(false);
    break;
    }
    case "struct3":
    {
    await obj.set_struct3(MessageElementUtil.UnpackStructure<com.robotraconteur.testing.TestService2.ostruct2>(rr_node, rr_context, me)).ConfigureAwait(false);
    break;
    }
    case "list_d1":
    {
    await obj.set_list_d1(MessageElementUtil.UnpackList<double>(rr_node, rr_context, me)).ConfigureAwait(false);
    break;
    }
    case "list_d3":
    {
    await obj.set_list_d3(MessageElementUtil.UnpackList<double[]>(rr_node, rr_context, me)).ConfigureAwait(false);
    break;
    }
    case "list_d5":
    {
    await obj.set_list_d5(MessageElementUtil.UnpackList<MultiDimArray>(rr_node, rr_context, me)).ConfigureAwait(false);
    break;
    }
    case "list_str1":
    {
    await obj.set_list_str1(MessageElementUtil.UnpackList<string>(rr_node, rr_context, me)).ConfigureAwait(false);
    break;
    }
    case "list_struct1":
    {
    await obj.set_list_struct1(MessageElementUtil.UnpackList<teststruct2>(rr_node, rr_context, me)).ConfigureAwait(false);
    break;
    }
    case "var1":
    {
    await obj.set_var1(MessageElementUtil.UnpackVarType(rr_node, rr_context, me)).ConfigureAwait(false);
    break;
    }
    case "var2":
    {
    await obj.set_var2(MessageElementUtil.UnpackMap<int,object>(rr_node, rr_context, me)).ConfigureAwait(false);
    break;
    }
    case "var_num":
    {
    await obj.set_var_num(MessageElementUtil.UnpackVarType(rr_node, rr_context, me)).ConfigureAwait(false);
    break;
    }
    case "var_str":
    {
    await obj.set_var_str(MessageElementUtil.UnpackVarType(rr_node, rr_context, me)).ConfigureAwait(false);
    break;
    }
    case "var_struct":
    {
    await obj.set_var_struct(MessageElementUtil.UnpackVarType(rr_node, rr_context, me)).ConfigureAwait(false);
    break;
    }
    case "var_vector":
    {
    await obj.set_var_vector(MessageElementUtil.UnpackVarType(rr_node, rr_context, me)).ConfigureAwait(false);
    break;
    }
    case "var_dictionary":
    {
    await obj.set_var_dictionary(MessageElementUtil.UnpackVarType(rr_node, rr_context, me)).ConfigureAwait(false);
    break;
    }
    case "var_list":
    {
    await obj.set_var_list(MessageElementUtil.UnpackVarType(rr_node, rr_context, me)).ConfigureAwait(false);
    break;
    }
    case "var_multidimarray":
    {
    await obj.set_var_multidimarray(MessageElementUtil.UnpackVarType(rr_node, rr_context, me)).ConfigureAwait(false);
    break;
    }
    case "errtest":
    {
    await obj.set_errtest((MessageElementUtil.UnpackScalar<double>(me))).ConfigureAwait(false);
    break;
    }
    case "nulltest":
    {
    await obj.set_nulltest(MessageElementUtil.UnpackStructure<teststruct1>(rr_node, rr_context, me)).ConfigureAwait(false);
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    case "func1":
    {
    await this.obj.func1(default(CancellationToken)).ConfigureAwait(false);
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "func2":
    {
    double d1=(MessageElementUtil.UnpackScalar<double>(MessageElementUtil.FindElement(rr_m,"d1")));
    double d2=(MessageElementUtil.UnpackScalar<double>(MessageElementUtil.FindElement(rr_m,"d2")));
    await this.obj.func2(d1, d2, default(CancellationToken)).ConfigureAwait(false);
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "func3":
    {
    double d1=(MessageElementUtil.UnpackScalar<double>(MessageElementUtil.FindElement(rr_m,"d1")));
    double d2=(MessageElementUtil.UnpackScalar<double>(MessageElementUtil.FindElement(rr_m,"d2")));
    double rr_ret=await this.obj.func3(d1, d2, default(CancellationToken)).ConfigureAwait(false);
    rr_mr.AddElement(MessageElementUtil.PackScalar<double>("return",rr_ret));
    break;
    }
    case "meaning_of_life":
    {
    int rr_ret=await this.obj.meaning_of_life(default(CancellationToken)).ConfigureAwait(false);
    rr_mr.AddElement(MessageElementUtil.PackScalar<int>("return",rr_ret));
    break;
    }
    case "func_errtest":
    {
    await this.obj.func_errtest(default(CancellationToken)).ConfigureAwait(false);
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "func_errtest1":
    {
    await this.obj.func_errtest1(default(CancellationToken)).ConfigureAwait(false);
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "func_errtest2":
    {
    await this.obj.func_errtest2(default(CancellationToken)).ConfigureAwait(false);
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "func_errtest3":
    {
    await this.obj.func_errtest3(default(CancellationToken)).ConfigureAwait(false);
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "o6_op":
    {
    int op=(MessageElementUtil.UnpackScalar<int>(MessageElementUtil.FindElement(rr_m,"op")));
    await this.obj.o6_op(op, default(CancellationToken)).ConfigureAwait(false);
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "pipe_check_error":
    {
    await this.obj.pipe_check_error(default(CancellationToken)).ConfigureAwait(false);
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "test_callbacks":
    {
    await this.obj.test_callbacks(default(CancellationToken)).ConfigureAwait(false);
    rr_mr.AddElement("return",(int)0);
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    case "o1": {
    return await obj.get_o1().ConfigureAwait(false);
    }
    case "o2": {
    return await obj.get_o2(Int32.Parse(ind)).ConfigureAwait(false);
    }
    case "o3": {
    return await obj.get_o3(Int32.Parse(ind)).ConfigureAwait(false);
    }
    case "o4": {
    return await obj.get_o4(ind).ConfigureAwait(false);
    }
    case "o5": {
    return await obj.get_o5().ConfigureAwait(false);
    }
    case "o6": {
    return await obj.get_o6().ConfigureAwait(false);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(testroot)rrobj1;
    obj.ev1+=rr_ev1;
    obj.ev2+=rr_ev2;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(testroot)rrobj1;
    obj.ev1-=rr_ev1;
    obj.ev2-=rr_ev2;
    }
    public void rr_ev1() {
    MessageEntry rr_mm=new MessageEntry(MessageEntryType.EventReq,"ev1");
    this.SendEvent(rr_mm);
    }
    public void rr_ev2(double d1, teststruct2 s2) {
    MessageEntry rr_mm=new MessageEntry(MessageEntryType.EventReq,"ev2");
    MessageElementUtil.AddMessageElement(rr_mm,MessageElementUtil.PackScalar<double>("d1",d1));
    MessageElementUtil.AddMessageElement(rr_mm,MessageElementUtil.PackStructure(rr_node, rr_context, "s2",s2));
    this.SendEvent(rr_mm);
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    case "cb1": {
    return new Func<CancellationToken, Task>( async delegate(CancellationToken rr_cancel) {
    MessageEntry rr_mm=new MessageEntry(MessageEntryType.CallbackCallReq,"cb1");
    rr_mm.ServicePath=m_ServicePath;
    MessageEntry rr_mr=await RRContext.ProcessCallbackRequest(rr_mm,rr_endpoint,rr_cancel).ConfigureAwait(false);
    MessageElement rr_me = rr_mr.FindElement("return");
    });
    }
    case "cb2": {
    return new Func<double, double, CancellationToken, Task>( async delegate(double d1, double d2, CancellationToken rr_cancel) {
    MessageEntry rr_mm=new MessageEntry(MessageEntryType.CallbackCallReq,"cb2");
    rr_mm.ServicePath=m_ServicePath;
    MessageElementUtil.AddMessageElement(rr_mm,MessageElementUtil.PackScalar<double>("d1",d1));
    MessageElementUtil.AddMessageElement(rr_mm,MessageElementUtil.PackScalar<double>("d2",d2));
    MessageEntry rr_mr=await RRContext.ProcessCallbackRequest(rr_mm,rr_endpoint,rr_cancel).ConfigureAwait(false);
    MessageElement rr_me = rr_mr.FindElement("return");
    });
    }
    case "cb3": {
    return new Func<double, double, CancellationToken, Task<double>>( async delegate(double d1, double d2, CancellationToken rr_cancel) {
    MessageEntry rr_mm=new MessageEntry(MessageEntryType.CallbackCallReq,"cb3");
    rr_mm.ServicePath=m_ServicePath;
    MessageElementUtil.AddMessageElement(rr_mm,MessageElementUtil.PackScalar<double>("d1",d1));
    MessageElementUtil.AddMessageElement(rr_mm,MessageElementUtil.PackScalar<double>("d2",d2));
    MessageEntry rr_mr=await RRContext.ProcessCallbackRequest(rr_mm,rr_endpoint,rr_cancel).ConfigureAwait(false);
    MessageElement rr_me = rr_mr.FindElement("return");
    return (MessageElementUtil.UnpackScalar<double>(rr_me));
    });
    }
    case "cb_meaning_of_life": {
    return new Func<CancellationToken, Task<int>>( async delegate(CancellationToken rr_cancel) {
    MessageEntry rr_mm=new MessageEntry(MessageEntryType.CallbackCallReq,"cb_meaning_of_life");
    rr_mm.ServicePath=m_ServicePath;
    MessageEntry rr_mr=await RRContext.ProcessCallbackRequest(rr_mm,rr_endpoint,rr_cancel).ConfigureAwait(false);
    MessageElement rr_me = rr_mr.FindElement("return");
    return (MessageElementUtil.UnpackScalar<int>(rr_me));
    });
    }
    case "cb_errtest": {
    return new Func<CancellationToken, Task>( async delegate(CancellationToken rr_cancel) {
    MessageEntry rr_mm=new MessageEntry(MessageEntryType.CallbackCallReq,"cb_errtest");
    rr_mm.ServicePath=m_ServicePath;
    MessageEntry rr_mr=await RRContext.ProcessCallbackRequest(rr_mm,rr_endpoint,rr_cancel).ConfigureAwait(false);
    MessageElement rr_me = rr_mr.FindElement("return");
    });
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private PipeServer<double[]> rr_p1;
    private PipeServer<teststruct2> rr_p2;
    private PipeServer<double> rr_broadcastpipe;
    private WireServer<double[]> rr_w1;
    private WireServer<teststruct2> rr_w2;
    private WireServer<MultiDimArray> rr_w3;
    private WireServer<double> rr_broadcastwire;
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    testroot castobj=(testroot)o;
    this.rr_p1=new PipeServer<double[]>("p1",this);
    this.rr_p2=new PipeServer<teststruct2>("p2",this);
    this.rr_broadcastpipe=new PipeServer<double>("broadcastpipe",this);
    this.rr_w1=new WireServer<double[]>("w1",this);
    this.rr_w2=new WireServer<teststruct2>("w2",this);
    this.rr_w3=new WireServer<MultiDimArray>("w3",this);
    this.rr_broadcastwire=new WireServer<double>("broadcastwire",this);
    castobj.p1=this.rr_p1;
    castobj.p2=this.rr_p2;
    castobj.broadcastpipe=this.rr_broadcastpipe;
    castobj.w1=this.rr_w1;
    castobj.w2=this.rr_w2;
    castobj.w3=this.rr_w3;
    castobj.broadcastwire=this.rr_broadcastwire;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(testroot)rrobj1;
    obj.cb1=new CallbackServer<Func<CancellationToken, Task>>("cb1",this);
    obj.cb2=new CallbackServer<Func<double, double, CancellationToken, Task>>("cb2",this);
    obj.cb3=new CallbackServer<Func<double, double, CancellationToken, Task<double>>>("cb3",this);
    obj.cb_meaning_of_life=new CallbackServer<Func<CancellationToken, Task<int>>>("cb_meaning_of_life",this);
    obj.cb_errtest=new CallbackServer<Func<CancellationToken, Task>>("cb_errtest",this);
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "p1":
    return await this.rr_p1.PipeCommand(m,e).ConfigureAwait(false);
    case "p2":
    return await this.rr_p2.PipeCommand(m,e).ConfigureAwait(false);
    case "broadcastpipe":
    return await this.rr_broadcastpipe.PipeCommand(m,e).ConfigureAwait(false);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "w1":
    return await this.rr_w1.WireCommand(m,e).ConfigureAwait(false);
    case "w2":
    return await this.rr_w2.WireCommand(m,e).ConfigureAwait(false);
    case "w3":
    return await this.rr_w3.WireCommand(m,e).ConfigureAwait(false);
    case "broadcastwire":
    return await this.rr_broadcastwire.WireCommand(m,e).ConfigureAwait(false);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "p1":
    this.rr_p1.PipePacketReceived(m,e);
    break;
    case "p2":
    this.rr_p2.PipePacketReceived(m,e);
    break;
    case "broadcastpipe":
    this.rr_broadcastpipe.PipePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "w1":
    this.rr_w1.WirePacketReceived(m,e);
    break;
    case "w2":
    this.rr_w2.WirePacketReceived(m,e);
    break;
    case "w3":
    this.rr_w3.WirePacketReceived(m,e);
    break;
    case "broadcastwire":
    this.rr_broadcastwire.WirePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "m1":
     return await (new ArrayMemoryServiceSkel<double>("m1",this,MemberDefinition_Direction.both)).CallMemoryFunction(m,e,obj.m1).ConfigureAwait(false);
    break;
    case "m2":
     return await (new MultiDimArrayMemoryServiceSkel<double>("m2",this,MemberDefinition_Direction.both)).CallMemoryFunction(m,e,obj.m2).ConfigureAwait(false);
    break;
    case "m3":
     return await (new MultiDimArrayMemoryServiceSkel<byte>("m3",this,MemberDefinition_Direction.both)).CallMemoryFunction(m,e,obj.m3).ConfigureAwait(false);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    return false;
    }
}
public class sub1_skel : ServiceSkel {
    protected sub1 obj;
    public sub1_skel(string p,sub1 o,ServerContext c) : base(p,o,c) { obj=(sub1)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "d1":
    {
    double[] ret=await obj.get_d1().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackArray<double>("value",ret));
    break;
    }
    case "d2":
    {
    MultiDimArray ret=await obj.get_d2().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackMultiDimArray(rr_node, "value",(MultiDimArray)ret));
    break;
    }
    case "s_ind":
    {
    string ret=await obj.get_s_ind().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "i_ind":
    {
    int ret=await obj.get_i_ind().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackScalar<int>("value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "d1":
    {
    await obj.set_d1(MessageElementUtil.UnpackArray<double>(me)).ConfigureAwait(false);
    break;
    }
    case "d2":
    {
    await obj.set_d2(MessageElementUtil.UnpackMultiDimArray(rr_node, me)).ConfigureAwait(false);
    break;
    }
    case "s_ind":
    {
    await obj.set_s_ind(MessageElementUtil.UnpackString(me)).ConfigureAwait(false);
    break;
    }
    case "i_ind":
    {
    await obj.set_i_ind((MessageElementUtil.UnpackScalar<int>(me))).ConfigureAwait(false);
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    case "o2_1": {
    return await obj.get_o2_1().ConfigureAwait(false);
    }
    case "o2_2": {
    return await obj.get_o2_2(Int32.Parse(ind)).ConfigureAwait(false);
    }
    case "o2_3": {
    return await obj.get_o2_3(ind).ConfigureAwait(false);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(sub1)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(sub1)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    sub1 castobj=(sub1)o;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(sub1)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    return false;
    }
}
public class sub2_skel : ServiceSkel {
    protected sub2 obj;
    public sub2_skel(string p,sub2 o,ServerContext c) : base(p,o,c) { obj=(sub2)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "s_ind":
    {
    string ret=await obj.get_s_ind().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "i_ind":
    {
    int ret=await obj.get_i_ind().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackScalar<int>("value",ret));
    break;
    }
    case "data":
    {
    string ret=await obj.get_data().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "s_ind":
    {
    await obj.set_s_ind(MessageElementUtil.UnpackString(me)).ConfigureAwait(false);
    break;
    }
    case "i_ind":
    {
    await obj.set_i_ind((MessageElementUtil.UnpackScalar<int>(me))).ConfigureAwait(false);
    break;
    }
    case "data":
    {
    await obj.set_data(MessageElementUtil.UnpackString(me)).ConfigureAwait(false);
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    case "o3_1": {
    return await obj.get_o3_1(ind).ConfigureAwait(false);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(sub2)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(sub2)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    sub2 castobj=(sub2)o;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(sub2)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    return false;
    }
}
public class sub3_skel : ServiceSkel {
    protected sub3 obj;
    public sub3_skel(string p,sub3 o,ServerContext c) : base(p,o,c) { obj=(sub3)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "ind":
    {
    string ret=await obj.get_ind().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "data2":
    {
    string ret=await obj.get_data2().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackString("value",ret));
    break;
    }
    case "data3":
    {
    double ret=await obj.get_data3().ConfigureAwait(false);
    mr.AddElement(MessageElementUtil.PackScalar<double>("value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "ind":
    {
    await obj.set_ind(MessageElementUtil.UnpackString(me)).ConfigureAwait(false);
    break;
    }
    case "data2":
    {
    await obj.set_data2(MessageElementUtil.UnpackString(me)).ConfigureAwait(false);
    break;
    }
    case "data3":
    {
    await obj.set_data3((MessageElementUtil.UnpackScalar<double>(me))).ConfigureAwait(false);
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    case "add":
    {
    double d=(MessageElementUtil.UnpackScalar<double>(MessageElementUtil.FindElement(rr_m,"d")));
    double rr_ret=await this.obj.add(d, default(CancellationToken)).ConfigureAwait(false);
    rr_mr.AddElement(MessageElementUtil.PackScalar<double>("return",rr_ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(sub3)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(sub3)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    sub3 castobj=(sub3)o;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(sub3)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    return false;
    }
}
public class testroot_default_impl : testroot{
    protected Callback<Func<CancellationToken, Task>> rrvar_cb1;
    protected Callback<Func<double, double, CancellationToken, Task>> rrvar_cb2;
    protected Callback<Func<double, double, CancellationToken, Task<double>>> rrvar_cb3;
    protected Callback<Func<CancellationToken, Task<int>>> rrvar_cb_meaning_of_life;
    protected Callback<Func<CancellationToken, Task>> rrvar_cb_errtest;
    public virtual Task<double> get_d1(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_d1(double value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<double[]> get_d2(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_d2(double[] value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<double[]> get_d3(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_d3(double[] value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<double[]> get_d4(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_d4(double[] value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<MultiDimArray> get_d5(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_d5(MultiDimArray value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<MultiDimArray> get_d6(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_d6(MultiDimArray value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<float> get_s1(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_s1(float value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<float[]> get_s2(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_s2(float[] value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<sbyte> get_i8_1(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_i8_1(sbyte value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<sbyte[]> get_i8_2(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_i8_2(sbyte[] value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<byte> get_u8_1(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_u8_1(byte value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<byte[]> get_u8_2(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_u8_2(byte[] value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<MultiDimArray> get_u8_3(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_u8_3(MultiDimArray value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<short> get_i16_1(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_i16_1(short value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<short[]> get_i16_2(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_i16_2(short[] value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<ushort> get_u16_1(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_u16_1(ushort value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<ushort[]> get_u16_2(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_u16_2(ushort[] value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<int> get_i32_1(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_i32_1(int value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<int[]> get_i32_2(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_i32_2(int[] value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<int[]> get_i32_huge(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_i32_huge(int[] value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<uint> get_u32_1(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_u32_1(uint value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<uint[]> get_u32_2(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_u32_2(uint[] value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<long> get_i64_1(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_i64_1(long value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<long[]> get_i64_2(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_i64_2(long[] value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<ulong> get_u64_1(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_u64_1(ulong value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<ulong[]> get_u64_2(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_u64_2(ulong[] value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<string> get_str1(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_str1(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<teststruct1> get_struct1(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_struct1(teststruct1 value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<teststruct2> get_struct2(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_struct2(teststruct2 value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Dictionary<int,double>> get_is_d1(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_is_d1(Dictionary<int,double> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Dictionary<string,double>> get_is_d2(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_is_d2(Dictionary<string,double> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Dictionary<int,double[]>> get_is_d3(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_is_d3(Dictionary<int,double[]> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Dictionary<string,double[]>> get_is_d4(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_is_d4(Dictionary<string,double[]> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Dictionary<int,MultiDimArray>> get_is_d5(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_is_d5(Dictionary<int,MultiDimArray> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Dictionary<string,MultiDimArray>> get_is_d6(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_is_d6(Dictionary<string,MultiDimArray> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Dictionary<int,string>> get_is_str1(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_is_str1(Dictionary<int,string> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Dictionary<string,string>> get_is_str2(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_is_str2(Dictionary<string,string> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Dictionary<int,teststruct2>> get_is_struct1(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_is_struct1(Dictionary<int,teststruct2> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Dictionary<string,teststruct2>> get_is_struct2(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_is_struct2(Dictionary<string,teststruct2> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.testing.TestService2.ostruct2> get_struct3(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_struct3(com.robotraconteur.testing.TestService2.ostruct2 value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<List<double>> get_list_d1(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_list_d1(List<double> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<List<double[]>> get_list_d3(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_list_d3(List<double[]> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<List<MultiDimArray>> get_list_d5(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_list_d5(List<MultiDimArray> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<List<string>> get_list_str1(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_list_str1(List<string> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<List<teststruct2>> get_list_struct1(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_list_struct1(List<teststruct2> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<object> get_var1(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_var1(object value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Dictionary<int,object>> get_var2(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_var2(Dictionary<int,object> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<object> get_var_num(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_var_num(object value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<object> get_var_str(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_var_str(object value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<object> get_var_struct(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_var_struct(object value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<object> get_var_vector(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_var_vector(object value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<object> get_var_dictionary(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_var_dictionary(object value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<object> get_var_list(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_var_list(object value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<object> get_var_multidimarray(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_var_multidimarray(object value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<double> get_errtest(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_errtest(double value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<teststruct1> get_nulltest(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_nulltest(teststruct1 value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task func1(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task func2(double d1, double d2,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<double> func3(double d1, double d2,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<int> meaning_of_life(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task func_errtest(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task func_errtest1(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task func_errtest2(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task func_errtest3(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task o6_op(int op,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task pipe_check_error(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task test_callbacks(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual event Action ev1;
    public virtual event Action<double, teststruct2> ev2;
    public virtual Task<sub1> get_o1(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<sub1> get_o2(int ind, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<sub1> get_o3(int ind, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<sub1> get_o4(string ind, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<com.robotraconteur.testing.TestService2.subobj> get_o5(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<object> get_o6(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Pipe<double[]> p1 {
    get { throw new NotImplementedException(); }
    set { throw new InvalidOperationException();}
    }
    public virtual Pipe<teststruct2> p2 {
    get { throw new NotImplementedException(); }
    set { throw new InvalidOperationException();}
    }
    public virtual Pipe<double> broadcastpipe {
    get { throw new NotImplementedException(); }
    set { throw new InvalidOperationException();}
    }
    public virtual Callback<Func<CancellationToken, Task>> cb1 {
    get { return rrvar_cb1;  }
    set {
    if (rrvar_cb1!=null) throw new InvalidOperationException("Callback already set");
    rrvar_cb1= value;
    }
    }
    public virtual Callback<Func<double, double, CancellationToken, Task>> cb2 {
    get { return rrvar_cb2;  }
    set {
    if (rrvar_cb2!=null) throw new InvalidOperationException("Callback already set");
    rrvar_cb2= value;
    }
    }
    public virtual Callback<Func<double, double, CancellationToken, Task<double>>> cb3 {
    get { return rrvar_cb3;  }
    set {
    if (rrvar_cb3!=null) throw new InvalidOperationException("Callback already set");
    rrvar_cb3= value;
    }
    }
    public virtual Callback<Func<CancellationToken, Task<int>>> cb_meaning_of_life {
    get { return rrvar_cb_meaning_of_life;  }
    set {
    if (rrvar_cb_meaning_of_life!=null) throw new InvalidOperationException("Callback already set");
    rrvar_cb_meaning_of_life= value;
    }
    }
    public virtual Callback<Func<CancellationToken, Task>> cb_errtest {
    get { return rrvar_cb_errtest;  }
    set {
    if (rrvar_cb_errtest!=null) throw new InvalidOperationException("Callback already set");
    rrvar_cb_errtest= value;
    }
    }
    public virtual Wire<double[]> w1 {
    get { throw new NotImplementedException(); }
    set { throw new NotImplementedException();}
    }
    public virtual Wire<teststruct2> w2 {
    get { throw new NotImplementedException(); }
    set { throw new NotImplementedException();}
    }
    public virtual Wire<MultiDimArray> w3 {
    get { throw new NotImplementedException(); }
    set { throw new NotImplementedException();}
    }
    public virtual Wire<double> broadcastwire {
    get { throw new NotImplementedException(); }
    set { throw new NotImplementedException();}
    }
    public virtual ArrayMemory<double> m1 { 
    get { throw new NotImplementedException(); }
    }
    public virtual MultiDimArrayMemory<double> m2 {
    get { throw new NotImplementedException(); }
    }
    public virtual MultiDimArrayMemory<byte> m3 {
    get { throw new NotImplementedException(); }
    }
}
public class sub1_default_impl : sub1{
    public virtual Task<double[]> get_d1(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_d1(double[] value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<MultiDimArray> get_d2(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_d2(MultiDimArray value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<string> get_s_ind(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_s_ind(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<int> get_i_ind(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_i_ind(int value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<sub2> get_o2_1(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<sub2> get_o2_2(int ind, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<sub2> get_o2_3(string ind, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
}
public class sub2_default_impl : sub2{
    public virtual Task<string> get_s_ind(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_s_ind(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<int> get_i_ind(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_i_ind(int value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<string> get_data(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_data(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<sub3> get_o3_1(string ind, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
}
public class sub3_default_impl : sub3{
    public virtual Task<string> get_ind(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_ind(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<string> get_data2(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_data2(string value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<double> get_data3(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_data3(double value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<double> add(double d,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
}
public static class RRExtensions
{
}
}
